{"ast":null,"code":"import _objectSpread from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nvar DEFAULT_OPTIONS = {\n  channelCount: 2,\n  channelCountMode: 'max',\n  channelInterpretation: 'speakers',\n  gain: 1\n};\nexport var createGainNodeConstructor = function createGainNodeConstructor(audioNodeConstructor, createAudioParam, createGainNodeRenderer, createNativeGainNode, getNativeContext, isNativeOfflineAudioContext) {\n  return /*#__PURE__*/function (_audioNodeConstructor) {\n    _inherits(GainNode, _audioNodeConstructor);\n\n    var _super = _createSuper(GainNode);\n\n    function GainNode(context, options) {\n      var _this;\n\n      _classCallCheck(this, GainNode);\n\n      var nativeContext = getNativeContext(context);\n\n      var mergedOptions = _objectSpread(_objectSpread({}, DEFAULT_OPTIONS), options);\n\n      var nativeGainNode = createNativeGainNode(nativeContext, mergedOptions);\n      var isOffline = isNativeOfflineAudioContext(nativeContext);\n      var gainNodeRenderer = isOffline ? createGainNodeRenderer() : null;\n      _this = _super.call(this, context, false, nativeGainNode, gainNodeRenderer); // Bug #74: Safari does not export the correct values for maxValue and minValue.\n\n      _this._gain = createAudioParam(_assertThisInitialized(_this), isOffline, nativeGainNode.gain, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n      return _this;\n    }\n\n    _createClass(GainNode, [{\n      key: \"gain\",\n      get: function get() {\n        return this._gain;\n      }\n    }]);\n\n    return GainNode;\n  }(audioNodeConstructor);\n};","map":{"version":3,"mappings":";;;;;;AAAA,SAASA,0BAAT,EAAqCC,0BAArC,QAAuE,cAAvE;AAIA,IAAMC,eAAe,GAAG;EACpBC,YAAY,EAAE,CADM;EAEpBC,gBAAgB,EAAE,KAFE;EAGpBC,qBAAqB,EAAE,UAHH;EAIpBC,IAAI,EAAE;AAJc,CAAxB;AAOA,OAAO,IAAMC,yBAAyB,GAAgC,SAAzDA,yBAAyD,CAClEC,oBADkE,EAElEC,gBAFkE,EAGlEC,sBAHkE,EAIlEC,oBAJkE,EAKlEC,gBALkE,EAMlEC,2BANkE,EAOlE;EACA;IAAA;;IAAA;;IAGI,kBAAYC,OAAZ,EAAwBC,OAAxB,EAAuD;MAAA;;MAAA;;MACnD,IAAMC,aAAa,GAAGJ,gBAAgB,CAACE,OAAD,CAAtC;;MACA,IAAMG,aAAa,mCAAQf,eAAR,GAA4Ba,OAA5B,CAAnB;;MACA,IAAMG,cAAc,GAAGP,oBAAoB,CAACK,aAAD,EAAgBC,aAAhB,CAA3C;MACA,IAAME,SAAS,GAAGN,2BAA2B,CAACG,aAAD,CAA7C;MACA,IAAMI,gBAAgB,GAAiCD,SAAS,GAAGT,sBAAsB,EAAzB,GAA8B,IAA9F;MAEA,0BAAMI,OAAN,EAAe,KAAf,EAAsBI,cAAtB,EAAsCE,gBAAtC,EAPmD,CASnD;;MACA,MAAKC,KAAL,GAAaZ,gBAAgB,gCAAOU,SAAP,EAAkBD,cAAc,CAACZ,IAAjC,EAAuCL,0BAAvC,EAAmED,0BAAnE,CAA7B;MAVmD;IAWtD;;IAdL;MAAA;MAAA,KAgBI,eAAQ;QACJ,OAAO,KAAKqB,KAAZ;MACH;IAlBL;;IAAA;EAAA,EAAkDb,oBAAlD;AAoBH,CA5BM","names":["MOST_NEGATIVE_SINGLE_FLOAT","MOST_POSITIVE_SINGLE_FLOAT","DEFAULT_OPTIONS","channelCount","channelCountMode","channelInterpretation","gain","createGainNodeConstructor","audioNodeConstructor","createAudioParam","createGainNodeRenderer","createNativeGainNode","getNativeContext","isNativeOfflineAudioContext","context","options","nativeContext","mergedOptions","nativeGainNode","isOffline","gainNodeRenderer","_gain"],"sources":["C:\\Users\\brigh\\storage\\js_project\\Gakugeki_WEB\\node_modules\\standardized-audio-context\\src\\factories\\gain-node-constructor.ts"],"sourcesContent":["import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nimport { IAudioParam, IGainNode, IGainOptions } from '../interfaces';\nimport { TAudioNodeRenderer, TContext, TGainNodeConstructorFactory } from '../types';\n\nconst DEFAULT_OPTIONS = {\n    channelCount: 2,\n    channelCountMode: 'max',\n    channelInterpretation: 'speakers',\n    gain: 1\n} as const;\n\nexport const createGainNodeConstructor: TGainNodeConstructorFactory = (\n    audioNodeConstructor,\n    createAudioParam,\n    createGainNodeRenderer,\n    createNativeGainNode,\n    getNativeContext,\n    isNativeOfflineAudioContext\n) => {\n    return class GainNode<T extends TContext> extends audioNodeConstructor<T> implements IGainNode<T> {\n        private _gain: IAudioParam;\n\n        constructor(context: T, options?: Partial<IGainOptions>) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeGainNode = createNativeGainNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const gainNodeRenderer = <TAudioNodeRenderer<T, this>>(isOffline ? createGainNodeRenderer() : null);\n\n            super(context, false, nativeGainNode, gainNodeRenderer);\n\n            // Bug #74: Safari does not export the correct values for maxValue and minValue.\n            this._gain = createAudioParam(this, isOffline, nativeGainNode.gain, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n        }\n\n        get gain(): IAudioParam {\n            return this._gain;\n        }\n    };\n};\n"]},"metadata":{},"sourceType":"module"}