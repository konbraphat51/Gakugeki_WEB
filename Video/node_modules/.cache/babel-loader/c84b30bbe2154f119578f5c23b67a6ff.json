{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport var createDynamicsCompressorNodeRendererFactory = function createDynamicsCompressorNodeRendererFactory(connectAudioParam, createNativeDynamicsCompressorNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) {\n  return function () {\n    var renderedNativeDynamicsCompressorNodes = new WeakMap();\n\n    var createDynamicsCompressorNode = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(proxy, nativeOfflineAudioContext) {\n        var nativeDynamicsCompressorNode, nativeDynamicsCompressorNodeIsOwnedByContext, options;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                nativeDynamicsCompressorNode = getNativeAudioNode(proxy);\n                /*\n                 * If the initially used nativeDynamicsCompressorNode was not constructed on the same OfflineAudioContext it needs to be\n                 * created again.\n                 */\n\n                nativeDynamicsCompressorNodeIsOwnedByContext = isOwnedByContext(nativeDynamicsCompressorNode, nativeOfflineAudioContext);\n\n                if (!nativeDynamicsCompressorNodeIsOwnedByContext) {\n                  options = {\n                    attack: nativeDynamicsCompressorNode.attack.value,\n                    channelCount: nativeDynamicsCompressorNode.channelCount,\n                    channelCountMode: nativeDynamicsCompressorNode.channelCountMode,\n                    channelInterpretation: nativeDynamicsCompressorNode.channelInterpretation,\n                    knee: nativeDynamicsCompressorNode.knee.value,\n                    ratio: nativeDynamicsCompressorNode.ratio.value,\n                    release: nativeDynamicsCompressorNode.release.value,\n                    threshold: nativeDynamicsCompressorNode.threshold.value\n                  };\n                  nativeDynamicsCompressorNode = createNativeDynamicsCompressorNode(nativeOfflineAudioContext, options);\n                }\n\n                renderedNativeDynamicsCompressorNodes.set(nativeOfflineAudioContext, nativeDynamicsCompressorNode);\n\n                if (nativeDynamicsCompressorNodeIsOwnedByContext) {\n                  _context.next = 17;\n                  break;\n                }\n\n                _context.next = 7;\n                return renderAutomation(nativeOfflineAudioContext, proxy.attack, nativeDynamicsCompressorNode.attack);\n\n              case 7:\n                _context.next = 9;\n                return renderAutomation(nativeOfflineAudioContext, proxy.knee, nativeDynamicsCompressorNode.knee);\n\n              case 9:\n                _context.next = 11;\n                return renderAutomation(nativeOfflineAudioContext, proxy.ratio, nativeDynamicsCompressorNode.ratio);\n\n              case 11:\n                _context.next = 13;\n                return renderAutomation(nativeOfflineAudioContext, proxy.release, nativeDynamicsCompressorNode.release);\n\n              case 13:\n                _context.next = 15;\n                return renderAutomation(nativeOfflineAudioContext, proxy.threshold, nativeDynamicsCompressorNode.threshold);\n\n              case 15:\n                _context.next = 27;\n                break;\n\n              case 17:\n                _context.next = 19;\n                return connectAudioParam(nativeOfflineAudioContext, proxy.attack, nativeDynamicsCompressorNode.attack);\n\n              case 19:\n                _context.next = 21;\n                return connectAudioParam(nativeOfflineAudioContext, proxy.knee, nativeDynamicsCompressorNode.knee);\n\n              case 21:\n                _context.next = 23;\n                return connectAudioParam(nativeOfflineAudioContext, proxy.ratio, nativeDynamicsCompressorNode.ratio);\n\n              case 23:\n                _context.next = 25;\n                return connectAudioParam(nativeOfflineAudioContext, proxy.release, nativeDynamicsCompressorNode.release);\n\n              case 25:\n                _context.next = 27;\n                return connectAudioParam(nativeOfflineAudioContext, proxy.threshold, nativeDynamicsCompressorNode.threshold);\n\n              case 27:\n                _context.next = 29;\n                return renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeDynamicsCompressorNode);\n\n              case 29:\n                return _context.abrupt(\"return\", nativeDynamicsCompressorNode);\n\n              case 30:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function createDynamicsCompressorNode(_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    return {\n      render: function render(proxy, nativeOfflineAudioContext) {\n        var renderedNativeDynamicsCompressorNode = renderedNativeDynamicsCompressorNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeDynamicsCompressorNode !== undefined) {\n          return Promise.resolve(renderedNativeDynamicsCompressorNode);\n        }\n\n        return createDynamicsCompressorNode(proxy, nativeOfflineAudioContext);\n      }\n    };\n  };\n};","map":{"version":3,"mappings":"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","names":["isOwnedByContext","createDynamicsCompressorNodeRendererFactory","connectAudioParam","createNativeDynamicsCompressorNode","getNativeAudioNode","renderAutomation","renderInputsOfAudioNode","renderedNativeDynamicsCompressorNodes","WeakMap","createDynamicsCompressorNode","proxy","nativeOfflineAudioContext","nativeDynamicsCompressorNode","nativeDynamicsCompressorNodeIsOwnedByContext","options","attack","value","channelCount","channelCountMode","channelInterpretation","knee","ratio","release","threshold","set","render","renderedNativeDynamicsCompressorNode","get","undefined","Promise","resolve"],"sources":["C:\\Users\\brigh\\storage\\js_project\\Gakugeki_WEB\\node_modules\\standardized-audio-context\\src\\factories\\dynamics-compressor-node-renderer-factory.ts"],"sourcesContent":["import { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { IDynamicsCompressorNode, IMinimalOfflineAudioContext, IOfflineAudioContext } from '../interfaces';\nimport { TDynamicsCompressorNodeRendererFactoryFactory, TNativeDynamicsCompressorNode, TNativeOfflineAudioContext } from '../types';\n\nexport const createDynamicsCompressorNodeRendererFactory: TDynamicsCompressorNodeRendererFactoryFactory = (\n    connectAudioParam,\n    createNativeDynamicsCompressorNode,\n    getNativeAudioNode,\n    renderAutomation,\n    renderInputsOfAudioNode\n) => {\n    return <T extends IMinimalOfflineAudioContext | IOfflineAudioContext>() => {\n        const renderedNativeDynamicsCompressorNodes = new WeakMap<TNativeOfflineAudioContext, TNativeDynamicsCompressorNode>();\n\n        const createDynamicsCompressorNode = async (\n            proxy: IDynamicsCompressorNode<T>,\n            nativeOfflineAudioContext: TNativeOfflineAudioContext\n        ) => {\n            let nativeDynamicsCompressorNode = getNativeAudioNode<T, TNativeDynamicsCompressorNode>(proxy);\n\n            /*\n             * If the initially used nativeDynamicsCompressorNode was not constructed on the same OfflineAudioContext it needs to be\n             * created again.\n             */\n            const nativeDynamicsCompressorNodeIsOwnedByContext = isOwnedByContext(nativeDynamicsCompressorNode, nativeOfflineAudioContext);\n\n            if (!nativeDynamicsCompressorNodeIsOwnedByContext) {\n                const options = {\n                    attack: nativeDynamicsCompressorNode.attack.value,\n                    channelCount: nativeDynamicsCompressorNode.channelCount,\n                    channelCountMode: nativeDynamicsCompressorNode.channelCountMode,\n                    channelInterpretation: nativeDynamicsCompressorNode.channelInterpretation,\n                    knee: nativeDynamicsCompressorNode.knee.value,\n                    ratio: nativeDynamicsCompressorNode.ratio.value,\n                    release: nativeDynamicsCompressorNode.release.value,\n                    threshold: nativeDynamicsCompressorNode.threshold.value\n                };\n\n                nativeDynamicsCompressorNode = createNativeDynamicsCompressorNode(nativeOfflineAudioContext, options);\n            }\n\n            renderedNativeDynamicsCompressorNodes.set(nativeOfflineAudioContext, nativeDynamicsCompressorNode);\n\n            if (!nativeDynamicsCompressorNodeIsOwnedByContext) {\n                await renderAutomation(nativeOfflineAudioContext, proxy.attack, nativeDynamicsCompressorNode.attack);\n                await renderAutomation(nativeOfflineAudioContext, proxy.knee, nativeDynamicsCompressorNode.knee);\n                await renderAutomation(nativeOfflineAudioContext, proxy.ratio, nativeDynamicsCompressorNode.ratio);\n                await renderAutomation(nativeOfflineAudioContext, proxy.release, nativeDynamicsCompressorNode.release);\n                await renderAutomation(nativeOfflineAudioContext, proxy.threshold, nativeDynamicsCompressorNode.threshold);\n            } else {\n                await connectAudioParam(nativeOfflineAudioContext, proxy.attack, nativeDynamicsCompressorNode.attack);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.knee, nativeDynamicsCompressorNode.knee);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.ratio, nativeDynamicsCompressorNode.ratio);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.release, nativeDynamicsCompressorNode.release);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.threshold, nativeDynamicsCompressorNode.threshold);\n            }\n\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeDynamicsCompressorNode);\n\n            return nativeDynamicsCompressorNode;\n        };\n\n        return {\n            render(\n                proxy: IDynamicsCompressorNode<T>,\n                nativeOfflineAudioContext: TNativeOfflineAudioContext\n            ): Promise<TNativeDynamicsCompressorNode> {\n                const renderedNativeDynamicsCompressorNode = renderedNativeDynamicsCompressorNodes.get(nativeOfflineAudioContext);\n\n                if (renderedNativeDynamicsCompressorNode !== undefined) {\n                    return Promise.resolve(renderedNativeDynamicsCompressorNode);\n                }\n\n                return createDynamicsCompressorNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n"]},"metadata":{},"sourceType":"module"}