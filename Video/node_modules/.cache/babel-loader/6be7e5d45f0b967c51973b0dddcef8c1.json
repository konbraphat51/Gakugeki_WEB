{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport var createConstantSourceNodeRendererFactory = function createConstantSourceNodeRendererFactory(connectAudioParam, createNativeConstantSourceNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) {\n  return function () {\n    var renderedNativeConstantSourceNodes = new WeakMap();\n    var start = null;\n    var stop = null;\n\n    var createConstantSourceNode = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(proxy, nativeOfflineAudioContext) {\n        var nativeConstantSourceNode, nativeConstantSourceNodeIsOwnedByContext, options;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                nativeConstantSourceNode = getNativeAudioNode(proxy);\n                /*\n                 * If the initially used nativeConstantSourceNode was not constructed on the same OfflineAudioContext it needs to be created\n                 * again.\n                 */\n\n                nativeConstantSourceNodeIsOwnedByContext = isOwnedByContext(nativeConstantSourceNode, nativeOfflineAudioContext);\n\n                if (!nativeConstantSourceNodeIsOwnedByContext) {\n                  options = {\n                    channelCount: nativeConstantSourceNode.channelCount,\n                    channelCountMode: nativeConstantSourceNode.channelCountMode,\n                    channelInterpretation: nativeConstantSourceNode.channelInterpretation,\n                    offset: nativeConstantSourceNode.offset.value\n                  };\n                  nativeConstantSourceNode = createNativeConstantSourceNode(nativeOfflineAudioContext, options);\n\n                  if (start !== null) {\n                    nativeConstantSourceNode.start(start);\n                  }\n\n                  if (stop !== null) {\n                    nativeConstantSourceNode.stop(stop);\n                  }\n                }\n\n                renderedNativeConstantSourceNodes.set(nativeOfflineAudioContext, nativeConstantSourceNode);\n\n                if (nativeConstantSourceNodeIsOwnedByContext) {\n                  _context.next = 9;\n                  break;\n                }\n\n                _context.next = 7;\n                return renderAutomation(nativeOfflineAudioContext, proxy.offset, nativeConstantSourceNode.offset);\n\n              case 7:\n                _context.next = 11;\n                break;\n\n              case 9:\n                _context.next = 11;\n                return connectAudioParam(nativeOfflineAudioContext, proxy.offset, nativeConstantSourceNode.offset);\n\n              case 11:\n                _context.next = 13;\n                return renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeConstantSourceNode);\n\n              case 13:\n                return _context.abrupt(\"return\", nativeConstantSourceNode);\n\n              case 14:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function createConstantSourceNode(_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    return {\n      set start(value) {\n        start = value;\n      },\n\n      set stop(value) {\n        stop = value;\n      },\n\n      render: function render(proxy, nativeOfflineAudioContext) {\n        var renderedNativeConstantSourceNode = renderedNativeConstantSourceNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeConstantSourceNode !== undefined) {\n          return Promise.resolve(renderedNativeConstantSourceNode);\n        }\n\n        return createConstantSourceNode(proxy, nativeOfflineAudioContext);\n      }\n    };\n  };\n};","map":{"version":3,"mappings":";;AAAA,SAASA,gBAAT,QAAiC,gCAAjC;AAIA,OAAO,IAAMC,uCAAuC,GAA8C,SAArFA,uCAAqF,CAC9FC,iBAD8F,EAE9FC,8BAF8F,EAG9FC,kBAH8F,EAI9FC,gBAJ8F,EAK9FC,uBAL8F,EAM9F;EACA,OAAO,YAAmE;IACtE,IAAMC,iCAAiC,GAAG,IAAIC,OAAJ,EAA1C;IAEA,IAAIC,KAAK,GAAkB,IAA3B;IACA,IAAIC,IAAI,GAAkB,IAA1B;;IAEA,IAAMC,wBAAwB;MAAA,sEAAG,iBAAOC,KAAP,EAAsCC,yBAAtC;QAAA;QAAA;UAAA;YAAA;cAAA;gBACzBC,wBADyB,GACEV,kBAAkB,CAA+BQ,KAA/B,CADpB;gBAG7B;;;;;gBAIMG,wCAPuB,GAOoBf,gBAAgB,CAACc,wBAAD,EAA2BD,yBAA3B,CAPpC;;gBAS7B,IAAI,CAACE,wCAAL,EAA+C;kBACrCC,OADqC,GAC3B;oBACZC,YAAY,EAAEH,wBAAwB,CAACG,YAD3B;oBAEZC,gBAAgB,EAAEJ,wBAAwB,CAACI,gBAF/B;oBAGZC,qBAAqB,EAAEL,wBAAwB,CAACK,qBAHpC;oBAIZC,MAAM,EAAEN,wBAAwB,CAACM,MAAzB,CAAgCC;kBAJ5B,CAD2B;kBAQ3CP,wBAAwB,GAAGX,8BAA8B,CAACU,yBAAD,EAA4BG,OAA5B,CAAzD;;kBAEA,IAAIP,KAAK,KAAK,IAAd,EAAoB;oBAChBK,wBAAwB,CAACL,KAAzB,CAA+BA,KAA/B;kBACH;;kBAED,IAAIC,IAAI,KAAK,IAAb,EAAmB;oBACfI,wBAAwB,CAACJ,IAAzB,CAA8BA,IAA9B;kBACH;gBACJ;;gBAEDH,iCAAiC,CAACe,GAAlC,CAAsCT,yBAAtC,EAAiEC,wBAAjE;;gBA5B6B,IA8BxBC,wCA9BwB;kBAAA;kBAAA;gBAAA;;gBAAA;gBAAA,OA+BnBV,gBAAgB,CAACQ,yBAAD,EAA4BD,KAAK,CAACQ,MAAlC,EAA0CN,wBAAwB,CAACM,MAAnE,CA/BG;;cAAA;gBAAA;gBAAA;;cAAA;gBAAA;gBAAA,OAiCnBlB,iBAAiB,CAACW,yBAAD,EAA4BD,KAAK,CAACQ,MAAlC,EAA0CN,wBAAwB,CAACM,MAAnE,CAjCE;;cAAA;gBAAA;gBAAA,OAoCvBd,uBAAuB,CAACM,KAAD,EAAQC,yBAAR,EAAmCC,wBAAnC,CApCA;;cAAA;gBAAA,iCAsCtBA,wBAtCsB;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CAAH;;MAAA,gBAAxBH,wBAAwB;QAAA;MAAA;IAAA,GAA9B;;IAyCA,OAAO;MACH,IAAIF,KAAJ,CAAUY,KAAV,EAAuB;QACnBZ,KAAK,GAAGY,KAAR;MACH,CAHE;;MAIH,IAAIX,IAAJ,CAASW,KAAT,EAAsB;QAClBX,IAAI,GAAGW,KAAP;MACH,CANE;;MAOHE,MAPG,kBAQCX,KARD,EASCC,yBATD,EASsD;QAErD,IAAMW,gCAAgC,GAAGjB,iCAAiC,CAACkB,GAAlC,CAAsCZ,yBAAtC,CAAzC;;QAEA,IAAIW,gCAAgC,KAAKE,SAAzC,EAAoD;UAChD,OAAOC,OAAO,CAACC,OAAR,CAAgBJ,gCAAhB,CAAP;QACH;;QAED,OAAOb,wBAAwB,CAACC,KAAD,EAAQC,yBAAR,CAA/B;MACH;IAlBE,CAAP;EAoBH,CAnED;AAoEH,CA3EM","names":["isOwnedByContext","createConstantSourceNodeRendererFactory","connectAudioParam","createNativeConstantSourceNode","getNativeAudioNode","renderAutomation","renderInputsOfAudioNode","renderedNativeConstantSourceNodes","WeakMap","start","stop","createConstantSourceNode","proxy","nativeOfflineAudioContext","nativeConstantSourceNode","nativeConstantSourceNodeIsOwnedByContext","options","channelCount","channelCountMode","channelInterpretation","offset","value","set","render","renderedNativeConstantSourceNode","get","undefined","Promise","resolve"],"sources":["C:\\Users\\brigh\\storage\\js_project\\Gakugeki_WEB\\node_modules\\standardized-audio-context\\src\\factories\\constant-source-node-renderer-factory.ts"],"sourcesContent":["import { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { IConstantSourceNode, IMinimalOfflineAudioContext, IOfflineAudioContext } from '../interfaces';\nimport { TConstantSourceNodeRendererFactoryFactory, TNativeConstantSourceNode, TNativeOfflineAudioContext } from '../types';\n\nexport const createConstantSourceNodeRendererFactory: TConstantSourceNodeRendererFactoryFactory = (\n    connectAudioParam,\n    createNativeConstantSourceNode,\n    getNativeAudioNode,\n    renderAutomation,\n    renderInputsOfAudioNode\n) => {\n    return <T extends IMinimalOfflineAudioContext | IOfflineAudioContext>() => {\n        const renderedNativeConstantSourceNodes = new WeakMap<TNativeOfflineAudioContext, TNativeConstantSourceNode>();\n\n        let start: null | number = null;\n        let stop: null | number = null;\n\n        const createConstantSourceNode = async (proxy: IConstantSourceNode<T>, nativeOfflineAudioContext: TNativeOfflineAudioContext) => {\n            let nativeConstantSourceNode = getNativeAudioNode<T, TNativeConstantSourceNode>(proxy);\n\n            /*\n             * If the initially used nativeConstantSourceNode was not constructed on the same OfflineAudioContext it needs to be created\n             * again.\n             */\n            const nativeConstantSourceNodeIsOwnedByContext = isOwnedByContext(nativeConstantSourceNode, nativeOfflineAudioContext);\n\n            if (!nativeConstantSourceNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeConstantSourceNode.channelCount,\n                    channelCountMode: nativeConstantSourceNode.channelCountMode,\n                    channelInterpretation: nativeConstantSourceNode.channelInterpretation,\n                    offset: nativeConstantSourceNode.offset.value\n                };\n\n                nativeConstantSourceNode = createNativeConstantSourceNode(nativeOfflineAudioContext, options);\n\n                if (start !== null) {\n                    nativeConstantSourceNode.start(start);\n                }\n\n                if (stop !== null) {\n                    nativeConstantSourceNode.stop(stop);\n                }\n            }\n\n            renderedNativeConstantSourceNodes.set(nativeOfflineAudioContext, nativeConstantSourceNode);\n\n            if (!nativeConstantSourceNodeIsOwnedByContext) {\n                await renderAutomation(nativeOfflineAudioContext, proxy.offset, nativeConstantSourceNode.offset);\n            } else {\n                await connectAudioParam(nativeOfflineAudioContext, proxy.offset, nativeConstantSourceNode.offset);\n            }\n\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeConstantSourceNode);\n\n            return nativeConstantSourceNode;\n        };\n\n        return {\n            set start(value: number) {\n                start = value;\n            },\n            set stop(value: number) {\n                stop = value;\n            },\n            render(\n                proxy: IConstantSourceNode<T>,\n                nativeOfflineAudioContext: TNativeOfflineAudioContext\n            ): Promise<TNativeConstantSourceNode> {\n                const renderedNativeConstantSourceNode = renderedNativeConstantSourceNodes.get(nativeOfflineAudioContext);\n\n                if (renderedNativeConstantSourceNode !== undefined) {\n                    return Promise.resolve(renderedNativeConstantSourceNode);\n                }\n\n                return createConstantSourceNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n"]},"metadata":{},"sourceType":"module"}