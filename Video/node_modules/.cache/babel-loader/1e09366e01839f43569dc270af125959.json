{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nexport var createAudioDestinationNodeRenderer = function createAudioDestinationNodeRenderer(renderInputsOfAudioNode) {\n  var renderedNativeAudioDestinationNodes = new WeakMap();\n\n  var createAudioDestinationNode = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(proxy, nativeOfflineAudioContext) {\n      var nativeAudioDestinationNode;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              nativeAudioDestinationNode = nativeOfflineAudioContext.destination;\n              renderedNativeAudioDestinationNodes.set(nativeOfflineAudioContext, nativeAudioDestinationNode);\n              _context.next = 4;\n              return renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioDestinationNode);\n\n            case 4:\n              return _context.abrupt(\"return\", nativeAudioDestinationNode);\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function createAudioDestinationNode(_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return {\n    render: function render(proxy, nativeOfflineAudioContext) {\n      var renderedNativeAudioDestinationNode = renderedNativeAudioDestinationNodes.get(nativeOfflineAudioContext);\n\n      if (renderedNativeAudioDestinationNode !== undefined) {\n        return Promise.resolve(renderedNativeAudioDestinationNode);\n      }\n\n      return createAudioDestinationNode(proxy, nativeOfflineAudioContext);\n    }\n  };\n};","map":{"version":3,"mappings":";;AAQA,OAAO,IAAMA,kCAAkC,GAAyC,SAA3EA,kCAA2E,CAGpFC,uBAHoF,EAIpF;EACA,IAAMC,mCAAmC,GAAG,IAAIC,OAAJ,EAA5C;;EAEA,IAAMC,0BAA0B;IAAA,sEAAG,iBAAOC,KAAP,EAAwCC,yBAAxC;MAAA;MAAA;QAAA;UAAA;YAAA;cACzBC,0BADyB,GACID,yBAAyB,CAACE,WAD9B;cAG/BN,mCAAmC,CAACO,GAApC,CAAwCH,yBAAxC,EAAmEC,0BAAnE;cAH+B;cAAA,OAKzBN,uBAAuB,CAACI,KAAD,EAAQC,yBAAR,EAAmCC,0BAAnC,CALE;;YAAA;cAAA,iCAOxBA,0BAPwB;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAAH;;IAAA,gBAA1BH,0BAA0B;MAAA;IAAA;EAAA,GAAhC;;EAUA,OAAO;IACHM,MADG,kBAECL,KAFD,EAGCC,yBAHD,EAGsD;MAErD,IAAMK,kCAAkC,GAAGT,mCAAmC,CAACU,GAApC,CAAwCN,yBAAxC,CAA3C;;MAEA,IAAIK,kCAAkC,KAAKE,SAA3C,EAAsD;QAClD,OAAOC,OAAO,CAACC,OAAR,CAAgBJ,kCAAhB,CAAP;MACH;;MAED,OAAOP,0BAA0B,CAACC,KAAD,EAAQC,yBAAR,CAAjC;IACH;EAZE,CAAP;AAcH,CA/BM","names":["createAudioDestinationNodeRenderer","renderInputsOfAudioNode","renderedNativeAudioDestinationNodes","WeakMap","createAudioDestinationNode","proxy","nativeOfflineAudioContext","nativeAudioDestinationNode","destination","set","render","renderedNativeAudioDestinationNode","get","undefined","Promise","resolve"],"sources":["C:\\Users\\brigh\\storage\\js_project\\Gakugeki_WEB\\node_modules\\standardized-audio-context\\src\\factories\\audio-destination-node-renderer-factory.ts"],"sourcesContent":["import { IAudioDestinationNode, IMinimalOfflineAudioContext, IOfflineAudioContext } from '../interfaces';\nimport {\n    TAudioDestinationNodeRendererFactory,\n    TNativeAudioDestinationNode,\n    TNativeOfflineAudioContext,\n    TRenderInputsOfAudioNodeFunction\n} from '../types';\n\nexport const createAudioDestinationNodeRenderer: TAudioDestinationNodeRendererFactory = <\n    T extends IMinimalOfflineAudioContext | IOfflineAudioContext\n>(\n    renderInputsOfAudioNode: TRenderInputsOfAudioNodeFunction\n) => {\n    const renderedNativeAudioDestinationNodes = new WeakMap<TNativeOfflineAudioContext, TNativeAudioDestinationNode>();\n\n    const createAudioDestinationNode = async (proxy: IAudioDestinationNode<T>, nativeOfflineAudioContext: TNativeOfflineAudioContext) => {\n        const nativeAudioDestinationNode = nativeOfflineAudioContext.destination;\n\n        renderedNativeAudioDestinationNodes.set(nativeOfflineAudioContext, nativeAudioDestinationNode);\n\n        await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioDestinationNode);\n\n        return nativeAudioDestinationNode;\n    };\n\n    return {\n        render(\n            proxy: IAudioDestinationNode<T>,\n            nativeOfflineAudioContext: TNativeOfflineAudioContext\n        ): Promise<TNativeAudioDestinationNode> {\n            const renderedNativeAudioDestinationNode = renderedNativeAudioDestinationNodes.get(nativeOfflineAudioContext);\n\n            if (renderedNativeAudioDestinationNode !== undefined) {\n                return Promise.resolve(renderedNativeAudioDestinationNode);\n            }\n\n            return createAudioDestinationNode(proxy, nativeOfflineAudioContext);\n        }\n    };\n};\n"]},"metadata":{},"sourceType":"module"}