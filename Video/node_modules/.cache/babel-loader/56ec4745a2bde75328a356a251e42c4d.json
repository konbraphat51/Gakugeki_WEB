{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { isNativeAudioNodeFaker } from '../guards/native-audio-node-faker';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport var createConvolverNodeRendererFactory = function createConvolverNodeRendererFactory(createNativeConvolverNode, getNativeAudioNode, renderInputsOfAudioNode) {\n  return function () {\n    var renderedNativeConvolverNodes = new WeakMap();\n\n    var createConvolverNode = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(proxy, nativeOfflineAudioContext) {\n        var nativeConvolverNode, nativeConvolverNodeIsOwnedByContext, options;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                nativeConvolverNode = getNativeAudioNode(proxy); // If the initially used nativeConvolverNode was not constructed on the same OfflineAudioContext it needs to be created again.\n\n                nativeConvolverNodeIsOwnedByContext = isOwnedByContext(nativeConvolverNode, nativeOfflineAudioContext);\n\n                if (!nativeConvolverNodeIsOwnedByContext) {\n                  options = {\n                    buffer: nativeConvolverNode.buffer,\n                    channelCount: nativeConvolverNode.channelCount,\n                    channelCountMode: nativeConvolverNode.channelCountMode,\n                    channelInterpretation: nativeConvolverNode.channelInterpretation,\n                    disableNormalization: !nativeConvolverNode.normalize\n                  };\n                  nativeConvolverNode = createNativeConvolverNode(nativeOfflineAudioContext, options);\n                }\n\n                renderedNativeConvolverNodes.set(nativeOfflineAudioContext, nativeConvolverNode);\n\n                if (!isNativeAudioNodeFaker(nativeConvolverNode)) {\n                  _context.next = 9;\n                  break;\n                }\n\n                _context.next = 7;\n                return renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeConvolverNode.inputs[0]);\n\n              case 7:\n                _context.next = 11;\n                break;\n\n              case 9:\n                _context.next = 11;\n                return renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeConvolverNode);\n\n              case 11:\n                return _context.abrupt(\"return\", nativeConvolverNode);\n\n              case 12:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function createConvolverNode(_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    return {\n      render: function render(proxy, nativeOfflineAudioContext) {\n        var renderedNativeConvolverNode = renderedNativeConvolverNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeConvolverNode !== undefined) {\n          return Promise.resolve(renderedNativeConvolverNode);\n        }\n\n        return createConvolverNode(proxy, nativeOfflineAudioContext);\n      }\n    };\n  };\n};","map":{"version":3,"mappings":";;AAAA,SAASA,sBAAT,QAAuC,mCAAvC;AACA,SAASC,gBAAT,QAAiC,gCAAjC;AAIA,OAAO,IAAMC,kCAAkC,GAAyC,SAA3EA,kCAA2E,CACpFC,yBADoF,EAEpFC,kBAFoF,EAGpFC,uBAHoF,EAIpF;EACA,OAAO,YAAmE;IACtE,IAAMC,4BAA4B,GAAG,IAAIC,OAAJ,EAArC;;IAEA,IAAMC,mBAAmB;MAAA,sEAAG,iBAAOC,KAAP,EAAiCC,yBAAjC;QAAA;QAAA;UAAA;YAAA;cAAA;gBACpBC,mBADoB,GACEP,kBAAkB,CAA0BK,KAA1B,CADpB,EAGxB;;gBACMG,mCAJkB,GAIoBX,gBAAgB,CAACU,mBAAD,EAAsBD,yBAAtB,CAJpC;;gBAMxB,IAAI,CAACE,mCAAL,EAA0C;kBAChCC,OADgC,GACtB;oBACZC,MAAM,EAAEH,mBAAmB,CAACG,MADhB;oBAEZC,YAAY,EAAEJ,mBAAmB,CAACI,YAFtB;oBAGZC,gBAAgB,EAAEL,mBAAmB,CAACK,gBAH1B;oBAIZC,qBAAqB,EAAEN,mBAAmB,CAACM,qBAJ/B;oBAKZC,oBAAoB,EAAE,CAACP,mBAAmB,CAACQ;kBAL/B,CADsB;kBAStCR,mBAAmB,GAAGR,yBAAyB,CAACO,yBAAD,EAA4BG,OAA5B,CAA/C;gBACH;;gBAEDP,4BAA4B,CAACc,GAA7B,CAAiCV,yBAAjC,EAA4DC,mBAA5D;;gBAlBwB,KAoBpBX,sBAAsB,CAACW,mBAAD,CApBF;kBAAA;kBAAA;gBAAA;;gBAAA;gBAAA,OAqBdN,uBAAuB,CAACI,KAAD,EAAQC,yBAAR,EAAmCC,mBAAmB,CAACU,MAApB,CAA2B,CAA3B,CAAnC,CArBT;;cAAA;gBAAA;gBAAA;;cAAA;gBAAA;gBAAA,OAuBdhB,uBAAuB,CAACI,KAAD,EAAQC,yBAAR,EAAmCC,mBAAnC,CAvBT;;cAAA;gBAAA,iCA0BjBA,mBA1BiB;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CAAH;;MAAA,gBAAnBH,mBAAmB;QAAA;MAAA;IAAA,GAAzB;;IA6BA,OAAO;MACHc,MADG,kBACIb,KADJ,EAC8BC,yBAD9B,EACmF;QAClF,IAAMa,2BAA2B,GAAGjB,4BAA4B,CAACkB,GAA7B,CAAiCd,yBAAjC,CAApC;;QAEA,IAAIa,2BAA2B,KAAKE,SAApC,EAA+C;UAC3C,OAAOC,OAAO,CAACC,OAAR,CAAgBJ,2BAAhB,CAAP;QACH;;QAED,OAAOf,mBAAmB,CAACC,KAAD,EAAQC,yBAAR,CAA1B;MACH;IATE,CAAP;EAWH,CA3CD;AA4CH,CAjDM","names":["isNativeAudioNodeFaker","isOwnedByContext","createConvolverNodeRendererFactory","createNativeConvolverNode","getNativeAudioNode","renderInputsOfAudioNode","renderedNativeConvolverNodes","WeakMap","createConvolverNode","proxy","nativeOfflineAudioContext","nativeConvolverNode","nativeConvolverNodeIsOwnedByContext","options","buffer","channelCount","channelCountMode","channelInterpretation","disableNormalization","normalize","set","inputs","render","renderedNativeConvolverNode","get","undefined","Promise","resolve"],"sources":["C:\\Users\\brigh\\storage\\js_project\\Gakugeki_WEB\\node_modules\\standardized-audio-context\\src\\factories\\convolver-node-renderer-factory.ts"],"sourcesContent":["import { isNativeAudioNodeFaker } from '../guards/native-audio-node-faker';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { IConvolverNode, IMinimalOfflineAudioContext, IOfflineAudioContext } from '../interfaces';\nimport { TConvolverNodeRendererFactoryFactory, TNativeConvolverNode, TNativeOfflineAudioContext } from '../types';\n\nexport const createConvolverNodeRendererFactory: TConvolverNodeRendererFactoryFactory = (\n    createNativeConvolverNode,\n    getNativeAudioNode,\n    renderInputsOfAudioNode\n) => {\n    return <T extends IMinimalOfflineAudioContext | IOfflineAudioContext>() => {\n        const renderedNativeConvolverNodes = new WeakMap<TNativeOfflineAudioContext, TNativeConvolverNode>();\n\n        const createConvolverNode = async (proxy: IConvolverNode<T>, nativeOfflineAudioContext: TNativeOfflineAudioContext) => {\n            let nativeConvolverNode = getNativeAudioNode<T, TNativeConvolverNode>(proxy);\n\n            // If the initially used nativeConvolverNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeConvolverNodeIsOwnedByContext = isOwnedByContext(nativeConvolverNode, nativeOfflineAudioContext);\n\n            if (!nativeConvolverNodeIsOwnedByContext) {\n                const options = {\n                    buffer: nativeConvolverNode.buffer,\n                    channelCount: nativeConvolverNode.channelCount,\n                    channelCountMode: nativeConvolverNode.channelCountMode,\n                    channelInterpretation: nativeConvolverNode.channelInterpretation,\n                    disableNormalization: !nativeConvolverNode.normalize\n                };\n\n                nativeConvolverNode = createNativeConvolverNode(nativeOfflineAudioContext, options);\n            }\n\n            renderedNativeConvolverNodes.set(nativeOfflineAudioContext, nativeConvolverNode);\n\n            if (isNativeAudioNodeFaker(nativeConvolverNode)) {\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeConvolverNode.inputs[0]);\n            } else {\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeConvolverNode);\n            }\n\n            return nativeConvolverNode;\n        };\n\n        return {\n            render(proxy: IConvolverNode<T>, nativeOfflineAudioContext: TNativeOfflineAudioContext): Promise<TNativeConvolverNode> {\n                const renderedNativeConvolverNode = renderedNativeConvolverNodes.get(nativeOfflineAudioContext);\n\n                if (renderedNativeConvolverNode !== undefined) {\n                    return Promise.resolve(renderedNativeConvolverNode);\n                }\n\n                return createConvolverNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n"]},"metadata":{},"sourceType":"module"}