{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { detachArrayBuffer } from '../helpers/detach-array-buffer';\nimport { wrapAudioBufferGetChannelDataMethod } from '../helpers/wrap-audio-buffer-get-channel-data-method';\nexport var createDecodeAudioData = function createDecodeAudioData(audioBufferStore, cacheTestResult, createDataCloneError, createEncodingError, detachedArrayBuffers, getNativeContext, isNativeContext, testAudioBufferCopyChannelMethodsOutOfBoundsSupport, testPromiseSupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds) {\n  return function (anyContext, audioData) {\n    var nativeContext = isNativeContext(anyContext) ? anyContext : getNativeContext(anyContext); // Bug #43: Only Chrome and Edge do throw a DataCloneError.\n\n    if (detachedArrayBuffers.has(audioData)) {\n      var err = createDataCloneError();\n      return Promise.reject(err);\n    } // The audioData parameter maybe of a type which can't be added to a WeakSet.\n\n\n    try {\n      detachedArrayBuffers.add(audioData);\n    } catch (_unused) {// Ignore errors.\n    } // Bug #21: Safari does not support promises yet.\n\n\n    if (cacheTestResult(testPromiseSupport, function () {\n      return testPromiseSupport(nativeContext);\n    })) {\n      return nativeContext.decodeAudioData(audioData).then(function (audioBuffer) {\n        // Bug #133: Safari does neuter the ArrayBuffer.\n        detachArrayBuffer(audioData).catch(function () {// Ignore errors.\n        }); // Bug #157: Firefox does not allow the bufferOffset to be out-of-bounds.\n\n        if (!cacheTestResult(testAudioBufferCopyChannelMethodsOutOfBoundsSupport, function () {\n          return testAudioBufferCopyChannelMethodsOutOfBoundsSupport(audioBuffer);\n        })) {\n          wrapAudioBufferCopyChannelMethodsOutOfBounds(audioBuffer);\n        }\n\n        audioBufferStore.add(audioBuffer);\n        return audioBuffer;\n      });\n    } // Bug #21: Safari does not return a Promise yet.\n\n\n    return new Promise(function (resolve, reject) {\n      var complete = /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n          return _regeneratorRuntime().wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  _context.prev = 0;\n                  _context.next = 3;\n                  return detachArrayBuffer(audioData);\n\n                case 3:\n                  _context.next = 7;\n                  break;\n\n                case 5:\n                  _context.prev = 5;\n                  _context.t0 = _context[\"catch\"](0);\n\n                case 7:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee, null, [[0, 5]]);\n        }));\n\n        return function complete() {\n          return _ref.apply(this, arguments);\n        };\n      }();\n\n      var fail = function fail(err) {\n        reject(err);\n        complete();\n      }; // Bug #26: Safari throws a synchronous error.\n\n\n      try {\n        // Bug #1: Safari requires a successCallback.\n        nativeContext.decodeAudioData(audioData, function (audioBuffer) {\n          // Bug #5: Safari does not support copyFromChannel() and copyToChannel().\n          // Bug #100: Safari does throw a wrong error when calling getChannelData() with an out-of-bounds value.\n          if (typeof audioBuffer.copyFromChannel !== 'function') {\n            wrapAudioBufferCopyChannelMethods(audioBuffer);\n            wrapAudioBufferGetChannelDataMethod(audioBuffer);\n          }\n\n          audioBufferStore.add(audioBuffer);\n          complete().then(function () {\n            return resolve(audioBuffer);\n          });\n        }, function (err) {\n          // Bug #4: Safari returns null instead of an error.\n          if (err === null) {\n            fail(createEncodingError());\n          } else {\n            fail(err);\n          }\n        });\n      } catch (err) {\n        fail(err);\n      }\n    });\n  };\n};","map":{"version":3,"mappings":"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","names":["detachArrayBuffer","wrapAudioBufferGetChannelDataMethod","createDecodeAudioData","audioBufferStore","cacheTestResult","createDataCloneError","createEncodingError","detachedArrayBuffers","getNativeContext","isNativeContext","testAudioBufferCopyChannelMethodsOutOfBoundsSupport","testPromiseSupport","wrapAudioBufferCopyChannelMethods","wrapAudioBufferCopyChannelMethodsOutOfBounds","anyContext","audioData","nativeContext","has","err","Promise","reject","add","decodeAudioData","then","audioBuffer","catch","resolve","complete","fail","copyFromChannel"],"sources":["C:\\Users\\brigh\\storage\\js_project\\Gakugeki_WEB\\node_modules\\standardized-audio-context\\src\\factories\\decode-audio-data.ts"],"sourcesContent":["import { detachArrayBuffer } from '../helpers/detach-array-buffer';\nimport { wrapAudioBufferGetChannelDataMethod } from '../helpers/wrap-audio-buffer-get-channel-data-method';\nimport { TDecodeAudioDataFactory } from '../types';\n\nexport const createDecodeAudioData: TDecodeAudioDataFactory = (\n    audioBufferStore,\n    cacheTestResult,\n    createDataCloneError,\n    createEncodingError,\n    detachedArrayBuffers,\n    getNativeContext,\n    isNativeContext,\n    testAudioBufferCopyChannelMethodsOutOfBoundsSupport,\n    testPromiseSupport,\n    wrapAudioBufferCopyChannelMethods,\n    wrapAudioBufferCopyChannelMethodsOutOfBounds\n) => {\n    return (anyContext, audioData) => {\n        const nativeContext = isNativeContext(anyContext) ? anyContext : getNativeContext(anyContext);\n\n        // Bug #43: Only Chrome and Edge do throw a DataCloneError.\n        if (detachedArrayBuffers.has(audioData)) {\n            const err = createDataCloneError();\n\n            return Promise.reject(err);\n        }\n\n        // The audioData parameter maybe of a type which can't be added to a WeakSet.\n        try {\n            detachedArrayBuffers.add(audioData);\n        } catch {\n            // Ignore errors.\n        }\n\n        // Bug #21: Safari does not support promises yet.\n        if (cacheTestResult(testPromiseSupport, () => testPromiseSupport(nativeContext))) {\n            return nativeContext.decodeAudioData(audioData).then((audioBuffer) => {\n                // Bug #133: Safari does neuter the ArrayBuffer.\n                detachArrayBuffer(audioData).catch(() => {\n                    // Ignore errors.\n                });\n\n                // Bug #157: Firefox does not allow the bufferOffset to be out-of-bounds.\n                if (\n                    !cacheTestResult(testAudioBufferCopyChannelMethodsOutOfBoundsSupport, () =>\n                        testAudioBufferCopyChannelMethodsOutOfBoundsSupport(audioBuffer)\n                    )\n                ) {\n                    wrapAudioBufferCopyChannelMethodsOutOfBounds(audioBuffer);\n                }\n\n                audioBufferStore.add(audioBuffer);\n\n                return audioBuffer;\n            });\n        }\n\n        // Bug #21: Safari does not return a Promise yet.\n        return new Promise((resolve, reject) => {\n            const complete = async () => {\n                // Bug #133: Safari does neuter the ArrayBuffer.\n                try {\n                    await detachArrayBuffer(audioData);\n                } catch {\n                    // Ignore errors.\n                }\n            };\n\n            const fail = (err: DOMException | Error) => {\n                reject(err);\n                complete();\n            };\n\n            // Bug #26: Safari throws a synchronous error.\n            try {\n                // Bug #1: Safari requires a successCallback.\n                nativeContext.decodeAudioData(\n                    audioData,\n                    (audioBuffer) => {\n                        // Bug #5: Safari does not support copyFromChannel() and copyToChannel().\n                        // Bug #100: Safari does throw a wrong error when calling getChannelData() with an out-of-bounds value.\n                        if (typeof audioBuffer.copyFromChannel !== 'function') {\n                            wrapAudioBufferCopyChannelMethods(audioBuffer);\n                            wrapAudioBufferGetChannelDataMethod(audioBuffer);\n                        }\n\n                        audioBufferStore.add(audioBuffer);\n\n                        complete().then(() => resolve(audioBuffer));\n                    },\n                    (err: DOMException | Error) => {\n                        // Bug #4: Safari returns null instead of an error.\n                        if (err === null) {\n                            fail(createEncodingError());\n                        } else {\n                            fail(err);\n                        }\n                    }\n                );\n            } catch (err) {\n                fail(err);\n            }\n        });\n    };\n};\n"]},"metadata":{},"sourceType":"module"}