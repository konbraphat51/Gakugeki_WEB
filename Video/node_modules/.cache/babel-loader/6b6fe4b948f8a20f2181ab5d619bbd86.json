{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { isAudioNodeOutputConnection } from '../guards/audio-node-output-connection';\nexport var createIncrementCycleCounterFactory = function createIncrementCycleCounterFactory(cycleCounters, disconnectNativeAudioNodeFromNativeAudioNode, getAudioNodeConnections, getNativeAudioNode, getNativeAudioParam, isActiveAudioNode) {\n  return function (isOffline) {\n    return function (audioNode, count) {\n      var cycleCounter = cycleCounters.get(audioNode);\n\n      if (cycleCounter === undefined) {\n        if (!isOffline && isActiveAudioNode(audioNode)) {\n          var nativeSourceAudioNode = getNativeAudioNode(audioNode);\n\n          var _getAudioNodeConnecti = getAudioNodeConnections(audioNode),\n              outputs = _getAudioNodeConnecti.outputs;\n\n          var _iterator = _createForOfIteratorHelper(outputs),\n              _step;\n\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var output = _step.value;\n\n              if (isAudioNodeOutputConnection(output)) {\n                var nativeDestinationAudioNode = getNativeAudioNode(output[0]);\n                disconnectNativeAudioNodeFromNativeAudioNode(nativeSourceAudioNode, nativeDestinationAudioNode, output[1], output[2]);\n              } else {\n                var nativeDestinationAudioParam = getNativeAudioParam(output[0]);\n                nativeSourceAudioNode.disconnect(nativeDestinationAudioParam, output[1]);\n              }\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n        }\n\n        cycleCounters.set(audioNode, count);\n      } else {\n        cycleCounters.set(audioNode, cycleCounter + count);\n      }\n    };\n  };\n};","map":{"version":3,"mappings":";AAAA,SAASA,2BAAT,QAA4C,wCAA5C;AAGA,OAAO,IAAMC,kCAAkC,GAAyC,SAA3EA,kCAA2E,CACpFC,aADoF,EAEpFC,4CAFoF,EAGpFC,uBAHoF,EAIpFC,kBAJoF,EAKpFC,mBALoF,EAMpFC,iBANoF,EAOpF;EACA,OAAO,UAACC,SAAD,EAAc;IACjB,OAAO,UAACC,SAAD,EAAYC,KAAZ,EAAqB;MACxB,IAAMC,YAAY,GAAGT,aAAa,CAACU,GAAd,CAAkBH,SAAlB,CAArB;;MAEA,IAAIE,YAAY,KAAKE,SAArB,EAAgC;QAC5B,IAAI,CAACL,SAAD,IAAcD,iBAAiB,CAACE,SAAD,CAAnC,EAAgD;UAC5C,IAAMK,qBAAqB,GAAGT,kBAAkB,CAACI,SAAD,CAAhD;;UACA,4BAAoBL,uBAAuB,CAACK,SAAD,CAA3C;UAAA,IAAQM,OAAR,yBAAQA,OAAR;;UAF4C,2CAIvBA,OAJuB;UAAA;;UAAA;YAI5C,oDAA8B;cAAA,IAAnBC,MAAmB;;cAC1B,IAAIhB,2BAA2B,CAACgB,MAAD,CAA/B,EAAyC;gBACrC,IAAMC,0BAA0B,GAAGZ,kBAAkB,CAACW,MAAM,CAAC,CAAD,CAAP,CAArD;gBAEAb,4CAA4C,CACxCW,qBADwC,EAExCG,0BAFwC,EAGxCD,MAAM,CAAC,CAAD,CAHkC,EAIxCA,MAAM,CAAC,CAAD,CAJkC,CAA5C;cAMH,CATD,MASO;gBACH,IAAME,2BAA2B,GAAGZ,mBAAmB,CAACU,MAAM,CAAC,CAAD,CAAP,CAAvD;gBAEAF,qBAAqB,CAACK,UAAtB,CAAiCD,2BAAjC,EAA8DF,MAAM,CAAC,CAAD,CAApE;cACH;YACJ;UAnB2C;YAAA;UAAA;YAAA;UAAA;QAoB/C;;QAEDd,aAAa,CAACkB,GAAd,CAAkBX,SAAlB,EAA6BC,KAA7B;MACH,CAxBD,MAwBO;QACHR,aAAa,CAACkB,GAAd,CAAkBX,SAAlB,EAA6BE,YAAY,GAAGD,KAA5C;MACH;IACJ,CA9BD;EA+BH,CAhCD;AAiCH,CAzCM","names":["isAudioNodeOutputConnection","createIncrementCycleCounterFactory","cycleCounters","disconnectNativeAudioNodeFromNativeAudioNode","getAudioNodeConnections","getNativeAudioNode","getNativeAudioParam","isActiveAudioNode","isOffline","audioNode","count","cycleCounter","get","undefined","nativeSourceAudioNode","outputs","output","nativeDestinationAudioNode","nativeDestinationAudioParam","disconnect","set"],"sources":["C:\\Users\\brigh\\storage\\js_project\\Gakugeki_WEB\\node_modules\\standardized-audio-context\\src\\factories\\increment-cycle-counter-factory.ts"],"sourcesContent":["import { isAudioNodeOutputConnection } from '../guards/audio-node-output-connection';\nimport { TIncrementCycleCounterFactoryFactory } from '../types';\n\nexport const createIncrementCycleCounterFactory: TIncrementCycleCounterFactoryFactory = (\n    cycleCounters,\n    disconnectNativeAudioNodeFromNativeAudioNode,\n    getAudioNodeConnections,\n    getNativeAudioNode,\n    getNativeAudioParam,\n    isActiveAudioNode\n) => {\n    return (isOffline) => {\n        return (audioNode, count) => {\n            const cycleCounter = cycleCounters.get(audioNode);\n\n            if (cycleCounter === undefined) {\n                if (!isOffline && isActiveAudioNode(audioNode)) {\n                    const nativeSourceAudioNode = getNativeAudioNode(audioNode);\n                    const { outputs } = getAudioNodeConnections(audioNode);\n\n                    for (const output of outputs) {\n                        if (isAudioNodeOutputConnection(output)) {\n                            const nativeDestinationAudioNode = getNativeAudioNode(output[0]);\n\n                            disconnectNativeAudioNodeFromNativeAudioNode(\n                                nativeSourceAudioNode,\n                                nativeDestinationAudioNode,\n                                output[1],\n                                output[2]\n                            );\n                        } else {\n                            const nativeDestinationAudioParam = getNativeAudioParam(output[0]);\n\n                            nativeSourceAudioNode.disconnect(nativeDestinationAudioParam, output[1]);\n                        }\n                    }\n                }\n\n                cycleCounters.set(audioNode, count);\n            } else {\n                cycleCounters.set(audioNode, cycleCounter + count);\n            }\n        };\n    };\n};\n"]},"metadata":{},"sourceType":"module"}