{"ast":null,"code":"import _slicedToArray from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createForOfIteratorHelper from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _regeneratorRuntime from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _defineProperty from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _objectSpread from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _asyncToGenerator from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { copyFromChannel } from '../helpers/copy-from-channel';\nimport { copyToChannel } from '../helpers/copy-to-channel';\nimport { createNestedArrays } from '../helpers/create-nested-arrays';\nimport { getAudioNodeConnections } from '../helpers/get-audio-node-connections';\nimport { getAudioWorkletProcessor } from '../helpers/get-audio-worklet-processor';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\n\nvar processBuffer = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(proxy, renderedBuffer, nativeOfflineAudioContext, options, outputChannelCount, processorConstructor, exposeCurrentFrameAndCurrentTime) {\n    var length, numberOfInputChannels, numberOfOutputChannels, processedBuffer, audioNodeConnections, audioWorkletProcessor, inputs, outputs, parameters, _loop, i, _ret;\n\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            // Ceil the length to the next full render quantum.\n            // Bug #17: Safari does not yet expose the length.\n            length = renderedBuffer === null ? Math.ceil(proxy.context.length / 128) * 128 : renderedBuffer.length;\n            numberOfInputChannels = options.channelCount * options.numberOfInputs;\n            numberOfOutputChannels = outputChannelCount.reduce(function (sum, value) {\n              return sum + value;\n            }, 0);\n            processedBuffer = numberOfOutputChannels === 0 ? null : nativeOfflineAudioContext.createBuffer(numberOfOutputChannels, length, nativeOfflineAudioContext.sampleRate);\n\n            if (!(processorConstructor === undefined)) {\n              _context.next = 6;\n              break;\n            }\n\n            throw new Error('Missing the processor constructor.');\n\n          case 6:\n            audioNodeConnections = getAudioNodeConnections(proxy);\n            _context.next = 9;\n            return getAudioWorkletProcessor(nativeOfflineAudioContext, proxy);\n\n          case 9:\n            audioWorkletProcessor = _context.sent;\n            inputs = createNestedArrays(options.numberOfInputs, options.channelCount);\n            outputs = createNestedArrays(options.numberOfOutputs, outputChannelCount);\n            parameters = Array.from(proxy.parameters.keys()).reduce(function (prmtrs, name) {\n              return _objectSpread(_objectSpread({}, prmtrs), {}, _defineProperty({}, name, new Float32Array(128)));\n            }, {});\n\n            _loop = function _loop(i) {\n              if (options.numberOfInputs > 0 && renderedBuffer !== null) {\n                for (var j = 0; j < options.numberOfInputs; j += 1) {\n                  for (var k = 0; k < options.channelCount; k += 1) {\n                    copyFromChannel(renderedBuffer, inputs[j], k, k, i);\n                  }\n                }\n              }\n\n              if (processorConstructor.parameterDescriptors !== undefined && renderedBuffer !== null) {\n                processorConstructor.parameterDescriptors.forEach(function (_ref2, index) {\n                  var name = _ref2.name;\n                  copyFromChannel(renderedBuffer, parameters, name, numberOfInputChannels + index, i);\n                });\n              }\n\n              for (var _j = 0; _j < options.numberOfInputs; _j += 1) {\n                for (var _k = 0; _k < outputChannelCount[_j]; _k += 1) {\n                  // The byteLength will be 0 when the ArrayBuffer was transferred.\n                  if (outputs[_j][_k].byteLength === 0) {\n                    outputs[_j][_k] = new Float32Array(128);\n                  }\n                }\n              }\n\n              try {\n                var potentiallyEmptyInputs = inputs.map(function (input, index) {\n                  if (audioNodeConnections.activeInputs[index].size === 0) {\n                    return [];\n                  }\n\n                  return input;\n                });\n                var activeSourceFlag = exposeCurrentFrameAndCurrentTime(i / nativeOfflineAudioContext.sampleRate, nativeOfflineAudioContext.sampleRate, function () {\n                  return audioWorkletProcessor.process(potentiallyEmptyInputs, outputs, parameters);\n                });\n\n                if (processedBuffer !== null) {\n                  for (var _j2 = 0, outputChannelSplitterNodeOutput = 0; _j2 < options.numberOfOutputs; _j2 += 1) {\n                    for (var _k2 = 0; _k2 < outputChannelCount[_j2]; _k2 += 1) {\n                      copyToChannel(processedBuffer, outputs[_j2], _k2, outputChannelSplitterNodeOutput + _k2, i);\n                    }\n\n                    outputChannelSplitterNodeOutput += outputChannelCount[_j2];\n                  }\n                }\n\n                if (!activeSourceFlag) {\n                  return \"break\";\n                }\n              } catch (error) {\n                proxy.dispatchEvent(new ErrorEvent('processorerror', {\n                  colno: error.colno,\n                  filename: error.filename,\n                  lineno: error.lineno,\n                  message: error.message\n                }));\n                return \"break\";\n              }\n            };\n\n            i = 0;\n\n          case 15:\n            if (!(i < length)) {\n              _context.next = 22;\n              break;\n            }\n\n            _ret = _loop(i);\n\n            if (!(_ret === \"break\")) {\n              _context.next = 19;\n              break;\n            }\n\n            return _context.abrupt(\"break\", 22);\n\n          case 19:\n            i += 128;\n            _context.next = 15;\n            break;\n\n          case 22:\n            return _context.abrupt(\"return\", processedBuffer);\n\n          case 23:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function processBuffer(_x, _x2, _x3, _x4, _x5, _x6, _x7) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexport var createAudioWorkletNodeRendererFactory = function createAudioWorkletNodeRendererFactory(connectAudioParam, connectMultipleOutputs, createNativeAudioBufferSourceNode, createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeConstantSourceNode, createNativeGainNode, deleteUnrenderedAudioWorkletNode, disconnectMultipleOutputs, exposeCurrentFrameAndCurrentTime, getNativeAudioNode, nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor, renderAutomation, renderInputsOfAudioNode, renderNativeOfflineAudioContext) {\n  return function (name, options, processorConstructor) {\n    var renderedNativeAudioNodes = new WeakMap();\n    var processedBufferPromise = null;\n\n    var createAudioNode = /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(proxy, nativeOfflineAudioContext) {\n        var nativeAudioWorkletNode, nativeOutputNodes, nativeAudioWorkletNodeIsOwnedByContext, outputChannelCount, numberOfOutputChannels, outputChannelSplitterNode, outputChannelMergerNodes, i, outputGainNode, _numberOfInputChannels, numberOfParameters, numberOfChannels, renderBuffer, _processedBuffer, audioBufferSourceNode, _nativeOutputNodes, _nativeOutputNodes2, _outputChannelSplitterNode, _outputChannelMergerNodes, _outputGainNode, _i3, outputChannelSplitterNodeOutput, outputChannelMergerNode, j, _iterator2, _step2, _step2$value, nm, audioParam, _iterator3, _step3, _step3$value, _nm, _audioParam;\n\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                nativeAudioWorkletNode = getNativeAudioNode(proxy);\n                nativeOutputNodes = null;\n                nativeAudioWorkletNodeIsOwnedByContext = isOwnedByContext(nativeAudioWorkletNode, nativeOfflineAudioContext);\n                outputChannelCount = Array.isArray(options.outputChannelCount) ? options.outputChannelCount : Array.from(options.outputChannelCount); // Bug #61: Only Chrome, Edge & Firefox have an implementation of the AudioWorkletNode yet.\n\n                if (nativeAudioWorkletNodeConstructor === null) {\n                  numberOfOutputChannels = outputChannelCount.reduce(function (sum, value) {\n                    return sum + value;\n                  }, 0);\n                  outputChannelSplitterNode = createNativeChannelSplitterNode(nativeOfflineAudioContext, {\n                    channelCount: Math.max(1, numberOfOutputChannels),\n                    channelCountMode: 'explicit',\n                    channelInterpretation: 'discrete',\n                    numberOfOutputs: Math.max(1, numberOfOutputChannels)\n                  });\n                  outputChannelMergerNodes = [];\n\n                  for (i = 0; i < proxy.numberOfOutputs; i += 1) {\n                    outputChannelMergerNodes.push(createNativeChannelMergerNode(nativeOfflineAudioContext, {\n                      channelCount: 1,\n                      channelCountMode: 'explicit',\n                      channelInterpretation: 'speakers',\n                      numberOfInputs: outputChannelCount[i]\n                    }));\n                  }\n\n                  outputGainNode = createNativeGainNode(nativeOfflineAudioContext, {\n                    channelCount: options.channelCount,\n                    channelCountMode: options.channelCountMode,\n                    channelInterpretation: options.channelInterpretation,\n                    gain: 1\n                  });\n                  outputGainNode.connect = connectMultipleOutputs.bind(null, outputChannelMergerNodes);\n                  outputGainNode.disconnect = disconnectMultipleOutputs.bind(null, outputChannelMergerNodes);\n                  nativeOutputNodes = [outputChannelSplitterNode, outputChannelMergerNodes, outputGainNode];\n                } else if (!nativeAudioWorkletNodeIsOwnedByContext) {\n                  nativeAudioWorkletNode = new nativeAudioWorkletNodeConstructor(nativeOfflineAudioContext, name);\n                }\n\n                renderedNativeAudioNodes.set(nativeOfflineAudioContext, nativeOutputNodes === null ? nativeAudioWorkletNode : nativeOutputNodes[2]);\n\n                if (!(nativeOutputNodes !== null)) {\n                  _context4.next = 41;\n                  break;\n                }\n\n                if (!(processedBufferPromise === null)) {\n                  _context4.next = 32;\n                  break;\n                }\n\n                if (!(processorConstructor === undefined)) {\n                  _context4.next = 10;\n                  break;\n                }\n\n                throw new Error('Missing the processor constructor.');\n\n              case 10:\n                if (!(nativeOfflineAudioContextConstructor === null)) {\n                  _context4.next = 12;\n                  break;\n                }\n\n                throw new Error('Missing the native OfflineAudioContext constructor.');\n\n              case 12:\n                // Bug #47: The AudioDestinationNode in Safari gets not initialized correctly.\n                _numberOfInputChannels = proxy.channelCount * proxy.numberOfInputs;\n                numberOfParameters = processorConstructor.parameterDescriptors === undefined ? 0 : processorConstructor.parameterDescriptors.length;\n                numberOfChannels = _numberOfInputChannels + numberOfParameters;\n\n                renderBuffer = /*#__PURE__*/function () {\n                  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n                    var partialOfflineAudioContext, gainNodes, inputChannelSplitterNodes, _i, constantSourceNodes, inputChannelMergerNode, _i2, j, _iterator, _step, _step$value, index, constantSourceNode;\n\n                    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n                      while (1) {\n                        switch (_context3.prev = _context3.next) {\n                          case 0:\n                            partialOfflineAudioContext = new nativeOfflineAudioContextConstructor(numberOfChannels, // Ceil the length to the next full render quantum.\n                            // Bug #17: Safari does not yet expose the length.\n                            Math.ceil(proxy.context.length / 128) * 128, nativeOfflineAudioContext.sampleRate);\n                            gainNodes = [];\n                            inputChannelSplitterNodes = [];\n\n                            for (_i = 0; _i < options.numberOfInputs; _i += 1) {\n                              gainNodes.push(createNativeGainNode(partialOfflineAudioContext, {\n                                channelCount: options.channelCount,\n                                channelCountMode: options.channelCountMode,\n                                channelInterpretation: options.channelInterpretation,\n                                gain: 1\n                              }));\n                              inputChannelSplitterNodes.push(createNativeChannelSplitterNode(partialOfflineAudioContext, {\n                                channelCount: options.channelCount,\n                                channelCountMode: 'explicit',\n                                channelInterpretation: 'discrete',\n                                numberOfOutputs: options.channelCount\n                              }));\n                            }\n\n                            _context3.next = 6;\n                            return Promise.all(Array.from(proxy.parameters.values()).map( /*#__PURE__*/function () {\n                              var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(audioParam) {\n                                var constantSourceNode;\n                                return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n                                  while (1) {\n                                    switch (_context2.prev = _context2.next) {\n                                      case 0:\n                                        constantSourceNode = createNativeConstantSourceNode(partialOfflineAudioContext, {\n                                          channelCount: 1,\n                                          channelCountMode: 'explicit',\n                                          channelInterpretation: 'discrete',\n                                          offset: audioParam.value\n                                        });\n                                        _context2.next = 3;\n                                        return renderAutomation(partialOfflineAudioContext, audioParam, constantSourceNode.offset);\n\n                                      case 3:\n                                        return _context2.abrupt(\"return\", constantSourceNode);\n\n                                      case 4:\n                                      case \"end\":\n                                        return _context2.stop();\n                                    }\n                                  }\n                                }, _callee2);\n                              }));\n\n                              return function (_x10) {\n                                return _ref5.apply(this, arguments);\n                              };\n                            }()));\n\n                          case 6:\n                            constantSourceNodes = _context3.sent;\n                            inputChannelMergerNode = createNativeChannelMergerNode(partialOfflineAudioContext, {\n                              channelCount: 1,\n                              channelCountMode: 'explicit',\n                              channelInterpretation: 'speakers',\n                              numberOfInputs: Math.max(1, _numberOfInputChannels + numberOfParameters)\n                            });\n\n                            for (_i2 = 0; _i2 < options.numberOfInputs; _i2 += 1) {\n                              gainNodes[_i2].connect(inputChannelSplitterNodes[_i2]);\n\n                              for (j = 0; j < options.channelCount; j += 1) {\n                                inputChannelSplitterNodes[_i2].connect(inputChannelMergerNode, j, _i2 * options.channelCount + j);\n                              }\n                            }\n\n                            _iterator = _createForOfIteratorHelper(constantSourceNodes.entries());\n\n                            try {\n                              for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                                _step$value = _slicedToArray(_step.value, 2), index = _step$value[0], constantSourceNode = _step$value[1];\n                                constantSourceNode.connect(inputChannelMergerNode, 0, _numberOfInputChannels + index);\n                                constantSourceNode.start(0);\n                              }\n                            } catch (err) {\n                              _iterator.e(err);\n                            } finally {\n                              _iterator.f();\n                            }\n\n                            inputChannelMergerNode.connect(partialOfflineAudioContext.destination);\n                            _context3.next = 14;\n                            return Promise.all(gainNodes.map(function (gainNode) {\n                              return renderInputsOfAudioNode(proxy, partialOfflineAudioContext, gainNode);\n                            }));\n\n                          case 14:\n                            return _context3.abrupt(\"return\", renderNativeOfflineAudioContext(partialOfflineAudioContext));\n\n                          case 15:\n                          case \"end\":\n                            return _context3.stop();\n                        }\n                      }\n                    }, _callee3);\n                  }));\n\n                  return function renderBuffer() {\n                    return _ref4.apply(this, arguments);\n                  };\n                }();\n\n                _context4.t0 = processBuffer;\n                _context4.t1 = proxy;\n\n                if (!(numberOfChannels === 0)) {\n                  _context4.next = 22;\n                  break;\n                }\n\n                _context4.t2 = null;\n                _context4.next = 25;\n                break;\n\n              case 22:\n                _context4.next = 24;\n                return renderBuffer();\n\n              case 24:\n                _context4.t2 = _context4.sent;\n\n              case 25:\n                _context4.t3 = _context4.t2;\n                _context4.t4 = nativeOfflineAudioContext;\n                _context4.t5 = options;\n                _context4.t6 = outputChannelCount;\n                _context4.t7 = processorConstructor;\n                _context4.t8 = exposeCurrentFrameAndCurrentTime;\n                processedBufferPromise = (0, _context4.t0)(_context4.t1, _context4.t3, _context4.t4, _context4.t5, _context4.t6, _context4.t7, _context4.t8);\n\n              case 32:\n                _context4.next = 34;\n                return processedBufferPromise;\n\n              case 34:\n                _processedBuffer = _context4.sent;\n                audioBufferSourceNode = createNativeAudioBufferSourceNode(nativeOfflineAudioContext, {\n                  buffer: null,\n                  channelCount: 2,\n                  channelCountMode: 'max',\n                  channelInterpretation: 'speakers',\n                  loop: false,\n                  loopEnd: 0,\n                  loopStart: 0,\n                  playbackRate: 1\n                });\n                _nativeOutputNodes = nativeOutputNodes, _nativeOutputNodes2 = _slicedToArray(_nativeOutputNodes, 3), _outputChannelSplitterNode = _nativeOutputNodes2[0], _outputChannelMergerNodes = _nativeOutputNodes2[1], _outputGainNode = _nativeOutputNodes2[2];\n\n                if (_processedBuffer !== null) {\n                  audioBufferSourceNode.buffer = _processedBuffer;\n                  audioBufferSourceNode.start(0);\n                }\n\n                audioBufferSourceNode.connect(_outputChannelSplitterNode);\n\n                for (_i3 = 0, outputChannelSplitterNodeOutput = 0; _i3 < proxy.numberOfOutputs; _i3 += 1) {\n                  outputChannelMergerNode = _outputChannelMergerNodes[_i3];\n\n                  for (j = 0; j < outputChannelCount[_i3]; j += 1) {\n                    _outputChannelSplitterNode.connect(outputChannelMergerNode, outputChannelSplitterNodeOutput + j, j);\n                  }\n\n                  outputChannelSplitterNodeOutput += outputChannelCount[_i3];\n                }\n\n                return _context4.abrupt(\"return\", _outputGainNode);\n\n              case 41:\n                if (nativeAudioWorkletNodeIsOwnedByContext) {\n                  _context4.next = 61;\n                  break;\n                }\n\n                _iterator2 = _createForOfIteratorHelper(proxy.parameters.entries());\n                _context4.prev = 43;\n\n                _iterator2.s();\n\n              case 45:\n                if ((_step2 = _iterator2.n()).done) {\n                  _context4.next = 51;\n                  break;\n                }\n\n                _step2$value = _slicedToArray(_step2.value, 2), nm = _step2$value[0], audioParam = _step2$value[1];\n                _context4.next = 49;\n                return renderAutomation(nativeOfflineAudioContext, audioParam, // @todo The definition that TypeScript uses of the AudioParamMap is lacking many methods.\n                nativeAudioWorkletNode.parameters.get(nm));\n\n              case 49:\n                _context4.next = 45;\n                break;\n\n              case 51:\n                _context4.next = 56;\n                break;\n\n              case 53:\n                _context4.prev = 53;\n                _context4.t9 = _context4[\"catch\"](43);\n\n                _iterator2.e(_context4.t9);\n\n              case 56:\n                _context4.prev = 56;\n\n                _iterator2.f();\n\n                return _context4.finish(56);\n\n              case 59:\n                _context4.next = 78;\n                break;\n\n              case 61:\n                _iterator3 = _createForOfIteratorHelper(proxy.parameters.entries());\n                _context4.prev = 62;\n\n                _iterator3.s();\n\n              case 64:\n                if ((_step3 = _iterator3.n()).done) {\n                  _context4.next = 70;\n                  break;\n                }\n\n                _step3$value = _slicedToArray(_step3.value, 2), _nm = _step3$value[0], _audioParam = _step3$value[1];\n                _context4.next = 68;\n                return connectAudioParam(nativeOfflineAudioContext, _audioParam, // @todo The definition that TypeScript uses of the AudioParamMap is lacking many methods.\n                nativeAudioWorkletNode.parameters.get(_nm));\n\n              case 68:\n                _context4.next = 64;\n                break;\n\n              case 70:\n                _context4.next = 75;\n                break;\n\n              case 72:\n                _context4.prev = 72;\n                _context4.t10 = _context4[\"catch\"](62);\n\n                _iterator3.e(_context4.t10);\n\n              case 75:\n                _context4.prev = 75;\n\n                _iterator3.f();\n\n                return _context4.finish(75);\n\n              case 78:\n                _context4.next = 80;\n                return renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioWorkletNode);\n\n              case 80:\n                return _context4.abrupt(\"return\", nativeAudioWorkletNode);\n\n              case 81:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, null, [[43, 53, 56, 59], [62, 72, 75, 78]]);\n      }));\n\n      return function createAudioNode(_x8, _x9) {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n\n    return {\n      render: function render(proxy, nativeOfflineAudioContext) {\n        deleteUnrenderedAudioWorkletNode(nativeOfflineAudioContext, proxy);\n        var renderedNativeAudioWorkletNodeOrGainNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeAudioWorkletNodeOrGainNode !== undefined) {\n          return Promise.resolve(renderedNativeAudioWorkletNodeOrGainNode);\n        }\n\n        return createAudioNode(proxy, nativeOfflineAudioContext);\n      }\n    };\n  };\n};","map":{"version":3,"mappings":"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","names":["copyFromChannel","copyToChannel","createNestedArrays","getAudioNodeConnections","getAudioWorkletProcessor","isOwnedByContext","processBuffer","proxy","renderedBuffer","nativeOfflineAudioContext","options","outputChannelCount","processorConstructor","exposeCurrentFrameAndCurrentTime","length","Math","ceil","context","numberOfInputChannels","channelCount","numberOfInputs","numberOfOutputChannels","reduce","sum","value","processedBuffer","createBuffer","sampleRate","undefined","Error","audioNodeConnections","audioWorkletProcessor","inputs","outputs","numberOfOutputs","parameters","Array","from","keys","prmtrs","name","Float32Array","i","j","k","parameterDescriptors","forEach","index","byteLength","potentiallyEmptyInputs","map","input","activeInputs","size","activeSourceFlag","process","outputChannelSplitterNodeOutput","error","dispatchEvent","ErrorEvent","colno","filename","lineno","message","createAudioWorkletNodeRendererFactory","connectAudioParam","connectMultipleOutputs","createNativeAudioBufferSourceNode","createNativeChannelMergerNode","createNativeChannelSplitterNode","createNativeConstantSourceNode","createNativeGainNode","deleteUnrenderedAudioWorkletNode","disconnectMultipleOutputs","getNativeAudioNode","nativeAudioWorkletNodeConstructor","nativeOfflineAudioContextConstructor","renderAutomation","renderInputsOfAudioNode","renderNativeOfflineAudioContext","renderedNativeAudioNodes","WeakMap","processedBufferPromise","createAudioNode","nativeAudioWorkletNode","nativeOutputNodes","nativeAudioWorkletNodeIsOwnedByContext","isArray","outputChannelSplitterNode","max","channelCountMode","channelInterpretation","outputChannelMergerNodes","push","outputGainNode","gain","connect","bind","disconnect","set","numberOfParameters","numberOfChannels","renderBuffer","partialOfflineAudioContext","gainNodes","inputChannelSplitterNodes","Promise","all","values","audioParam","constantSourceNode","offset","constantSourceNodes","inputChannelMergerNode","entries","start","destination","gainNode","audioBufferSourceNode","buffer","loop","loopEnd","loopStart","playbackRate","outputChannelMergerNode","nm","get","render","renderedNativeAudioWorkletNodeOrGainNode","resolve"],"sources":["C:\\Users\\brigh\\storage\\js_project\\Gakugeki_WEB\\node_modules\\standardized-audio-context\\src\\factories\\audio-worklet-node-renderer-factory.ts"],"sourcesContent":["import { copyFromChannel } from '../helpers/copy-from-channel';\nimport { copyToChannel } from '../helpers/copy-to-channel';\nimport { createNestedArrays } from '../helpers/create-nested-arrays';\nimport { getAudioNodeConnections } from '../helpers/get-audio-node-connections';\nimport { getAudioWorkletProcessor } from '../helpers/get-audio-worklet-processor';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport {\n    IAudioWorkletNode,\n    IAudioWorkletNodeOptions,\n    IAudioWorkletProcessorConstructor,\n    IMinimalOfflineAudioContext,\n    IOfflineAudioContext,\n    IReadOnlyMap\n} from '../interfaces';\nimport {\n    TAudioWorkletNodeRendererFactoryFactory,\n    TExposeCurrentFrameAndCurrentTimeFunction,\n    TNativeAudioBuffer,\n    TNativeAudioNode,\n    TNativeAudioParam,\n    TNativeAudioWorkletNode,\n    TNativeChannelMergerNode,\n    TNativeChannelSplitterNode,\n    TNativeGainNode,\n    TNativeOfflineAudioContext\n} from '../types';\n\nconst processBuffer = async <T extends IMinimalOfflineAudioContext | IOfflineAudioContext>(\n    proxy: IAudioWorkletNode<T>,\n    renderedBuffer: null | TNativeAudioBuffer,\n    nativeOfflineAudioContext: TNativeOfflineAudioContext,\n    options: IAudioWorkletNodeOptions,\n    outputChannelCount: number[],\n    processorConstructor: undefined | IAudioWorkletProcessorConstructor,\n    exposeCurrentFrameAndCurrentTime: TExposeCurrentFrameAndCurrentTimeFunction\n): Promise<null | TNativeAudioBuffer> => {\n    // Ceil the length to the next full render quantum.\n    // Bug #17: Safari does not yet expose the length.\n    const length = renderedBuffer === null ? Math.ceil(proxy.context.length / 128) * 128 : renderedBuffer.length;\n    const numberOfInputChannels = options.channelCount * options.numberOfInputs;\n    const numberOfOutputChannels = outputChannelCount.reduce((sum, value) => sum + value, 0);\n    const processedBuffer =\n        numberOfOutputChannels === 0\n            ? null\n            : nativeOfflineAudioContext.createBuffer(numberOfOutputChannels, length, nativeOfflineAudioContext.sampleRate);\n\n    if (processorConstructor === undefined) {\n        throw new Error('Missing the processor constructor.');\n    }\n\n    const audioNodeConnections = getAudioNodeConnections(proxy);\n    const audioWorkletProcessor = await getAudioWorkletProcessor(nativeOfflineAudioContext, proxy);\n    const inputs = createNestedArrays(options.numberOfInputs, options.channelCount);\n    const outputs = createNestedArrays(options.numberOfOutputs, outputChannelCount);\n    const parameters: { [name: string]: Float32Array } = Array.from(proxy.parameters.keys()).reduce(\n        (prmtrs, name) => ({ ...prmtrs, [name]: new Float32Array(128) }),\n        {}\n    );\n\n    for (let i = 0; i < length; i += 128) {\n        if (options.numberOfInputs > 0 && renderedBuffer !== null) {\n            for (let j = 0; j < options.numberOfInputs; j += 1) {\n                for (let k = 0; k < options.channelCount; k += 1) {\n                    copyFromChannel(renderedBuffer, inputs[j], k, k, i);\n                }\n            }\n        }\n\n        if (processorConstructor.parameterDescriptors !== undefined && renderedBuffer !== null) {\n            processorConstructor.parameterDescriptors.forEach(({ name }, index) => {\n                copyFromChannel(renderedBuffer, parameters, name, numberOfInputChannels + index, i);\n            });\n        }\n\n        for (let j = 0; j < options.numberOfInputs; j += 1) {\n            for (let k = 0; k < outputChannelCount[j]; k += 1) {\n                // The byteLength will be 0 when the ArrayBuffer was transferred.\n                if (outputs[j][k].byteLength === 0) {\n                    outputs[j][k] = new Float32Array(128);\n                }\n            }\n        }\n\n        try {\n            const potentiallyEmptyInputs = inputs.map((input, index) => {\n                if (audioNodeConnections.activeInputs[index].size === 0) {\n                    return [];\n                }\n\n                return input;\n            });\n            const activeSourceFlag = exposeCurrentFrameAndCurrentTime(\n                i / nativeOfflineAudioContext.sampleRate,\n                nativeOfflineAudioContext.sampleRate,\n                () => audioWorkletProcessor.process(potentiallyEmptyInputs, outputs, parameters)\n            );\n\n            if (processedBuffer !== null) {\n                for (let j = 0, outputChannelSplitterNodeOutput = 0; j < options.numberOfOutputs; j += 1) {\n                    for (let k = 0; k < outputChannelCount[j]; k += 1) {\n                        copyToChannel(processedBuffer, outputs[j], k, outputChannelSplitterNodeOutput + k, i);\n                    }\n\n                    outputChannelSplitterNodeOutput += outputChannelCount[j];\n                }\n            }\n\n            if (!activeSourceFlag) {\n                break;\n            }\n        } catch (error) {\n            proxy.dispatchEvent(\n                new ErrorEvent('processorerror', {\n                    colno: error.colno,\n                    filename: error.filename,\n                    lineno: error.lineno,\n                    message: error.message\n                })\n            );\n\n            break;\n        }\n    }\n\n    return processedBuffer;\n};\n\nexport const createAudioWorkletNodeRendererFactory: TAudioWorkletNodeRendererFactoryFactory = (\n    connectAudioParam,\n    connectMultipleOutputs,\n    createNativeAudioBufferSourceNode,\n    createNativeChannelMergerNode,\n    createNativeChannelSplitterNode,\n    createNativeConstantSourceNode,\n    createNativeGainNode,\n    deleteUnrenderedAudioWorkletNode,\n    disconnectMultipleOutputs,\n    exposeCurrentFrameAndCurrentTime,\n    getNativeAudioNode,\n    nativeAudioWorkletNodeConstructor,\n    nativeOfflineAudioContextConstructor,\n    renderAutomation,\n    renderInputsOfAudioNode,\n    renderNativeOfflineAudioContext\n) => {\n    return <T extends IMinimalOfflineAudioContext | IOfflineAudioContext>(\n        name: string,\n        options: IAudioWorkletNodeOptions,\n        processorConstructor: undefined | IAudioWorkletProcessorConstructor\n    ) => {\n        const renderedNativeAudioNodes = new WeakMap<TNativeOfflineAudioContext, TNativeAudioWorkletNode | TNativeGainNode>();\n\n        let processedBufferPromise: null | Promise<null | TNativeAudioBuffer> = null;\n\n        const createAudioNode = async (proxy: IAudioWorkletNode<T>, nativeOfflineAudioContext: TNativeOfflineAudioContext) => {\n            let nativeAudioWorkletNode = getNativeAudioNode<T, TNativeAudioWorkletNode>(proxy);\n            let nativeOutputNodes: null | [TNativeChannelSplitterNode, TNativeChannelMergerNode[], TNativeGainNode] = null;\n\n            const nativeAudioWorkletNodeIsOwnedByContext = isOwnedByContext(nativeAudioWorkletNode, nativeOfflineAudioContext);\n            const outputChannelCount = Array.isArray(options.outputChannelCount)\n                ? options.outputChannelCount\n                : Array.from(options.outputChannelCount);\n\n            // Bug #61: Only Chrome, Edge & Firefox have an implementation of the AudioWorkletNode yet.\n            if (nativeAudioWorkletNodeConstructor === null) {\n                const numberOfOutputChannels = outputChannelCount.reduce((sum, value) => sum + value, 0);\n                const outputChannelSplitterNode = createNativeChannelSplitterNode(nativeOfflineAudioContext, {\n                    channelCount: Math.max(1, numberOfOutputChannels),\n                    channelCountMode: 'explicit',\n                    channelInterpretation: 'discrete',\n                    numberOfOutputs: Math.max(1, numberOfOutputChannels)\n                });\n                const outputChannelMergerNodes: TNativeChannelMergerNode[] = [];\n\n                for (let i = 0; i < proxy.numberOfOutputs; i += 1) {\n                    outputChannelMergerNodes.push(\n                        createNativeChannelMergerNode(nativeOfflineAudioContext, {\n                            channelCount: 1,\n                            channelCountMode: 'explicit',\n                            channelInterpretation: 'speakers',\n                            numberOfInputs: outputChannelCount[i]\n                        })\n                    );\n                }\n\n                const outputGainNode = createNativeGainNode(nativeOfflineAudioContext, {\n                    channelCount: options.channelCount,\n                    channelCountMode: options.channelCountMode,\n                    channelInterpretation: options.channelInterpretation,\n                    gain: 1\n                });\n\n                outputGainNode.connect = <TNativeAudioNode['connect']>connectMultipleOutputs.bind(null, outputChannelMergerNodes);\n                outputGainNode.disconnect = <TNativeAudioNode['disconnect']>disconnectMultipleOutputs.bind(null, outputChannelMergerNodes);\n\n                nativeOutputNodes = [outputChannelSplitterNode, outputChannelMergerNodes, outputGainNode];\n            } else if (!nativeAudioWorkletNodeIsOwnedByContext) {\n                nativeAudioWorkletNode = new nativeAudioWorkletNodeConstructor(nativeOfflineAudioContext, name);\n            }\n\n            renderedNativeAudioNodes.set(\n                nativeOfflineAudioContext,\n                nativeOutputNodes === null ? nativeAudioWorkletNode : nativeOutputNodes[2]\n            );\n\n            if (nativeOutputNodes !== null) {\n                if (processedBufferPromise === null) {\n                    if (processorConstructor === undefined) {\n                        throw new Error('Missing the processor constructor.');\n                    }\n\n                    if (nativeOfflineAudioContextConstructor === null) {\n                        throw new Error('Missing the native OfflineAudioContext constructor.');\n                    }\n\n                    // Bug #47: The AudioDestinationNode in Safari gets not initialized correctly.\n                    const numberOfInputChannels = proxy.channelCount * proxy.numberOfInputs;\n                    const numberOfParameters =\n                        processorConstructor.parameterDescriptors === undefined ? 0 : processorConstructor.parameterDescriptors.length;\n                    const numberOfChannels = numberOfInputChannels + numberOfParameters;\n\n                    const renderBuffer = async () => {\n                        const partialOfflineAudioContext = new nativeOfflineAudioContextConstructor(\n                            numberOfChannels,\n                            // Ceil the length to the next full render quantum.\n                            // Bug #17: Safari does not yet expose the length.\n                            Math.ceil(proxy.context.length / 128) * 128,\n                            nativeOfflineAudioContext.sampleRate\n                        );\n                        const gainNodes: TNativeGainNode[] = [];\n                        const inputChannelSplitterNodes = [];\n\n                        for (let i = 0; i < options.numberOfInputs; i += 1) {\n                            gainNodes.push(\n                                createNativeGainNode(partialOfflineAudioContext, {\n                                    channelCount: options.channelCount,\n                                    channelCountMode: options.channelCountMode,\n                                    channelInterpretation: options.channelInterpretation,\n                                    gain: 1\n                                })\n                            );\n                            inputChannelSplitterNodes.push(\n                                createNativeChannelSplitterNode(partialOfflineAudioContext, {\n                                    channelCount: options.channelCount,\n                                    channelCountMode: 'explicit',\n                                    channelInterpretation: 'discrete',\n                                    numberOfOutputs: options.channelCount\n                                })\n                            );\n                        }\n\n                        const constantSourceNodes = await Promise.all(\n                            Array.from(proxy.parameters.values()).map(async (audioParam) => {\n                                const constantSourceNode = createNativeConstantSourceNode(partialOfflineAudioContext, {\n                                    channelCount: 1,\n                                    channelCountMode: 'explicit',\n                                    channelInterpretation: 'discrete',\n                                    offset: audioParam.value\n                                });\n\n                                await renderAutomation(partialOfflineAudioContext, audioParam, constantSourceNode.offset);\n\n                                return constantSourceNode;\n                            })\n                        );\n\n                        const inputChannelMergerNode = createNativeChannelMergerNode(partialOfflineAudioContext, {\n                            channelCount: 1,\n                            channelCountMode: 'explicit',\n                            channelInterpretation: 'speakers',\n                            numberOfInputs: Math.max(1, numberOfInputChannels + numberOfParameters)\n                        });\n\n                        for (let i = 0; i < options.numberOfInputs; i += 1) {\n                            gainNodes[i].connect(inputChannelSplitterNodes[i]);\n\n                            for (let j = 0; j < options.channelCount; j += 1) {\n                                inputChannelSplitterNodes[i].connect(inputChannelMergerNode, j, i * options.channelCount + j);\n                            }\n                        }\n\n                        for (const [index, constantSourceNode] of constantSourceNodes.entries()) {\n                            constantSourceNode.connect(inputChannelMergerNode, 0, numberOfInputChannels + index);\n                            constantSourceNode.start(0);\n                        }\n\n                        inputChannelMergerNode.connect(partialOfflineAudioContext.destination);\n\n                        await Promise.all(\n                            gainNodes.map((gainNode) => renderInputsOfAudioNode(proxy, partialOfflineAudioContext, gainNode))\n                        );\n\n                        return renderNativeOfflineAudioContext(partialOfflineAudioContext);\n                    };\n\n                    processedBufferPromise = processBuffer(\n                        proxy,\n                        numberOfChannels === 0 ? null : await renderBuffer(),\n                        nativeOfflineAudioContext,\n                        options,\n                        outputChannelCount,\n                        processorConstructor,\n                        exposeCurrentFrameAndCurrentTime\n                    );\n                }\n\n                const processedBuffer = await processedBufferPromise;\n                const audioBufferSourceNode = createNativeAudioBufferSourceNode(nativeOfflineAudioContext, {\n                    buffer: null,\n                    channelCount: 2,\n                    channelCountMode: 'max',\n                    channelInterpretation: 'speakers',\n                    loop: false,\n                    loopEnd: 0,\n                    loopStart: 0,\n                    playbackRate: 1\n                });\n                const [outputChannelSplitterNode, outputChannelMergerNodes, outputGainNode] = nativeOutputNodes;\n\n                if (processedBuffer !== null) {\n                    audioBufferSourceNode.buffer = processedBuffer;\n                    audioBufferSourceNode.start(0);\n                }\n\n                audioBufferSourceNode.connect(outputChannelSplitterNode);\n\n                for (let i = 0, outputChannelSplitterNodeOutput = 0; i < proxy.numberOfOutputs; i += 1) {\n                    const outputChannelMergerNode = outputChannelMergerNodes[i];\n\n                    for (let j = 0; j < outputChannelCount[i]; j += 1) {\n                        outputChannelSplitterNode.connect(outputChannelMergerNode, outputChannelSplitterNodeOutput + j, j);\n                    }\n\n                    outputChannelSplitterNodeOutput += outputChannelCount[i];\n                }\n\n                return outputGainNode;\n            }\n\n            if (!nativeAudioWorkletNodeIsOwnedByContext) {\n                for (const [nm, audioParam] of proxy.parameters.entries()) {\n                    await renderAutomation(\n                        nativeOfflineAudioContext,\n                        audioParam,\n                        // @todo The definition that TypeScript uses of the AudioParamMap is lacking many methods.\n                        <TNativeAudioParam>(<IReadOnlyMap<string, TNativeAudioParam>>nativeAudioWorkletNode.parameters).get(nm)\n                    );\n                }\n            } else {\n                for (const [nm, audioParam] of proxy.parameters.entries()) {\n                    await connectAudioParam(\n                        nativeOfflineAudioContext,\n                        audioParam,\n                        // @todo The definition that TypeScript uses of the AudioParamMap is lacking many methods.\n                        <TNativeAudioParam>(<IReadOnlyMap<string, TNativeAudioParam>>nativeAudioWorkletNode.parameters).get(nm)\n                    );\n                }\n            }\n\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioWorkletNode);\n\n            return nativeAudioWorkletNode;\n        };\n\n        return {\n            render(\n                proxy: IAudioWorkletNode<T>,\n                nativeOfflineAudioContext: TNativeOfflineAudioContext\n            ): Promise<TNativeAudioWorkletNode | TNativeGainNode> {\n                deleteUnrenderedAudioWorkletNode(nativeOfflineAudioContext, proxy);\n\n                const renderedNativeAudioWorkletNodeOrGainNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);\n\n                if (renderedNativeAudioWorkletNodeOrGainNode !== undefined) {\n                    return Promise.resolve(renderedNativeAudioWorkletNodeOrGainNode);\n                }\n\n                return createAudioNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n"]},"metadata":{},"sourceType":"module"}