{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nexport var createMonitorConnections = function createMonitorConnections(insertElementInSet, isNativeAudioNode) {\n  return function (nativeAudioNode, whenConnected, whenDisconnected) {\n    var connections = new Set();\n\n    nativeAudioNode.connect = function (connect) {\n      // tslint:disable-next-line:invalid-void no-inferrable-types\n      return function (destination) {\n        var output = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n        var input = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n        var wasDisconnected = connections.size === 0;\n\n        if (isNativeAudioNode(destination)) {\n          // @todo TypeScript cannot infer the overloaded signature with 3 arguments yet.\n          connect.call(nativeAudioNode, destination, output, input);\n          insertElementInSet(connections, [destination, output, input], function (connection) {\n            return connection[0] === destination && connection[1] === output && connection[2] === input;\n          }, true);\n\n          if (wasDisconnected) {\n            whenConnected();\n          }\n\n          return destination;\n        }\n\n        connect.call(nativeAudioNode, destination, output);\n        insertElementInSet(connections, [destination, output], function (connection) {\n          return connection[0] === destination && connection[1] === output;\n        }, true);\n\n        if (wasDisconnected) {\n          whenConnected();\n        }\n\n        return;\n      };\n    }(nativeAudioNode.connect);\n\n    nativeAudioNode.disconnect = function (disconnect) {\n      return function (destinationOrOutput, output, input) {\n        var wasConnected = connections.size > 0;\n\n        if (destinationOrOutput === undefined) {\n          disconnect.apply(nativeAudioNode);\n          connections.clear();\n        } else if (typeof destinationOrOutput === 'number') {\n          // @todo TypeScript cannot infer the overloaded signature with 1 argument yet.\n          disconnect.call(nativeAudioNode, destinationOrOutput);\n\n          var _iterator = _createForOfIteratorHelper(connections),\n              _step;\n\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var connection = _step.value;\n\n              if (connection[1] === destinationOrOutput) {\n                connections.delete(connection);\n              }\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n        } else {\n          if (isNativeAudioNode(destinationOrOutput)) {\n            // @todo TypeScript cannot infer the overloaded signature with 3 arguments yet.\n            disconnect.call(nativeAudioNode, destinationOrOutput, output, input);\n          } else {\n            // @todo TypeScript cannot infer the overloaded signature with 2 arguments yet.\n            disconnect.call(nativeAudioNode, destinationOrOutput, output);\n          }\n\n          var _iterator2 = _createForOfIteratorHelper(connections),\n              _step2;\n\n          try {\n            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n              var _connection = _step2.value;\n\n              if (_connection[0] === destinationOrOutput && (output === undefined || _connection[1] === output) && (input === undefined || _connection[2] === input)) {\n                connections.delete(_connection);\n              }\n            }\n          } catch (err) {\n            _iterator2.e(err);\n          } finally {\n            _iterator2.f();\n          }\n        }\n\n        var isDisconnected = connections.size === 0;\n\n        if (wasConnected && isDisconnected) {\n          whenDisconnected();\n        }\n      };\n    }(nativeAudioNode.disconnect);\n\n    return nativeAudioNode;\n  };\n};","map":{"version":3,"mappings":"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","names":["createMonitorConnections","insertElementInSet","isNativeAudioNode","nativeAudioNode","whenConnected","whenDisconnected","connections","Set","connect","destination","output","input","wasDisconnected","size","call","connection","disconnect","destinationOrOutput","wasConnected","undefined","apply","clear","delete","isDisconnected"],"sources":["C:\\Users\\brigh\\storage\\js_project\\Gakugeki_WEB\\node_modules\\standardized-audio-context\\src\\factories\\monitor-connections.ts"],"sourcesContent":["import { TMonitorConnectionsFactory, TNativeAudioNode, TNativeAudioParam } from '../types';\n\nexport const createMonitorConnections: TMonitorConnectionsFactory = (insertElementInSet, isNativeAudioNode) => {\n    return (nativeAudioNode, whenConnected, whenDisconnected) => {\n        const connections = new Set<[TNativeAudioNode, number, number] | [TNativeAudioParam, number]>();\n\n        nativeAudioNode.connect = <TNativeAudioNode['connect']>((connect) => {\n            // tslint:disable-next-line:invalid-void no-inferrable-types\n            return (destination: TNativeAudioNode | TNativeAudioParam, output = 0, input: number = 0): void | TNativeAudioNode => {\n                const wasDisconnected = connections.size === 0;\n\n                if (isNativeAudioNode(destination)) {\n                    // @todo TypeScript cannot infer the overloaded signature with 3 arguments yet.\n                    (<(destination: TNativeAudioNode, output?: number, input?: number) => TNativeAudioNode>connect).call(\n                        nativeAudioNode,\n                        destination,\n                        output,\n                        input\n                    );\n\n                    insertElementInSet(\n                        connections,\n                        [destination, output, input],\n                        (connection) => connection[0] === destination && connection[1] === output && connection[2] === input,\n                        true\n                    );\n\n                    if (wasDisconnected) {\n                        whenConnected();\n                    }\n\n                    return destination;\n                }\n\n                connect.call(nativeAudioNode, destination, output);\n\n                insertElementInSet(\n                    connections,\n                    [destination, output],\n                    (connection) => connection[0] === destination && connection[1] === output,\n                    true\n                );\n\n                if (wasDisconnected) {\n                    whenConnected();\n                }\n\n                return;\n            };\n        })(nativeAudioNode.connect);\n\n        nativeAudioNode.disconnect = ((disconnect) => {\n            return (destinationOrOutput?: number | TNativeAudioNode | TNativeAudioParam, output?: number, input?: number): void => {\n                const wasConnected = connections.size > 0;\n\n                if (destinationOrOutput === undefined) {\n                    disconnect.apply(nativeAudioNode);\n\n                    connections.clear();\n                } else if (typeof destinationOrOutput === 'number') {\n                    // @todo TypeScript cannot infer the overloaded signature with 1 argument yet.\n                    (<(output: number) => void>disconnect).call(nativeAudioNode, destinationOrOutput);\n\n                    for (const connection of connections) {\n                        if (connection[1] === destinationOrOutput) {\n                            connections.delete(connection);\n                        }\n                    }\n                } else {\n                    if (isNativeAudioNode(destinationOrOutput)) {\n                        // @todo TypeScript cannot infer the overloaded signature with 3 arguments yet.\n                        (<(destination: TNativeAudioNode, output?: number, input?: number) => void>disconnect).call(\n                            nativeAudioNode,\n                            destinationOrOutput,\n                            output,\n                            input\n                        );\n                    } else {\n                        // @todo TypeScript cannot infer the overloaded signature with 2 arguments yet.\n                        (<(destination: TNativeAudioParam, output?: number) => void>disconnect).call(\n                            nativeAudioNode,\n                            destinationOrOutput,\n                            output\n                        );\n                    }\n\n                    for (const connection of connections) {\n                        if (\n                            connection[0] === destinationOrOutput &&\n                            (output === undefined || connection[1] === output) &&\n                            (input === undefined || connection[2] === input)\n                        ) {\n                            connections.delete(connection);\n                        }\n                    }\n                }\n\n                const isDisconnected = connections.size === 0;\n\n                if (wasConnected && isDisconnected) {\n                    whenDisconnected();\n                }\n            };\n        })(nativeAudioNode.disconnect);\n\n        return nativeAudioNode;\n    };\n};\n"]},"metadata":{},"sourceType":"module"}