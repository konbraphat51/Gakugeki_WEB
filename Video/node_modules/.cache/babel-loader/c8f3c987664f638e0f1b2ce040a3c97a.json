{"ast":null,"code":"import _objectWithoutProperties from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nimport _objectSpread from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nvar _excluded = [\"channelCount\", \"channelCountMode\", \"pan\"];\nimport { interceptConnections } from '../helpers/intercept-connections';\nexport var createNativeStereoPannerNodeFakerFactory = function createNativeStereoPannerNodeFakerFactory(createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeGainNode, createNativeWaveShaperNode, createNotSupportedError, monitorConnections) {\n  // The curve has a size of 14bit plus 1 value to have an exact representation for zero. This value has been determined experimentally.\n  var CURVE_SIZE = 16385;\n  var DC_CURVE = new Float32Array([1, 1]);\n  var HALF_PI = Math.PI / 2;\n  var SINGLE_CHANNEL_OPTIONS = {\n    channelCount: 1,\n    channelCountMode: 'explicit',\n    channelInterpretation: 'discrete'\n  };\n\n  var SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS = _objectSpread(_objectSpread({}, SINGLE_CHANNEL_OPTIONS), {}, {\n    oversample: 'none'\n  });\n\n  var buildInternalGraphForMono = function buildInternalGraphForMono(nativeContext, inputGainNode, panGainNode, channelMergerNode) {\n    var leftWaveShaperCurve = new Float32Array(CURVE_SIZE);\n    var rightWaveShaperCurve = new Float32Array(CURVE_SIZE);\n\n    for (var i = 0; i < CURVE_SIZE; i += 1) {\n      var x = i / (CURVE_SIZE - 1) * HALF_PI;\n      leftWaveShaperCurve[i] = Math.cos(x);\n      rightWaveShaperCurve[i] = Math.sin(x);\n    }\n\n    var leftGainNode = createNativeGainNode(nativeContext, _objectSpread(_objectSpread({}, SINGLE_CHANNEL_OPTIONS), {}, {\n      gain: 0\n    })); // Bug #119: Safari does not fully support the WaveShaperNode.\n\n    var leftWaveShaperNode = createNativeWaveShaperNode(nativeContext, _objectSpread(_objectSpread({}, SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS), {}, {\n      curve: leftWaveShaperCurve\n    })); // Bug #119: Safari does not fully support the WaveShaperNode.\n\n    var panWaveShaperNode = createNativeWaveShaperNode(nativeContext, _objectSpread(_objectSpread({}, SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS), {}, {\n      curve: DC_CURVE\n    }));\n    var rightGainNode = createNativeGainNode(nativeContext, _objectSpread(_objectSpread({}, SINGLE_CHANNEL_OPTIONS), {}, {\n      gain: 0\n    })); // Bug #119: Safari does not fully support the WaveShaperNode.\n\n    var rightWaveShaperNode = createNativeWaveShaperNode(nativeContext, _objectSpread(_objectSpread({}, SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS), {}, {\n      curve: rightWaveShaperCurve\n    }));\n    return {\n      connectGraph: function connectGraph() {\n        inputGainNode.connect(leftGainNode);\n        inputGainNode.connect(panWaveShaperNode.inputs === undefined ? panWaveShaperNode : panWaveShaperNode.inputs[0]);\n        inputGainNode.connect(rightGainNode);\n        panWaveShaperNode.connect(panGainNode);\n        panGainNode.connect(leftWaveShaperNode.inputs === undefined ? leftWaveShaperNode : leftWaveShaperNode.inputs[0]);\n        panGainNode.connect(rightWaveShaperNode.inputs === undefined ? rightWaveShaperNode : rightWaveShaperNode.inputs[0]);\n        leftWaveShaperNode.connect(leftGainNode.gain);\n        rightWaveShaperNode.connect(rightGainNode.gain);\n        leftGainNode.connect(channelMergerNode, 0, 0);\n        rightGainNode.connect(channelMergerNode, 0, 1);\n      },\n      disconnectGraph: function disconnectGraph() {\n        inputGainNode.disconnect(leftGainNode);\n        inputGainNode.disconnect(panWaveShaperNode.inputs === undefined ? panWaveShaperNode : panWaveShaperNode.inputs[0]);\n        inputGainNode.disconnect(rightGainNode);\n        panWaveShaperNode.disconnect(panGainNode);\n        panGainNode.disconnect(leftWaveShaperNode.inputs === undefined ? leftWaveShaperNode : leftWaveShaperNode.inputs[0]);\n        panGainNode.disconnect(rightWaveShaperNode.inputs === undefined ? rightWaveShaperNode : rightWaveShaperNode.inputs[0]);\n        leftWaveShaperNode.disconnect(leftGainNode.gain);\n        rightWaveShaperNode.disconnect(rightGainNode.gain);\n        leftGainNode.disconnect(channelMergerNode, 0, 0);\n        rightGainNode.disconnect(channelMergerNode, 0, 1);\n      }\n    };\n  };\n\n  var buildInternalGraphForStereo = function buildInternalGraphForStereo(nativeContext, inputGainNode, panGainNode, channelMergerNode) {\n    var leftInputForLeftOutputWaveShaperCurve = new Float32Array(CURVE_SIZE);\n    var leftInputForRightOutputWaveShaperCurve = new Float32Array(CURVE_SIZE);\n    var rightInputForLeftOutputWaveShaperCurve = new Float32Array(CURVE_SIZE);\n    var rightInputForRightOutputWaveShaperCurve = new Float32Array(CURVE_SIZE);\n    var centerIndex = Math.floor(CURVE_SIZE / 2);\n\n    for (var i = 0; i < CURVE_SIZE; i += 1) {\n      if (i > centerIndex) {\n        var x = (i - centerIndex) / (CURVE_SIZE - 1 - centerIndex) * HALF_PI;\n        leftInputForLeftOutputWaveShaperCurve[i] = Math.cos(x);\n        leftInputForRightOutputWaveShaperCurve[i] = Math.sin(x);\n        rightInputForLeftOutputWaveShaperCurve[i] = 0;\n        rightInputForRightOutputWaveShaperCurve[i] = 1;\n      } else {\n        var _x = i / (CURVE_SIZE - 1 - centerIndex) * HALF_PI;\n\n        leftInputForLeftOutputWaveShaperCurve[i] = 1;\n        leftInputForRightOutputWaveShaperCurve[i] = 0;\n        rightInputForLeftOutputWaveShaperCurve[i] = Math.cos(_x);\n        rightInputForRightOutputWaveShaperCurve[i] = Math.sin(_x);\n      }\n    }\n\n    var channelSplitterNode = createNativeChannelSplitterNode(nativeContext, {\n      channelCount: 2,\n      channelCountMode: 'explicit',\n      channelInterpretation: 'discrete',\n      numberOfOutputs: 2\n    });\n    var leftInputForLeftOutputGainNode = createNativeGainNode(nativeContext, _objectSpread(_objectSpread({}, SINGLE_CHANNEL_OPTIONS), {}, {\n      gain: 0\n    })); // Bug #119: Safari does not fully support the WaveShaperNode.\n\n    var leftInputForLeftOutputWaveShaperNode = createNativeWaveShaperNode(nativeContext, _objectSpread(_objectSpread({}, SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS), {}, {\n      curve: leftInputForLeftOutputWaveShaperCurve\n    }));\n    var leftInputForRightOutputGainNode = createNativeGainNode(nativeContext, _objectSpread(_objectSpread({}, SINGLE_CHANNEL_OPTIONS), {}, {\n      gain: 0\n    })); // Bug #119: Safari does not fully support the WaveShaperNode.\n\n    var leftInputForRightOutputWaveShaperNode = createNativeWaveShaperNode(nativeContext, _objectSpread(_objectSpread({}, SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS), {}, {\n      curve: leftInputForRightOutputWaveShaperCurve\n    })); // Bug #119: Safari does not fully support the WaveShaperNode.\n\n    var panWaveShaperNode = createNativeWaveShaperNode(nativeContext, _objectSpread(_objectSpread({}, SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS), {}, {\n      curve: DC_CURVE\n    }));\n    var rightInputForLeftOutputGainNode = createNativeGainNode(nativeContext, _objectSpread(_objectSpread({}, SINGLE_CHANNEL_OPTIONS), {}, {\n      gain: 0\n    })); // Bug #119: Safari does not fully support the WaveShaperNode.\n\n    var rightInputForLeftOutputWaveShaperNode = createNativeWaveShaperNode(nativeContext, _objectSpread(_objectSpread({}, SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS), {}, {\n      curve: rightInputForLeftOutputWaveShaperCurve\n    }));\n    var rightInputForRightOutputGainNode = createNativeGainNode(nativeContext, _objectSpread(_objectSpread({}, SINGLE_CHANNEL_OPTIONS), {}, {\n      gain: 0\n    })); // Bug #119: Safari does not fully support the WaveShaperNode.\n\n    var rightInputForRightOutputWaveShaperNode = createNativeWaveShaperNode(nativeContext, _objectSpread(_objectSpread({}, SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS), {}, {\n      curve: rightInputForRightOutputWaveShaperCurve\n    }));\n    return {\n      connectGraph: function connectGraph() {\n        inputGainNode.connect(channelSplitterNode);\n        inputGainNode.connect(panWaveShaperNode.inputs === undefined ? panWaveShaperNode : panWaveShaperNode.inputs[0]);\n        channelSplitterNode.connect(leftInputForLeftOutputGainNode, 0);\n        channelSplitterNode.connect(leftInputForRightOutputGainNode, 0);\n        channelSplitterNode.connect(rightInputForLeftOutputGainNode, 1);\n        channelSplitterNode.connect(rightInputForRightOutputGainNode, 1);\n        panWaveShaperNode.connect(panGainNode);\n        panGainNode.connect(leftInputForLeftOutputWaveShaperNode.inputs === undefined ? leftInputForLeftOutputWaveShaperNode : leftInputForLeftOutputWaveShaperNode.inputs[0]);\n        panGainNode.connect(leftInputForRightOutputWaveShaperNode.inputs === undefined ? leftInputForRightOutputWaveShaperNode : leftInputForRightOutputWaveShaperNode.inputs[0]);\n        panGainNode.connect(rightInputForLeftOutputWaveShaperNode.inputs === undefined ? rightInputForLeftOutputWaveShaperNode : rightInputForLeftOutputWaveShaperNode.inputs[0]);\n        panGainNode.connect(rightInputForRightOutputWaveShaperNode.inputs === undefined ? rightInputForRightOutputWaveShaperNode : rightInputForRightOutputWaveShaperNode.inputs[0]);\n        leftInputForLeftOutputWaveShaperNode.connect(leftInputForLeftOutputGainNode.gain);\n        leftInputForRightOutputWaveShaperNode.connect(leftInputForRightOutputGainNode.gain);\n        rightInputForLeftOutputWaveShaperNode.connect(rightInputForLeftOutputGainNode.gain);\n        rightInputForRightOutputWaveShaperNode.connect(rightInputForRightOutputGainNode.gain);\n        leftInputForLeftOutputGainNode.connect(channelMergerNode, 0, 0);\n        rightInputForLeftOutputGainNode.connect(channelMergerNode, 0, 0);\n        leftInputForRightOutputGainNode.connect(channelMergerNode, 0, 1);\n        rightInputForRightOutputGainNode.connect(channelMergerNode, 0, 1);\n      },\n      disconnectGraph: function disconnectGraph() {\n        inputGainNode.disconnect(channelSplitterNode);\n        inputGainNode.disconnect(panWaveShaperNode.inputs === undefined ? panWaveShaperNode : panWaveShaperNode.inputs[0]);\n        channelSplitterNode.disconnect(leftInputForLeftOutputGainNode, 0);\n        channelSplitterNode.disconnect(leftInputForRightOutputGainNode, 0);\n        channelSplitterNode.disconnect(rightInputForLeftOutputGainNode, 1);\n        channelSplitterNode.disconnect(rightInputForRightOutputGainNode, 1);\n        panWaveShaperNode.disconnect(panGainNode);\n        panGainNode.disconnect(leftInputForLeftOutputWaveShaperNode.inputs === undefined ? leftInputForLeftOutputWaveShaperNode : leftInputForLeftOutputWaveShaperNode.inputs[0]);\n        panGainNode.disconnect(leftInputForRightOutputWaveShaperNode.inputs === undefined ? leftInputForRightOutputWaveShaperNode : leftInputForRightOutputWaveShaperNode.inputs[0]);\n        panGainNode.disconnect(rightInputForLeftOutputWaveShaperNode.inputs === undefined ? rightInputForLeftOutputWaveShaperNode : rightInputForLeftOutputWaveShaperNode.inputs[0]);\n        panGainNode.disconnect(rightInputForRightOutputWaveShaperNode.inputs === undefined ? rightInputForRightOutputWaveShaperNode : rightInputForRightOutputWaveShaperNode.inputs[0]);\n        leftInputForLeftOutputWaveShaperNode.disconnect(leftInputForLeftOutputGainNode.gain);\n        leftInputForRightOutputWaveShaperNode.disconnect(leftInputForRightOutputGainNode.gain);\n        rightInputForLeftOutputWaveShaperNode.disconnect(rightInputForLeftOutputGainNode.gain);\n        rightInputForRightOutputWaveShaperNode.disconnect(rightInputForRightOutputGainNode.gain);\n        leftInputForLeftOutputGainNode.disconnect(channelMergerNode, 0, 0);\n        rightInputForLeftOutputGainNode.disconnect(channelMergerNode, 0, 0);\n        leftInputForRightOutputGainNode.disconnect(channelMergerNode, 0, 1);\n        rightInputForRightOutputGainNode.disconnect(channelMergerNode, 0, 1);\n      }\n    };\n  };\n\n  var buildInternalGraph = function buildInternalGraph(nativeContext, channelCount, inputGainNode, panGainNode, channelMergerNode) {\n    if (channelCount === 1) {\n      return buildInternalGraphForMono(nativeContext, inputGainNode, panGainNode, channelMergerNode);\n    }\n\n    if (channelCount === 2) {\n      return buildInternalGraphForStereo(nativeContext, inputGainNode, panGainNode, channelMergerNode);\n    }\n\n    throw createNotSupportedError();\n  };\n\n  return function (nativeContext, _ref) {\n    var channelCount = _ref.channelCount,\n        channelCountMode = _ref.channelCountMode,\n        pan = _ref.pan,\n        audioNodeOptions = _objectWithoutProperties(_ref, _excluded);\n\n    if (channelCountMode === 'max') {\n      throw createNotSupportedError();\n    }\n\n    var channelMergerNode = createNativeChannelMergerNode(nativeContext, _objectSpread(_objectSpread({}, audioNodeOptions), {}, {\n      channelCount: 1,\n      channelCountMode: channelCountMode,\n      numberOfInputs: 2\n    }));\n    var inputGainNode = createNativeGainNode(nativeContext, _objectSpread(_objectSpread({}, audioNodeOptions), {}, {\n      channelCount: channelCount,\n      channelCountMode: channelCountMode,\n      gain: 1\n    }));\n    var panGainNode = createNativeGainNode(nativeContext, {\n      channelCount: 1,\n      channelCountMode: 'explicit',\n      channelInterpretation: 'discrete',\n      gain: pan\n    });\n\n    var _buildInternalGraph = buildInternalGraph(nativeContext, channelCount, inputGainNode, panGainNode, channelMergerNode),\n        connectGraph = _buildInternalGraph.connectGraph,\n        disconnectGraph = _buildInternalGraph.disconnectGraph;\n\n    Object.defineProperty(panGainNode.gain, 'defaultValue', {\n      get: function get() {\n        return 0;\n      }\n    });\n    Object.defineProperty(panGainNode.gain, 'maxValue', {\n      get: function get() {\n        return 1;\n      }\n    });\n    Object.defineProperty(panGainNode.gain, 'minValue', {\n      get: function get() {\n        return -1;\n      }\n    });\n    var nativeStereoPannerNodeFakerFactory = {\n      get bufferSize() {\n        return undefined;\n      },\n\n      get channelCount() {\n        return inputGainNode.channelCount;\n      },\n\n      set channelCount(value) {\n        if (inputGainNode.channelCount !== value) {\n          if (isConnected) {\n            disconnectGraph();\n          }\n\n          var _buildInternalGraph2 = buildInternalGraph(nativeContext, value, inputGainNode, panGainNode, channelMergerNode);\n\n          connectGraph = _buildInternalGraph2.connectGraph;\n          disconnectGraph = _buildInternalGraph2.disconnectGraph;\n\n          if (isConnected) {\n            connectGraph();\n          }\n        }\n\n        inputGainNode.channelCount = value;\n      },\n\n      get channelCountMode() {\n        return inputGainNode.channelCountMode;\n      },\n\n      set channelCountMode(value) {\n        if (value === 'clamped-max' || value === 'max') {\n          throw createNotSupportedError();\n        }\n\n        inputGainNode.channelCountMode = value;\n      },\n\n      get channelInterpretation() {\n        return inputGainNode.channelInterpretation;\n      },\n\n      set channelInterpretation(value) {\n        inputGainNode.channelInterpretation = value;\n      },\n\n      get context() {\n        return inputGainNode.context;\n      },\n\n      get inputs() {\n        return [inputGainNode];\n      },\n\n      get numberOfInputs() {\n        return inputGainNode.numberOfInputs;\n      },\n\n      get numberOfOutputs() {\n        return inputGainNode.numberOfOutputs;\n      },\n\n      get pan() {\n        return panGainNode.gain;\n      },\n\n      addEventListener: function addEventListener() {\n        return inputGainNode.addEventListener(arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1], arguments.length <= 2 ? undefined : arguments[2]);\n      },\n      dispatchEvent: function dispatchEvent() {\n        return inputGainNode.dispatchEvent(arguments.length <= 0 ? undefined : arguments[0]);\n      },\n      removeEventListener: function removeEventListener() {\n        return inputGainNode.removeEventListener(arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1], arguments.length <= 2 ? undefined : arguments[2]);\n      }\n    };\n    var isConnected = false;\n\n    var whenConnected = function whenConnected() {\n      connectGraph();\n      isConnected = true;\n    };\n\n    var whenDisconnected = function whenDisconnected() {\n      disconnectGraph();\n      isConnected = false;\n    };\n\n    return monitorConnections(interceptConnections(nativeStereoPannerNodeFakerFactory, channelMergerNode), whenConnected, whenDisconnected);\n  };\n};","map":{"version":3,"mappings":"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","names":["interceptConnections","createNativeStereoPannerNodeFakerFactory","createNativeChannelMergerNode","createNativeChannelSplitterNode","createNativeGainNode","createNativeWaveShaperNode","createNotSupportedError","monitorConnections","CURVE_SIZE","DC_CURVE","Float32Array","HALF_PI","Math","PI","SINGLE_CHANNEL_OPTIONS","channelCount","channelCountMode","channelInterpretation","SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS","oversample","buildInternalGraphForMono","nativeContext","inputGainNode","panGainNode","channelMergerNode","leftWaveShaperCurve","rightWaveShaperCurve","i","x","cos","sin","leftGainNode","gain","leftWaveShaperNode","curve","panWaveShaperNode","rightGainNode","rightWaveShaperNode","connectGraph","connect","inputs","undefined","disconnectGraph","disconnect","buildInternalGraphForStereo","leftInputForLeftOutputWaveShaperCurve","leftInputForRightOutputWaveShaperCurve","rightInputForLeftOutputWaveShaperCurve","rightInputForRightOutputWaveShaperCurve","centerIndex","floor","channelSplitterNode","numberOfOutputs","leftInputForLeftOutputGainNode","leftInputForLeftOutputWaveShaperNode","leftInputForRightOutputGainNode","leftInputForRightOutputWaveShaperNode","rightInputForLeftOutputGainNode","rightInputForLeftOutputWaveShaperNode","rightInputForRightOutputGainNode","rightInputForRightOutputWaveShaperNode","buildInternalGraph","pan","audioNodeOptions","numberOfInputs","Object","defineProperty","get","nativeStereoPannerNodeFakerFactory","bufferSize","value","isConnected","context","addEventListener","dispatchEvent","removeEventListener","whenConnected","whenDisconnected"],"sources":["C:\\Users\\brigh\\storage\\js_project\\Gakugeki_WEB\\node_modules\\standardized-audio-context\\src\\factories\\native-stereo-panner-node-faker-factory.ts"],"sourcesContent":["import { interceptConnections } from '../helpers/intercept-connections';\nimport { INativeWaveShaperNodeFaker } from '../interfaces';\nimport {\n    TNativeAudioNode,\n    TNativeChannelMergerNode,\n    TNativeContext,\n    TNativeGainNode,\n    TNativeStereoPannerNode,\n    TNativeStereoPannerNodeFakerFactoryFactory\n} from '../types';\n\nexport const createNativeStereoPannerNodeFakerFactory: TNativeStereoPannerNodeFakerFactoryFactory = (\n    createNativeChannelMergerNode,\n    createNativeChannelSplitterNode,\n    createNativeGainNode,\n    createNativeWaveShaperNode,\n    createNotSupportedError,\n    monitorConnections\n) => {\n    // The curve has a size of 14bit plus 1 value to have an exact representation for zero. This value has been determined experimentally.\n    const CURVE_SIZE = 16385;\n    const DC_CURVE = new Float32Array([1, 1]);\n    const HALF_PI = Math.PI / 2;\n    const SINGLE_CHANNEL_OPTIONS = { channelCount: 1, channelCountMode: 'explicit', channelInterpretation: 'discrete' } as const;\n    const SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS = { ...SINGLE_CHANNEL_OPTIONS, oversample: 'none' } as const;\n\n    const buildInternalGraphForMono = (\n        nativeContext: TNativeContext,\n        inputGainNode: TNativeGainNode,\n        panGainNode: TNativeGainNode,\n        channelMergerNode: TNativeChannelMergerNode\n    ) => {\n        const leftWaveShaperCurve = new Float32Array(CURVE_SIZE);\n        const rightWaveShaperCurve = new Float32Array(CURVE_SIZE);\n\n        for (let i = 0; i < CURVE_SIZE; i += 1) {\n            const x = (i / (CURVE_SIZE - 1)) * HALF_PI;\n\n            leftWaveShaperCurve[i] = Math.cos(x);\n            rightWaveShaperCurve[i] = Math.sin(x);\n        }\n\n        const leftGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        // Bug #119: Safari does not fully support the WaveShaperNode.\n        const leftWaveShaperNode = <INativeWaveShaperNodeFaker>(\n            createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS, curve: leftWaveShaperCurve })\n        );\n        // Bug #119: Safari does not fully support the WaveShaperNode.\n        const panWaveShaperNode = <INativeWaveShaperNodeFaker>(\n            createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS, curve: DC_CURVE })\n        );\n        const rightGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        // Bug #119: Safari does not fully support the WaveShaperNode.\n        const rightWaveShaperNode = <INativeWaveShaperNodeFaker>(\n            createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS, curve: rightWaveShaperCurve })\n        );\n\n        return {\n            connectGraph(): void {\n                inputGainNode.connect(leftGainNode);\n                inputGainNode.connect(panWaveShaperNode.inputs === undefined ? panWaveShaperNode : panWaveShaperNode.inputs[0]);\n                inputGainNode.connect(rightGainNode);\n\n                panWaveShaperNode.connect(panGainNode);\n\n                panGainNode.connect(leftWaveShaperNode.inputs === undefined ? leftWaveShaperNode : leftWaveShaperNode.inputs[0]);\n                panGainNode.connect(rightWaveShaperNode.inputs === undefined ? rightWaveShaperNode : rightWaveShaperNode.inputs[0]);\n\n                leftWaveShaperNode.connect(leftGainNode.gain);\n                rightWaveShaperNode.connect(rightGainNode.gain);\n\n                leftGainNode.connect(channelMergerNode, 0, 0);\n                rightGainNode.connect(channelMergerNode, 0, 1);\n            },\n            disconnectGraph(): void {\n                inputGainNode.disconnect(leftGainNode);\n                inputGainNode.disconnect(panWaveShaperNode.inputs === undefined ? panWaveShaperNode : panWaveShaperNode.inputs[0]);\n                inputGainNode.disconnect(rightGainNode);\n\n                panWaveShaperNode.disconnect(panGainNode);\n\n                panGainNode.disconnect(leftWaveShaperNode.inputs === undefined ? leftWaveShaperNode : leftWaveShaperNode.inputs[0]);\n                panGainNode.disconnect(rightWaveShaperNode.inputs === undefined ? rightWaveShaperNode : rightWaveShaperNode.inputs[0]);\n\n                leftWaveShaperNode.disconnect(leftGainNode.gain);\n                rightWaveShaperNode.disconnect(rightGainNode.gain);\n\n                leftGainNode.disconnect(channelMergerNode, 0, 0);\n                rightGainNode.disconnect(channelMergerNode, 0, 1);\n            }\n        };\n    };\n\n    const buildInternalGraphForStereo = (\n        nativeContext: TNativeContext,\n        inputGainNode: TNativeGainNode,\n        panGainNode: TNativeGainNode,\n        channelMergerNode: TNativeChannelMergerNode\n    ) => {\n        const leftInputForLeftOutputWaveShaperCurve = new Float32Array(CURVE_SIZE);\n        const leftInputForRightOutputWaveShaperCurve = new Float32Array(CURVE_SIZE);\n        const rightInputForLeftOutputWaveShaperCurve = new Float32Array(CURVE_SIZE);\n        const rightInputForRightOutputWaveShaperCurve = new Float32Array(CURVE_SIZE);\n\n        const centerIndex = Math.floor(CURVE_SIZE / 2);\n\n        for (let i = 0; i < CURVE_SIZE; i += 1) {\n            if (i > centerIndex) {\n                const x = ((i - centerIndex) / (CURVE_SIZE - 1 - centerIndex)) * HALF_PI;\n\n                leftInputForLeftOutputWaveShaperCurve[i] = Math.cos(x);\n                leftInputForRightOutputWaveShaperCurve[i] = Math.sin(x);\n                rightInputForLeftOutputWaveShaperCurve[i] = 0;\n                rightInputForRightOutputWaveShaperCurve[i] = 1;\n            } else {\n                const x = (i / (CURVE_SIZE - 1 - centerIndex)) * HALF_PI;\n\n                leftInputForLeftOutputWaveShaperCurve[i] = 1;\n                leftInputForRightOutputWaveShaperCurve[i] = 0;\n                rightInputForLeftOutputWaveShaperCurve[i] = Math.cos(x);\n                rightInputForRightOutputWaveShaperCurve[i] = Math.sin(x);\n            }\n        }\n\n        const channelSplitterNode = createNativeChannelSplitterNode(nativeContext, {\n            channelCount: 2,\n            channelCountMode: 'explicit',\n            channelInterpretation: 'discrete',\n            numberOfOutputs: 2\n        });\n        const leftInputForLeftOutputGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        // Bug #119: Safari does not fully support the WaveShaperNode.\n        const leftInputForLeftOutputWaveShaperNode = <INativeWaveShaperNodeFaker>createNativeWaveShaperNode(nativeContext, {\n            ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS,\n            curve: leftInputForLeftOutputWaveShaperCurve\n        });\n        const leftInputForRightOutputGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        // Bug #119: Safari does not fully support the WaveShaperNode.\n        const leftInputForRightOutputWaveShaperNode = <INativeWaveShaperNodeFaker>createNativeWaveShaperNode(nativeContext, {\n            ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS,\n            curve: leftInputForRightOutputWaveShaperCurve\n        });\n        // Bug #119: Safari does not fully support the WaveShaperNode.\n        const panWaveShaperNode = <INativeWaveShaperNodeFaker>(\n            createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS, curve: DC_CURVE })\n        );\n        const rightInputForLeftOutputGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        // Bug #119: Safari does not fully support the WaveShaperNode.\n        const rightInputForLeftOutputWaveShaperNode = <INativeWaveShaperNodeFaker>createNativeWaveShaperNode(nativeContext, {\n            ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS,\n            curve: rightInputForLeftOutputWaveShaperCurve\n        });\n        const rightInputForRightOutputGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        // Bug #119: Safari does not fully support the WaveShaperNode.\n        const rightInputForRightOutputWaveShaperNode = <INativeWaveShaperNodeFaker>createNativeWaveShaperNode(nativeContext, {\n            ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS,\n            curve: rightInputForRightOutputWaveShaperCurve\n        });\n\n        return {\n            connectGraph(): void {\n                inputGainNode.connect(channelSplitterNode);\n                inputGainNode.connect(panWaveShaperNode.inputs === undefined ? panWaveShaperNode : panWaveShaperNode.inputs[0]);\n\n                channelSplitterNode.connect(leftInputForLeftOutputGainNode, 0);\n                channelSplitterNode.connect(leftInputForRightOutputGainNode, 0);\n                channelSplitterNode.connect(rightInputForLeftOutputGainNode, 1);\n                channelSplitterNode.connect(rightInputForRightOutputGainNode, 1);\n\n                panWaveShaperNode.connect(panGainNode);\n\n                panGainNode.connect(\n                    leftInputForLeftOutputWaveShaperNode.inputs === undefined\n                        ? leftInputForLeftOutputWaveShaperNode\n                        : leftInputForLeftOutputWaveShaperNode.inputs[0]\n                );\n                panGainNode.connect(\n                    leftInputForRightOutputWaveShaperNode.inputs === undefined\n                        ? leftInputForRightOutputWaveShaperNode\n                        : leftInputForRightOutputWaveShaperNode.inputs[0]\n                );\n                panGainNode.connect(\n                    rightInputForLeftOutputWaveShaperNode.inputs === undefined\n                        ? rightInputForLeftOutputWaveShaperNode\n                        : rightInputForLeftOutputWaveShaperNode.inputs[0]\n                );\n                panGainNode.connect(\n                    rightInputForRightOutputWaveShaperNode.inputs === undefined\n                        ? rightInputForRightOutputWaveShaperNode\n                        : rightInputForRightOutputWaveShaperNode.inputs[0]\n                );\n\n                leftInputForLeftOutputWaveShaperNode.connect(leftInputForLeftOutputGainNode.gain);\n                leftInputForRightOutputWaveShaperNode.connect(leftInputForRightOutputGainNode.gain);\n                rightInputForLeftOutputWaveShaperNode.connect(rightInputForLeftOutputGainNode.gain);\n                rightInputForRightOutputWaveShaperNode.connect(rightInputForRightOutputGainNode.gain);\n\n                leftInputForLeftOutputGainNode.connect(channelMergerNode, 0, 0);\n                rightInputForLeftOutputGainNode.connect(channelMergerNode, 0, 0);\n\n                leftInputForRightOutputGainNode.connect(channelMergerNode, 0, 1);\n                rightInputForRightOutputGainNode.connect(channelMergerNode, 0, 1);\n            },\n            disconnectGraph(): void {\n                inputGainNode.disconnect(channelSplitterNode);\n                inputGainNode.disconnect(panWaveShaperNode.inputs === undefined ? panWaveShaperNode : panWaveShaperNode.inputs[0]);\n\n                channelSplitterNode.disconnect(leftInputForLeftOutputGainNode, 0);\n                channelSplitterNode.disconnect(leftInputForRightOutputGainNode, 0);\n                channelSplitterNode.disconnect(rightInputForLeftOutputGainNode, 1);\n                channelSplitterNode.disconnect(rightInputForRightOutputGainNode, 1);\n\n                panWaveShaperNode.disconnect(panGainNode);\n\n                panGainNode.disconnect(\n                    leftInputForLeftOutputWaveShaperNode.inputs === undefined\n                        ? leftInputForLeftOutputWaveShaperNode\n                        : leftInputForLeftOutputWaveShaperNode.inputs[0]\n                );\n                panGainNode.disconnect(\n                    leftInputForRightOutputWaveShaperNode.inputs === undefined\n                        ? leftInputForRightOutputWaveShaperNode\n                        : leftInputForRightOutputWaveShaperNode.inputs[0]\n                );\n                panGainNode.disconnect(\n                    rightInputForLeftOutputWaveShaperNode.inputs === undefined\n                        ? rightInputForLeftOutputWaveShaperNode\n                        : rightInputForLeftOutputWaveShaperNode.inputs[0]\n                );\n                panGainNode.disconnect(\n                    rightInputForRightOutputWaveShaperNode.inputs === undefined\n                        ? rightInputForRightOutputWaveShaperNode\n                        : rightInputForRightOutputWaveShaperNode.inputs[0]\n                );\n\n                leftInputForLeftOutputWaveShaperNode.disconnect(leftInputForLeftOutputGainNode.gain);\n                leftInputForRightOutputWaveShaperNode.disconnect(leftInputForRightOutputGainNode.gain);\n                rightInputForLeftOutputWaveShaperNode.disconnect(rightInputForLeftOutputGainNode.gain);\n                rightInputForRightOutputWaveShaperNode.disconnect(rightInputForRightOutputGainNode.gain);\n\n                leftInputForLeftOutputGainNode.disconnect(channelMergerNode, 0, 0);\n                rightInputForLeftOutputGainNode.disconnect(channelMergerNode, 0, 0);\n\n                leftInputForRightOutputGainNode.disconnect(channelMergerNode, 0, 1);\n                rightInputForRightOutputGainNode.disconnect(channelMergerNode, 0, 1);\n            }\n        };\n    };\n\n    const buildInternalGraph = (\n        nativeContext: TNativeContext,\n        channelCount: number,\n        inputGainNode: TNativeGainNode,\n        panGainNode: TNativeGainNode,\n        channelMergerNode: TNativeChannelMergerNode\n    ) => {\n        if (channelCount === 1) {\n            return buildInternalGraphForMono(nativeContext, inputGainNode, panGainNode, channelMergerNode);\n        }\n\n        if (channelCount === 2) {\n            return buildInternalGraphForStereo(nativeContext, inputGainNode, panGainNode, channelMergerNode);\n        }\n\n        throw createNotSupportedError();\n    };\n\n    return (nativeContext, { channelCount, channelCountMode, pan, ...audioNodeOptions }) => {\n        if (channelCountMode === 'max') {\n            throw createNotSupportedError();\n        }\n\n        const channelMergerNode = createNativeChannelMergerNode(nativeContext, {\n            ...audioNodeOptions,\n            channelCount: 1,\n            channelCountMode,\n            numberOfInputs: 2\n        });\n        const inputGainNode = createNativeGainNode(nativeContext, { ...audioNodeOptions, channelCount, channelCountMode, gain: 1 });\n        const panGainNode = createNativeGainNode(nativeContext, {\n            channelCount: 1,\n            channelCountMode: 'explicit',\n            channelInterpretation: 'discrete',\n            gain: pan\n        });\n\n        let { connectGraph, disconnectGraph } = buildInternalGraph(\n            nativeContext,\n            channelCount,\n            inputGainNode,\n            panGainNode,\n            channelMergerNode\n        );\n\n        Object.defineProperty(panGainNode.gain, 'defaultValue', { get: () => 0 });\n        Object.defineProperty(panGainNode.gain, 'maxValue', { get: () => 1 });\n        Object.defineProperty(panGainNode.gain, 'minValue', { get: () => -1 });\n\n        const nativeStereoPannerNodeFakerFactory = {\n            get bufferSize(): undefined {\n                return undefined;\n            },\n            get channelCount(): number {\n                return inputGainNode.channelCount;\n            },\n            set channelCount(value) {\n                if (inputGainNode.channelCount !== value) {\n                    if (isConnected) {\n                        disconnectGraph();\n                    }\n\n                    ({ connectGraph, disconnectGraph } = buildInternalGraph(\n                        nativeContext,\n                        value,\n                        inputGainNode,\n                        panGainNode,\n                        channelMergerNode\n                    ));\n\n                    if (isConnected) {\n                        connectGraph();\n                    }\n                }\n\n                inputGainNode.channelCount = value;\n            },\n            get channelCountMode(): TNativeStereoPannerNode['channelCountMode'] {\n                return inputGainNode.channelCountMode;\n            },\n            set channelCountMode(value) {\n                if (value === 'clamped-max' || value === 'max') {\n                    throw createNotSupportedError();\n                }\n\n                inputGainNode.channelCountMode = value;\n            },\n            get channelInterpretation(): TNativeStereoPannerNode['channelInterpretation'] {\n                return inputGainNode.channelInterpretation;\n            },\n            set channelInterpretation(value) {\n                inputGainNode.channelInterpretation = value;\n            },\n            get context(): TNativeStereoPannerNode['context'] {\n                return inputGainNode.context;\n            },\n            get inputs(): TNativeAudioNode[] {\n                return [inputGainNode];\n            },\n            get numberOfInputs(): number {\n                return inputGainNode.numberOfInputs;\n            },\n            get numberOfOutputs(): number {\n                return inputGainNode.numberOfOutputs;\n            },\n            get pan(): TNativeStereoPannerNode['pan'] {\n                return panGainNode.gain;\n            },\n            addEventListener(...args: any[]): void {\n                return inputGainNode.addEventListener(args[0], args[1], args[2]);\n            },\n            dispatchEvent(...args: any[]): boolean {\n                return inputGainNode.dispatchEvent(args[0]);\n            },\n            removeEventListener(...args: any[]): void {\n                return inputGainNode.removeEventListener(args[0], args[1], args[2]);\n            }\n        };\n\n        let isConnected = false;\n\n        const whenConnected = () => {\n            connectGraph();\n\n            isConnected = true;\n        };\n        const whenDisconnected = () => {\n            disconnectGraph();\n\n            isConnected = false;\n        };\n\n        return monitorConnections(\n            interceptConnections(nativeStereoPannerNodeFakerFactory, channelMergerNode),\n            whenConnected,\n            whenDisconnected\n        );\n    };\n};\n"]},"metadata":{},"sourceType":"module"}