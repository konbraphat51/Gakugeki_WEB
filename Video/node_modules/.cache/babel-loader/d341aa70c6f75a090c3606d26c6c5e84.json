{"ast":null,"code":"export var createConnectAudioParam = function createConnectAudioParam(renderInputsOfAudioParam) {\n  return function (nativeOfflineAudioContext, audioParam, nativeAudioParam) {\n    return renderInputsOfAudioParam(audioParam, nativeOfflineAudioContext, nativeAudioParam);\n  };\n};","map":{"version":3,"mappings":"AAEA,OAAO,IAAMA,uBAAuB,GAA8B,SAArDA,uBAAqD,CAACC,wBAAD,EAA6B;EAC3F,OAAO,UAACC,yBAAD,EAA4BC,UAA5B,EAAwCC,gBAAxC,EAA4D;IAC/D,OAAOH,wBAAwB,CAACE,UAAD,EAAaD,yBAAb,EAAwCE,gBAAxC,CAA/B;EACH,CAFD;AAGH,CAJM","names":["createConnectAudioParam","renderInputsOfAudioParam","nativeOfflineAudioContext","audioParam","nativeAudioParam"],"sources":["C:\\Users\\brigh\\storage\\js_project\\Gakugeki_WEB\\node_modules\\standardized-audio-context\\src\\factories\\connect-audio-param.ts"],"sourcesContent":["import { TConnectAudioParamFactory } from '../types';\n\nexport const createConnectAudioParam: TConnectAudioParamFactory = (renderInputsOfAudioParam) => {\n    return (nativeOfflineAudioContext, audioParam, nativeAudioParam) => {\n        return renderInputsOfAudioParam(audioParam, nativeOfflineAudioContext, nativeAudioParam);\n    };\n};\n"]},"metadata":{},"sourceType":"module"}