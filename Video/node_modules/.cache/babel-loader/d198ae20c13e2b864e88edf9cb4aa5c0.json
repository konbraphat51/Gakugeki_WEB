{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { isNativeAudioNodeFaker } from '../guards/native-audio-node-faker';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport var createStereoPannerNodeRendererFactory = function createStereoPannerNodeRendererFactory(connectAudioParam, createNativeStereoPannerNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) {\n  return function () {\n    var renderedNativeStereoPannerNodes = new WeakMap();\n\n    var createStereoPannerNode = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(proxy, nativeOfflineAudioContext) {\n        var nativeStereoPannerNode, nativeStereoPannerNodeIsOwnedByContext, options;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                nativeStereoPannerNode = getNativeAudioNode(proxy);\n                /*\n                 * If the initially used nativeStereoPannerNode was not constructed on the same OfflineAudioContext it needs to be created\n                 * again.\n                 */\n\n                nativeStereoPannerNodeIsOwnedByContext = isOwnedByContext(nativeStereoPannerNode, nativeOfflineAudioContext);\n\n                if (!nativeStereoPannerNodeIsOwnedByContext) {\n                  options = {\n                    channelCount: nativeStereoPannerNode.channelCount,\n                    channelCountMode: nativeStereoPannerNode.channelCountMode,\n                    channelInterpretation: nativeStereoPannerNode.channelInterpretation,\n                    pan: nativeStereoPannerNode.pan.value\n                  };\n                  nativeStereoPannerNode = createNativeStereoPannerNode(nativeOfflineAudioContext, options);\n                }\n\n                renderedNativeStereoPannerNodes.set(nativeOfflineAudioContext, nativeStereoPannerNode);\n\n                if (nativeStereoPannerNodeIsOwnedByContext) {\n                  _context.next = 9;\n                  break;\n                }\n\n                _context.next = 7;\n                return renderAutomation(nativeOfflineAudioContext, proxy.pan, nativeStereoPannerNode.pan);\n\n              case 7:\n                _context.next = 11;\n                break;\n\n              case 9:\n                _context.next = 11;\n                return connectAudioParam(nativeOfflineAudioContext, proxy.pan, nativeStereoPannerNode.pan);\n\n              case 11:\n                if (!isNativeAudioNodeFaker(nativeStereoPannerNode)) {\n                  _context.next = 16;\n                  break;\n                }\n\n                _context.next = 14;\n                return renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeStereoPannerNode.inputs[0]);\n\n              case 14:\n                _context.next = 18;\n                break;\n\n              case 16:\n                _context.next = 18;\n                return renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeStereoPannerNode);\n\n              case 18:\n                return _context.abrupt(\"return\", nativeStereoPannerNode);\n\n              case 19:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function createStereoPannerNode(_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    return {\n      render: function render(proxy, nativeOfflineAudioContext) {\n        var renderedNativeStereoPannerNode = renderedNativeStereoPannerNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeStereoPannerNode !== undefined) {\n          return Promise.resolve(renderedNativeStereoPannerNode);\n        }\n\n        return createStereoPannerNode(proxy, nativeOfflineAudioContext);\n      }\n    };\n  };\n};","map":{"version":3,"mappings":";;AAAA,SAASA,sBAAT,QAAuC,mCAAvC;AACA,SAASC,gBAAT,QAAiC,gCAAjC;AAIA,OAAO,IAAMC,qCAAqC,GAA4C,SAAjFA,qCAAiF,CAC1FC,iBAD0F,EAE1FC,4BAF0F,EAG1FC,kBAH0F,EAI1FC,gBAJ0F,EAK1FC,uBAL0F,EAM1F;EACA,OAAO,YAAmE;IACtE,IAAMC,+BAA+B,GAAG,IAAIC,OAAJ,EAAxC;;IAEA,IAAMC,sBAAsB;MAAA,sEAAG,iBAAOC,KAAP,EAAoCC,yBAApC;QAAA;QAAA;UAAA;YAAA;cAAA;gBACvBC,sBADuB,GACER,kBAAkB,CAA6BM,KAA7B,CADpB;gBAG3B;;;;;gBAIMG,sCAPqB,GAOoBb,gBAAgB,CAACY,sBAAD,EAAyBD,yBAAzB,CAPpC;;gBAS3B,IAAI,CAACE,sCAAL,EAA6C;kBACnCC,OADmC,GACzB;oBACZC,YAAY,EAAEH,sBAAsB,CAACG,YADzB;oBAEZC,gBAAgB,EAAEJ,sBAAsB,CAACI,gBAF7B;oBAGZC,qBAAqB,EAAEL,sBAAsB,CAACK,qBAHlC;oBAIZC,GAAG,EAAEN,sBAAsB,CAACM,GAAvB,CAA2BC;kBAJpB,CADyB;kBAQzCP,sBAAsB,GAAGT,4BAA4B,CAACQ,yBAAD,EAA4BG,OAA5B,CAArD;gBACH;;gBAEDP,+BAA+B,CAACa,GAAhC,CAAoCT,yBAApC,EAA+DC,sBAA/D;;gBApB2B,IAsBtBC,sCAtBsB;kBAAA;kBAAA;gBAAA;;gBAAA;gBAAA,OAuBjBR,gBAAgB,CAACM,yBAAD,EAA4BD,KAAK,CAACQ,GAAlC,EAAuCN,sBAAsB,CAACM,GAA9D,CAvBC;;cAAA;gBAAA;gBAAA;;cAAA;gBAAA;gBAAA,OAyBjBhB,iBAAiB,CAACS,yBAAD,EAA4BD,KAAK,CAACQ,GAAlC,EAAuCN,sBAAsB,CAACM,GAA9D,CAzBA;;cAAA;gBAAA,KA4BvBnB,sBAAsB,CAACa,sBAAD,CA5BC;kBAAA;kBAAA;gBAAA;;gBAAA;gBAAA,OA6BjBN,uBAAuB,CAACI,KAAD,EAAQC,yBAAR,EAAmCC,sBAAsB,CAACS,MAAvB,CAA8B,CAA9B,CAAnC,CA7BN;;cAAA;gBAAA;gBAAA;;cAAA;gBAAA;gBAAA,OA+BjBf,uBAAuB,CAACI,KAAD,EAAQC,yBAAR,EAAmCC,sBAAnC,CA/BN;;cAAA;gBAAA,iCAkCpBA,sBAlCoB;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CAAH;;MAAA,gBAAtBH,sBAAsB;QAAA;MAAA;IAAA,GAA5B;;IAqCA,OAAO;MACHa,MADG,kBACIZ,KADJ,EACiCC,yBADjC,EACsF;QACrF,IAAMY,8BAA8B,GAAGhB,+BAA+B,CAACiB,GAAhC,CAAoCb,yBAApC,CAAvC;;QAEA,IAAIY,8BAA8B,KAAKE,SAAvC,EAAkD;UAC9C,OAAOC,OAAO,CAACC,OAAR,CAAgBJ,8BAAhB,CAAP;QACH;;QAED,OAAOd,sBAAsB,CAACC,KAAD,EAAQC,yBAAR,CAA7B;MACH;IATE,CAAP;EAWH,CAnDD;AAoDH,CA3DM","names":["isNativeAudioNodeFaker","isOwnedByContext","createStereoPannerNodeRendererFactory","connectAudioParam","createNativeStereoPannerNode","getNativeAudioNode","renderAutomation","renderInputsOfAudioNode","renderedNativeStereoPannerNodes","WeakMap","createStereoPannerNode","proxy","nativeOfflineAudioContext","nativeStereoPannerNode","nativeStereoPannerNodeIsOwnedByContext","options","channelCount","channelCountMode","channelInterpretation","pan","value","set","inputs","render","renderedNativeStereoPannerNode","get","undefined","Promise","resolve"],"sources":["C:\\Users\\brigh\\storage\\js_project\\Gakugeki_WEB\\node_modules\\standardized-audio-context\\src\\factories\\stereo-panner-node-renderer-factory.ts"],"sourcesContent":["import { isNativeAudioNodeFaker } from '../guards/native-audio-node-faker';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { IMinimalOfflineAudioContext, IOfflineAudioContext, IStereoPannerNode } from '../interfaces';\nimport { TNativeOfflineAudioContext, TNativeStereoPannerNode, TStereoPannerNodeRendererFactoryFactory } from '../types';\n\nexport const createStereoPannerNodeRendererFactory: TStereoPannerNodeRendererFactoryFactory = (\n    connectAudioParam,\n    createNativeStereoPannerNode,\n    getNativeAudioNode,\n    renderAutomation,\n    renderInputsOfAudioNode\n) => {\n    return <T extends IMinimalOfflineAudioContext | IOfflineAudioContext>() => {\n        const renderedNativeStereoPannerNodes = new WeakMap<TNativeOfflineAudioContext, TNativeStereoPannerNode>();\n\n        const createStereoPannerNode = async (proxy: IStereoPannerNode<T>, nativeOfflineAudioContext: TNativeOfflineAudioContext) => {\n            let nativeStereoPannerNode = getNativeAudioNode<T, TNativeStereoPannerNode>(proxy);\n\n            /*\n             * If the initially used nativeStereoPannerNode was not constructed on the same OfflineAudioContext it needs to be created\n             * again.\n             */\n            const nativeStereoPannerNodeIsOwnedByContext = isOwnedByContext(nativeStereoPannerNode, nativeOfflineAudioContext);\n\n            if (!nativeStereoPannerNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeStereoPannerNode.channelCount,\n                    channelCountMode: nativeStereoPannerNode.channelCountMode,\n                    channelInterpretation: nativeStereoPannerNode.channelInterpretation,\n                    pan: nativeStereoPannerNode.pan.value\n                };\n\n                nativeStereoPannerNode = createNativeStereoPannerNode(nativeOfflineAudioContext, options);\n            }\n\n            renderedNativeStereoPannerNodes.set(nativeOfflineAudioContext, nativeStereoPannerNode);\n\n            if (!nativeStereoPannerNodeIsOwnedByContext) {\n                await renderAutomation(nativeOfflineAudioContext, proxy.pan, nativeStereoPannerNode.pan);\n            } else {\n                await connectAudioParam(nativeOfflineAudioContext, proxy.pan, nativeStereoPannerNode.pan);\n            }\n\n            if (isNativeAudioNodeFaker(nativeStereoPannerNode)) {\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeStereoPannerNode.inputs[0]);\n            } else {\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeStereoPannerNode);\n            }\n\n            return nativeStereoPannerNode;\n        };\n\n        return {\n            render(proxy: IStereoPannerNode<T>, nativeOfflineAudioContext: TNativeOfflineAudioContext): Promise<TNativeStereoPannerNode> {\n                const renderedNativeStereoPannerNode = renderedNativeStereoPannerNodes.get(nativeOfflineAudioContext);\n\n                if (renderedNativeStereoPannerNode !== undefined) {\n                    return Promise.resolve(renderedNativeStereoPannerNode);\n                }\n\n                return createStereoPannerNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n"]},"metadata":{},"sourceType":"module"}