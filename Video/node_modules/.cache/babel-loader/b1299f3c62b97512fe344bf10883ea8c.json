{"ast":null,"code":"var handler = {\n  construct: function construct() {\n    return handler;\n  }\n};\nexport var isConstructible = function isConstructible(constructible) {\n  try {\n    var proxy = new Proxy(constructible, handler);\n    new proxy(); // tslint:disable-line:no-unused-expression\n  } catch (_unused) {\n    return false;\n  }\n\n  return true;\n};","map":{"version":3,"mappings":"AAEA,IAAMA,OAAO,GAAG;EACZC,SADY,uBACH;IACL,OAAOD,OAAP;EACH;AAHW,CAAhB;AAMA,OAAO,IAAME,eAAe,GAAG,SAAlBA,eAAkB,CAACC,aAAD,EAAyC;EACpE,IAAI;IACA,IAAMC,KAAK,GAAG,IAAIC,KAAJ,CAAUF,aAAV,EAAyBH,OAAzB,CAAd;IAEA,IAAII,KAAJ,GAHA,CAGa;EAChB,CAJD,CAIE,gBAAM;IACJ,OAAO,KAAP;EACH;;EAED,OAAO,IAAP;AACH,CAVM","names":["handler","construct","isConstructible","constructible","proxy","Proxy"],"sources":["C:\\Users\\brigh\\storage\\js_project\\Gakugeki_WEB\\node_modules\\standardized-audio-context\\src\\helpers\\is-constructible.ts"],"sourcesContent":["import { TConstructor } from '../types';\n\nconst handler = {\n    construct(): any {\n        return handler;\n    }\n};\n\nexport const isConstructible = (constructible: TConstructor): boolean => {\n    try {\n        const proxy = new Proxy(constructible, handler);\n\n        new proxy(); // tslint:disable-line:no-unused-expression\n    } catch {\n        return false;\n    }\n\n    return true;\n};\n"]},"metadata":{},"sourceType":"module"}