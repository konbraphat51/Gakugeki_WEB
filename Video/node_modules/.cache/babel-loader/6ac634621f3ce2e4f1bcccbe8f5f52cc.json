{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { isNativeAudioNodeFaker } from '../guards/native-audio-node-faker';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport var createWaveShaperNodeRendererFactory = function createWaveShaperNodeRendererFactory(createNativeWaveShaperNode, getNativeAudioNode, renderInputsOfAudioNode) {\n  return function () {\n    var renderedNativeWaveShaperNodes = new WeakMap();\n\n    var createWaveShaperNode = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(proxy, nativeOfflineAudioContext) {\n        var nativeWaveShaperNode, nativeWaveShaperNodeIsOwnedByContext, options;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                nativeWaveShaperNode = getNativeAudioNode(proxy); // If the initially used nativeWaveShaperNode was not constructed on the same OfflineAudioContext it needs to be created again.\n\n                nativeWaveShaperNodeIsOwnedByContext = isOwnedByContext(nativeWaveShaperNode, nativeOfflineAudioContext);\n\n                if (!nativeWaveShaperNodeIsOwnedByContext) {\n                  options = {\n                    channelCount: nativeWaveShaperNode.channelCount,\n                    channelCountMode: nativeWaveShaperNode.channelCountMode,\n                    channelInterpretation: nativeWaveShaperNode.channelInterpretation,\n                    curve: nativeWaveShaperNode.curve,\n                    oversample: nativeWaveShaperNode.oversample\n                  };\n                  nativeWaveShaperNode = createNativeWaveShaperNode(nativeOfflineAudioContext, options);\n                }\n\n                renderedNativeWaveShaperNodes.set(nativeOfflineAudioContext, nativeWaveShaperNode);\n\n                if (!isNativeAudioNodeFaker(nativeWaveShaperNode)) {\n                  _context.next = 9;\n                  break;\n                }\n\n                _context.next = 7;\n                return renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeWaveShaperNode.inputs[0]);\n\n              case 7:\n                _context.next = 11;\n                break;\n\n              case 9:\n                _context.next = 11;\n                return renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeWaveShaperNode);\n\n              case 11:\n                return _context.abrupt(\"return\", nativeWaveShaperNode);\n\n              case 12:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function createWaveShaperNode(_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    return {\n      render: function render(proxy, nativeOfflineAudioContext) {\n        var renderedNativeWaveShaperNode = renderedNativeWaveShaperNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeWaveShaperNode !== undefined) {\n          return Promise.resolve(renderedNativeWaveShaperNode);\n        }\n\n        return createWaveShaperNode(proxy, nativeOfflineAudioContext);\n      }\n    };\n  };\n};","map":{"version":3,"mappings":";;AAAA,SAASA,sBAAT,QAAuC,mCAAvC;AACA,SAASC,gBAAT,QAAiC,gCAAjC;AAIA,OAAO,IAAMC,mCAAmC,GAA0C,SAA7EA,mCAA6E,CACtFC,0BADsF,EAEtFC,kBAFsF,EAGtFC,uBAHsF,EAItF;EACA,OAAO,YAAmE;IACtE,IAAMC,6BAA6B,GAAG,IAAIC,OAAJ,EAAtC;;IAEA,IAAMC,oBAAoB;MAAA,sEAAG,iBAAOC,KAAP,EAAkCC,yBAAlC;QAAA;QAAA;UAAA;YAAA;cAAA;gBACrBC,oBADqB,GACEP,kBAAkB,CAA2BK,KAA3B,CADpB,EAGzB;;gBACMG,oCAJmB,GAIoBX,gBAAgB,CAACU,oBAAD,EAAuBD,yBAAvB,CAJpC;;gBAMzB,IAAI,CAACE,oCAAL,EAA2C;kBACjCC,OADiC,GACvB;oBACZC,YAAY,EAAEH,oBAAoB,CAACG,YADvB;oBAEZC,gBAAgB,EAAEJ,oBAAoB,CAACI,gBAF3B;oBAGZC,qBAAqB,EAAEL,oBAAoB,CAACK,qBAHhC;oBAIZC,KAAK,EAAEN,oBAAoB,CAACM,KAJhB;oBAKZC,UAAU,EAAEP,oBAAoB,CAACO;kBALrB,CADuB;kBASvCP,oBAAoB,GAAGR,0BAA0B,CAACO,yBAAD,EAA4BG,OAA5B,CAAjD;gBACH;;gBAEDP,6BAA6B,CAACa,GAA9B,CAAkCT,yBAAlC,EAA6DC,oBAA7D;;gBAlByB,KAoBrBX,sBAAsB,CAACW,oBAAD,CApBD;kBAAA;kBAAA;gBAAA;;gBAAA;gBAAA,OAqBfN,uBAAuB,CAACI,KAAD,EAAQC,yBAAR,EAAmCC,oBAAoB,CAACS,MAArB,CAA4B,CAA5B,CAAnC,CArBR;;cAAA;gBAAA;gBAAA;;cAAA;gBAAA;gBAAA,OAuBff,uBAAuB,CAACI,KAAD,EAAQC,yBAAR,EAAmCC,oBAAnC,CAvBR;;cAAA;gBAAA,iCA0BlBA,oBA1BkB;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CAAH;;MAAA,gBAApBH,oBAAoB;QAAA;MAAA;IAAA,GAA1B;;IA6BA,OAAO;MACHa,MADG,kBACIZ,KADJ,EAC+BC,yBAD/B,EACoF;QACnF,IAAMY,4BAA4B,GAAGhB,6BAA6B,CAACiB,GAA9B,CAAkCb,yBAAlC,CAArC;;QAEA,IAAIY,4BAA4B,KAAKE,SAArC,EAAgD;UAC5C,OAAOC,OAAO,CAACC,OAAR,CAAgBJ,4BAAhB,CAAP;QACH;;QAED,OAAOd,oBAAoB,CAACC,KAAD,EAAQC,yBAAR,CAA3B;MACH;IATE,CAAP;EAWH,CA3CD;AA4CH,CAjDM","names":["isNativeAudioNodeFaker","isOwnedByContext","createWaveShaperNodeRendererFactory","createNativeWaveShaperNode","getNativeAudioNode","renderInputsOfAudioNode","renderedNativeWaveShaperNodes","WeakMap","createWaveShaperNode","proxy","nativeOfflineAudioContext","nativeWaveShaperNode","nativeWaveShaperNodeIsOwnedByContext","options","channelCount","channelCountMode","channelInterpretation","curve","oversample","set","inputs","render","renderedNativeWaveShaperNode","get","undefined","Promise","resolve"],"sources":["C:\\Users\\brigh\\storage\\js_project\\Gakugeki_WEB\\node_modules\\standardized-audio-context\\src\\factories\\wave-shaper-node-renderer-factory.ts"],"sourcesContent":["import { isNativeAudioNodeFaker } from '../guards/native-audio-node-faker';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { IMinimalOfflineAudioContext, IOfflineAudioContext, IWaveShaperNode } from '../interfaces';\nimport { TNativeOfflineAudioContext, TNativeWaveShaperNode, TWaveShaperNodeRendererFactoryFactory } from '../types';\n\nexport const createWaveShaperNodeRendererFactory: TWaveShaperNodeRendererFactoryFactory = (\n    createNativeWaveShaperNode,\n    getNativeAudioNode,\n    renderInputsOfAudioNode\n) => {\n    return <T extends IMinimalOfflineAudioContext | IOfflineAudioContext>() => {\n        const renderedNativeWaveShaperNodes = new WeakMap<TNativeOfflineAudioContext, TNativeWaveShaperNode>();\n\n        const createWaveShaperNode = async (proxy: IWaveShaperNode<T>, nativeOfflineAudioContext: TNativeOfflineAudioContext) => {\n            let nativeWaveShaperNode = getNativeAudioNode<T, TNativeWaveShaperNode>(proxy);\n\n            // If the initially used nativeWaveShaperNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeWaveShaperNodeIsOwnedByContext = isOwnedByContext(nativeWaveShaperNode, nativeOfflineAudioContext);\n\n            if (!nativeWaveShaperNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeWaveShaperNode.channelCount,\n                    channelCountMode: nativeWaveShaperNode.channelCountMode,\n                    channelInterpretation: nativeWaveShaperNode.channelInterpretation,\n                    curve: nativeWaveShaperNode.curve,\n                    oversample: nativeWaveShaperNode.oversample\n                };\n\n                nativeWaveShaperNode = createNativeWaveShaperNode(nativeOfflineAudioContext, options);\n            }\n\n            renderedNativeWaveShaperNodes.set(nativeOfflineAudioContext, nativeWaveShaperNode);\n\n            if (isNativeAudioNodeFaker(nativeWaveShaperNode)) {\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeWaveShaperNode.inputs[0]);\n            } else {\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeWaveShaperNode);\n            }\n\n            return nativeWaveShaperNode;\n        };\n\n        return {\n            render(proxy: IWaveShaperNode<T>, nativeOfflineAudioContext: TNativeOfflineAudioContext): Promise<TNativeWaveShaperNode> {\n                const renderedNativeWaveShaperNode = renderedNativeWaveShaperNodes.get(nativeOfflineAudioContext);\n\n                if (renderedNativeWaveShaperNode !== undefined) {\n                    return Promise.resolve(renderedNativeWaveShaperNode);\n                }\n\n                return createWaveShaperNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n"]},"metadata":{},"sourceType":"module"}