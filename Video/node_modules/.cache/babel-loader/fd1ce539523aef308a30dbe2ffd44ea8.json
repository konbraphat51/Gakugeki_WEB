{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { createBroker } from 'broker-factory';\nimport { addUniqueNumber } from 'fast-unique-numbers';\n/*\n * @todo Explicitly referencing the barrel file seems to be necessary when enabling the\n * isolatedModules compiler option.\n */\n\nexport * from './interfaces/index';\nexport * from './types/index';\nvar encoderIds = new Set();\nexport var wrap = createBroker({\n  encode: function encode(_ref) {\n    var call = _ref.call;\n    return /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(encoderId, timeslice) {\n        var arrayBuffers;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return call('encode', {\n                  encoderId: encoderId,\n                  timeslice: timeslice\n                });\n\n              case 2:\n                arrayBuffers = _context.sent;\n                encoderIds.delete(encoderId);\n                return _context.abrupt(\"return\", arrayBuffers);\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x, _x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n  },\n  instantiate: function instantiate(_ref3) {\n    var call = _ref3.call;\n    return /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(mimeType, sampleRate) {\n        var encoderId, port;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                encoderId = addUniqueNumber(encoderIds);\n                _context2.next = 3;\n                return call('instantiate', {\n                  encoderId: encoderId,\n                  mimeType: mimeType,\n                  sampleRate: sampleRate\n                });\n\n              case 3:\n                port = _context2.sent;\n                return _context2.abrupt(\"return\", {\n                  encoderId: encoderId,\n                  port: port\n                });\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x3, _x4) {\n        return _ref4.apply(this, arguments);\n      };\n    }();\n  },\n  register: function register(_ref5) {\n    var call = _ref5.call;\n    return function (port) {\n      return call('register', {\n        port: port\n      }, [port]);\n    };\n  }\n});\nexport var load = function load(url) {\n  var worker = new Worker(url);\n  return wrap(worker);\n};","map":{"version":3,"mappings":";;AAAA,SAASA,YAAT,QAA6B,gBAA7B;AACA,SAASC,eAAT,QAAgC,qBAAhC;AAKA;;;;;AAIA,cAAc,oBAAd;AACA,cAAc,eAAd;AAEA,IAAMC,UAAU,GAAgB,IAAIC,GAAJ,EAAhC;AAEA,OAAO,IAAMC,IAAI,GAAmCJ,YAAY,CAAuE;EACnIK,MAAM,EAAE,sBAAa;IAAA,IAAVC,IAAU,QAAVA,IAAU;IACjB;MAAA,uEAAO,iBAAOC,SAAP,EAAkBC,SAAlB;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA,OACwBF,IAAI,CAAC,QAAD,EAAW;kBAAEC,SAAS,EAATA,SAAF;kBAAaC,SAAS,EAATA;gBAAb,CAAX,CAD5B;;cAAA;gBACGC,YADH;gBAGHP,UAAU,CAACQ,MAAX,CAAkBH,SAAlB;gBAHG,iCAKIE,YALJ;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CAAP;;MAAA;QAAA;MAAA;IAAA;EAOH,CATkI;EAUnIE,WAAW,EAAE,4BAAa;IAAA,IAAVL,IAAU,SAAVA,IAAU;IACtB;MAAA,uEAAO,kBAAOM,QAAP,EAAiBC,UAAjB;QAAA;QAAA;UAAA;YAAA;cAAA;gBACGN,SADH,GACeN,eAAe,CAACC,UAAD,CAD9B;gBAAA;gBAAA,OAEgBI,IAAI,CAAC,aAAD,EAAgB;kBAAEC,SAAS,EAATA,SAAF;kBAAaK,QAAQ,EAARA,QAAb;kBAAuBC,UAAU,EAAVA;gBAAvB,CAAhB,CAFpB;;cAAA;gBAEGC,IAFH;gBAAA,kCAII;kBAAEP,SAAS,EAATA,SAAF;kBAAaO,IAAI,EAAJA;gBAAb,CAJJ;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CAAP;;MAAA;QAAA;MAAA;IAAA;EAMH,CAjBkI;EAkBnIC,QAAQ,EAAE,yBAAa;IAAA,IAAVT,IAAU,SAAVA,IAAU;IACnB,OAAO,UAACQ,IAAD,EAAS;MACZ,OAAOR,IAAI,CAAC,UAAD,EAAa;QAAEQ,IAAI,EAAJA;MAAF,CAAb,EAAuB,CAACA,IAAD,CAAvB,CAAX;IACH,CAFD;EAGH;AAtBkI,CAAvE,CAAzD;AAyBP,OAAO,IAAME,IAAI,GAAkC,SAAtCA,IAAsC,CAACC,GAAD,EAAgB;EAC/D,IAAMC,MAAM,GAAG,IAAIC,MAAJ,CAAWF,GAAX,CAAf;EAEA,OAAOb,IAAI,CAACc,MAAD,CAAX;AACH,CAJM","names":["createBroker","addUniqueNumber","encoderIds","Set","wrap","encode","call","encoderId","timeslice","arrayBuffers","delete","instantiate","mimeType","sampleRate","port","register","load","url","worker","Worker"],"sources":["C:\\Users\\brigh\\storage\\js_project\\Gakugeki_WEB\\node_modules\\media-encoder-host-broker\\src\\module.ts"],"sourcesContent":["import { createBroker } from 'broker-factory';\nimport { addUniqueNumber } from 'fast-unique-numbers';\nimport { TMediaEncoderHostWorkerDefinition } from 'media-encoder-host-worker';\nimport { IMediaEncoderHostBrokerDefinition } from './interfaces';\nimport { TMediaEncoderHostBrokerLoader, TMediaEncoderHostBrokerWrapper } from './types';\n\n/*\n * @todo Explicitly referencing the barrel file seems to be necessary when enabling the\n * isolatedModules compiler option.\n */\nexport * from './interfaces/index';\nexport * from './types/index';\n\nconst encoderIds: Set<number> = new Set();\n\nexport const wrap: TMediaEncoderHostBrokerWrapper = createBroker<IMediaEncoderHostBrokerDefinition, TMediaEncoderHostWorkerDefinition>({\n    encode: ({ call }) => {\n        return async (encoderId, timeslice) => {\n            const arrayBuffers = await call('encode', { encoderId, timeslice });\n\n            encoderIds.delete(encoderId);\n\n            return arrayBuffers;\n        };\n    },\n    instantiate: ({ call }) => {\n        return async (mimeType, sampleRate) => {\n            const encoderId = addUniqueNumber(encoderIds);\n            const port = await call('instantiate', { encoderId, mimeType, sampleRate });\n\n            return { encoderId, port };\n        };\n    },\n    register: ({ call }) => {\n        return (port) => {\n            return call('register', { port }, [port]);\n        };\n    }\n});\n\nexport const load: TMediaEncoderHostBrokerLoader = (url: string) => {\n    const worker = new Worker(url);\n\n    return wrap(worker);\n};\n"]},"metadata":{},"sourceType":"module"}