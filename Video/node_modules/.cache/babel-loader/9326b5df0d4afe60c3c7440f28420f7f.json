{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nexport var visitEachAudioNodeOnce = function visitEachAudioNodeOnce(cycles, visitor) {\n  var counts = new Map();\n\n  var _iterator = _createForOfIteratorHelper(cycles),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var cycle = _step.value;\n\n      var _iterator2 = _createForOfIteratorHelper(cycle),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var audioNode = _step2.value;\n          var count = counts.get(audioNode);\n          counts.set(audioNode, count === undefined ? 1 : count + 1);\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  counts.forEach(function (count, audioNode) {\n    return visitor(audioNode, count);\n  });\n};","map":{"version":3,"mappings":";AAGA,OAAO,IAAMA,sBAAsB,GAAG,SAAzBA,sBAAyB,CAClCC,MADkC,EAElCC,OAFkC,EAG5B;EACN,IAAMC,MAAM,GAAG,IAAIC,GAAJ,EAAf;;EADM,2CAGcH,MAHd;EAAA;;EAAA;IAGN,oDAA4B;MAAA,IAAjBI,KAAiB;;MAAA,4CACAA,KADA;MAAA;;MAAA;QACxB,uDAA+B;UAAA,IAApBC,SAAoB;UAC3B,IAAMC,KAAK,GAAGJ,MAAM,CAACK,GAAP,CAAWF,SAAX,CAAd;UAEAH,MAAM,CAACM,GAAP,CAAWH,SAAX,EAAsBC,KAAK,KAAKG,SAAV,GAAsB,CAAtB,GAA0BH,KAAK,GAAG,CAAxD;QACH;MALuB;QAAA;MAAA;QAAA;MAAA;IAM3B;EATK;IAAA;EAAA;IAAA;EAAA;;EAWNJ,MAAM,CAACQ,OAAP,CAAe,UAACJ,KAAD,EAAQD,SAAR;IAAA,OAAsBJ,OAAO,CAACI,SAAD,EAAYC,KAAZ,CAA7B;EAAA,CAAf;AACH,CAfM","names":["visitEachAudioNodeOnce","cycles","visitor","counts","Map","cycle","audioNode","count","get","set","undefined","forEach"],"sources":["C:\\Users\\brigh\\storage\\js_project\\Gakugeki_WEB\\node_modules\\standardized-audio-context\\src\\helpers\\visit-each-audio-node-once.ts"],"sourcesContent":["import { IAudioNode } from '../interfaces';\nimport { TContext } from '../types';\n\nexport const visitEachAudioNodeOnce = <T extends TContext>(\n    cycles: IAudioNode<T>[][],\n    visitor: (audioNode: IAudioNode<T>, count: number) => void\n): void => {\n    const counts = new Map<IAudioNode<T>, number>();\n\n    for (const cycle of cycles) {\n        for (const audioNode of cycle) {\n            const count = counts.get(audioNode);\n\n            counts.set(audioNode, count === undefined ? 1 : count + 1);\n        }\n    }\n\n    counts.forEach((count, audioNode) => visitor(audioNode, count));\n};\n"]},"metadata":{},"sourceType":"module"}