{"ast":null,"code":"import { computeBufferSize } from '../helpers/compute-buffer-size';\nimport { filterBuffer } from '../helpers/filter-buffer';\nimport { interceptConnections } from '../helpers/intercept-connections';\n\nfunction divide(a, b) {\n  var denominator = b[0] * b[0] + b[1] * b[1];\n  return [(a[0] * b[0] + a[1] * b[1]) / denominator, (a[1] * b[0] - a[0] * b[1]) / denominator];\n}\n\nfunction multiply(a, b) {\n  return [a[0] * b[0] - a[1] * b[1], a[0] * b[1] + a[1] * b[0]];\n}\n\nfunction evaluatePolynomial(coefficient, z) {\n  var result = [0, 0];\n\n  for (var i = coefficient.length - 1; i >= 0; i -= 1) {\n    result = multiply(result, z);\n    result[0] += coefficient[i];\n  }\n\n  return result;\n}\n\nexport var createNativeIIRFilterNodeFakerFactory = function createNativeIIRFilterNodeFakerFactory(createInvalidAccessError, createInvalidStateError, createNativeScriptProcessorNode, createNotSupportedError) {\n  return function (nativeContext, baseLatency, _ref) {\n    var channelCount = _ref.channelCount,\n        channelCountMode = _ref.channelCountMode,\n        channelInterpretation = _ref.channelInterpretation,\n        feedback = _ref.feedback,\n        feedforward = _ref.feedforward;\n    var bufferSize = computeBufferSize(baseLatency, nativeContext.sampleRate);\n    var convertedFeedback = feedback instanceof Float64Array ? feedback : new Float64Array(feedback);\n    var convertedFeedforward = feedforward instanceof Float64Array ? feedforward : new Float64Array(feedforward);\n    var feedbackLength = convertedFeedback.length;\n    var feedforwardLength = convertedFeedforward.length;\n    var minLength = Math.min(feedbackLength, feedforwardLength);\n\n    if (feedbackLength === 0 || feedbackLength > 20) {\n      throw createNotSupportedError();\n    }\n\n    if (convertedFeedback[0] === 0) {\n      throw createInvalidStateError();\n    }\n\n    if (feedforwardLength === 0 || feedforwardLength > 20) {\n      throw createNotSupportedError();\n    }\n\n    if (convertedFeedforward[0] === 0) {\n      throw createInvalidStateError();\n    }\n\n    if (convertedFeedback[0] !== 1) {\n      for (var i = 0; i < feedforwardLength; i += 1) {\n        convertedFeedforward[i] /= convertedFeedback[0];\n      }\n\n      for (var _i = 1; _i < feedbackLength; _i += 1) {\n        convertedFeedback[_i] /= convertedFeedback[0];\n      }\n    }\n\n    var scriptProcessorNode = createNativeScriptProcessorNode(nativeContext, bufferSize, channelCount, channelCount);\n    scriptProcessorNode.channelCount = channelCount;\n    scriptProcessorNode.channelCountMode = channelCountMode;\n    scriptProcessorNode.channelInterpretation = channelInterpretation;\n    var bufferLength = 32;\n    var bufferIndexes = [];\n    var xBuffers = [];\n    var yBuffers = [];\n\n    for (var _i2 = 0; _i2 < channelCount; _i2 += 1) {\n      bufferIndexes.push(0);\n      var xBuffer = new Float32Array(bufferLength);\n      var yBuffer = new Float32Array(bufferLength);\n      xBuffer.fill(0);\n      yBuffer.fill(0);\n      xBuffers.push(xBuffer);\n      yBuffers.push(yBuffer);\n    } // tslint:disable-next-line:deprecation\n\n\n    scriptProcessorNode.onaudioprocess = function (event) {\n      var inputBuffer = event.inputBuffer;\n      var outputBuffer = event.outputBuffer;\n      var numberOfChannels = inputBuffer.numberOfChannels;\n\n      for (var _i3 = 0; _i3 < numberOfChannels; _i3 += 1) {\n        var input = inputBuffer.getChannelData(_i3);\n        var output = outputBuffer.getChannelData(_i3);\n        bufferIndexes[_i3] = filterBuffer(convertedFeedback, feedbackLength, convertedFeedforward, feedforwardLength, minLength, xBuffers[_i3], yBuffers[_i3], bufferIndexes[_i3], bufferLength, input, output);\n      }\n    };\n\n    var nyquist = nativeContext.sampleRate / 2;\n    var nativeIIRFilterNodeFaker = {\n      get bufferSize() {\n        return bufferSize;\n      },\n\n      get channelCount() {\n        return scriptProcessorNode.channelCount;\n      },\n\n      set channelCount(value) {\n        scriptProcessorNode.channelCount = value;\n      },\n\n      get channelCountMode() {\n        return scriptProcessorNode.channelCountMode;\n      },\n\n      set channelCountMode(value) {\n        scriptProcessorNode.channelCountMode = value;\n      },\n\n      get channelInterpretation() {\n        return scriptProcessorNode.channelInterpretation;\n      },\n\n      set channelInterpretation(value) {\n        scriptProcessorNode.channelInterpretation = value;\n      },\n\n      get context() {\n        return scriptProcessorNode.context;\n      },\n\n      get inputs() {\n        return [scriptProcessorNode];\n      },\n\n      get numberOfInputs() {\n        return scriptProcessorNode.numberOfInputs;\n      },\n\n      get numberOfOutputs() {\n        return scriptProcessorNode.numberOfOutputs;\n      },\n\n      addEventListener: function addEventListener() {\n        // @todo Dissallow adding an audioprocess listener.\n        return scriptProcessorNode.addEventListener(arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1], arguments.length <= 2 ? undefined : arguments[2]);\n      },\n      dispatchEvent: function dispatchEvent() {\n        return scriptProcessorNode.dispatchEvent(arguments.length <= 0 ? undefined : arguments[0]);\n      },\n      getFrequencyResponse: function getFrequencyResponse(frequencyHz, magResponse, phaseResponse) {\n        if (frequencyHz.length !== magResponse.length || magResponse.length !== phaseResponse.length) {\n          throw createInvalidAccessError();\n        }\n\n        var length = frequencyHz.length;\n\n        for (var _i4 = 0; _i4 < length; _i4 += 1) {\n          var omega = -Math.PI * (frequencyHz[_i4] / nyquist);\n          var z = [Math.cos(omega), Math.sin(omega)];\n          var numerator = evaluatePolynomial(convertedFeedforward, z);\n          var denominator = evaluatePolynomial(convertedFeedback, z);\n          var response = divide(numerator, denominator);\n          magResponse[_i4] = Math.sqrt(response[0] * response[0] + response[1] * response[1]);\n          phaseResponse[_i4] = Math.atan2(response[1], response[0]);\n        }\n      },\n      removeEventListener: function removeEventListener() {\n        return scriptProcessorNode.removeEventListener(arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1], arguments.length <= 2 ? undefined : arguments[2]);\n      }\n    };\n    return interceptConnections(nativeIIRFilterNodeFaker, scriptProcessorNode);\n  };\n};","map":{"version":3,"mappings":"AAAA,SAASA,iBAAT,QAAkC,gCAAlC;AACA,SAASC,YAAT,QAA6B,0BAA7B;AACA,SAASC,oBAAT,QAAqC,kCAArC;;AAGA,SAASC,MAAT,CAAgBC,CAAhB,EAAqCC,CAArC,EAAwD;EACpD,IAAMC,WAAW,GAAGD,CAAC,CAAC,CAAD,CAAD,GAAOA,CAAC,CAAC,CAAD,CAAR,GAAcA,CAAC,CAAC,CAAD,CAAD,GAAOA,CAAC,CAAC,CAAD,CAA1C;EAEA,OAAO,CAAC,CAACD,CAAC,CAAC,CAAD,CAAD,GAAOC,CAAC,CAAC,CAAD,CAAR,GAAcD,CAAC,CAAC,CAAD,CAAD,GAAOC,CAAC,CAAC,CAAD,CAAvB,IAA8BC,WAA/B,EAA4C,CAACF,CAAC,CAAC,CAAD,CAAD,GAAOC,CAAC,CAAC,CAAD,CAAR,GAAcD,CAAC,CAAC,CAAD,CAAD,GAAOC,CAAC,CAAC,CAAD,CAAvB,IAA8BC,WAA1E,CAAP;AACH;;AAED,SAASC,QAAT,CAAkBH,CAAlB,EAAuCC,CAAvC,EAA0D;EACtD,OAAO,CAACD,CAAC,CAAC,CAAD,CAAD,GAAOC,CAAC,CAAC,CAAD,CAAR,GAAcD,CAAC,CAAC,CAAD,CAAD,GAAOC,CAAC,CAAC,CAAD,CAAvB,EAA4BD,CAAC,CAAC,CAAD,CAAD,GAAOC,CAAC,CAAC,CAAD,CAAR,GAAcD,CAAC,CAAC,CAAD,CAAD,GAAOC,CAAC,CAAC,CAAD,CAAlD,CAAP;AACH;;AAED,SAASG,kBAAT,CAA4BC,WAA5B,EAAuDC,CAAvD,EAA0E;EACtE,IAAIC,MAAM,GAAqB,CAAC,CAAD,EAAI,CAAJ,CAA/B;;EAEA,KAAK,IAAIC,CAAC,GAAGH,WAAW,CAACI,MAAZ,GAAqB,CAAlC,EAAqCD,CAAC,IAAI,CAA1C,EAA6CA,CAAC,IAAI,CAAlD,EAAqD;IACjDD,MAAM,GAAGJ,QAAQ,CAACI,MAAD,EAASD,CAAT,CAAjB;IAEAC,MAAM,CAAC,CAAD,CAAN,IAAaF,WAAW,CAACG,CAAD,CAAxB;EACH;;EAED,OAAOD,MAAP;AACH;;AAED,OAAO,IAAMG,qCAAqC,GAA4C,SAAjFA,qCAAiF,CAC1FC,wBAD0F,EAE1FC,uBAF0F,EAG1FC,+BAH0F,EAI1FC,uBAJ0F,EAK1F;EACA,OAAO,UAACC,aAAD,EAAgBC,WAAhB,QAAiH;IAAA,IAAlFC,YAAkF,QAAlFA,YAAkF;IAAA,IAApEC,gBAAoE,QAApEA,gBAAoE;IAAA,IAAlDC,qBAAkD,QAAlDA,qBAAkD;IAAA,IAA3BC,QAA2B,QAA3BA,QAA2B;IAAA,IAAjBC,WAAiB,QAAjBA,WAAiB;IACpH,IAAMC,UAAU,GAAG1B,iBAAiB,CAACoB,WAAD,EAAcD,aAAa,CAACQ,UAA5B,CAApC;IACA,IAAMC,iBAAiB,GAAGJ,QAAQ,YAAYK,YAApB,GAAmCL,QAAnC,GAA8C,IAAIK,YAAJ,CAAiBL,QAAjB,CAAxE;IACA,IAAMM,oBAAoB,GAAGL,WAAW,YAAYI,YAAvB,GAAsCJ,WAAtC,GAAoD,IAAII,YAAJ,CAAiBJ,WAAjB,CAAjF;IACA,IAAMM,cAAc,GAAGH,iBAAiB,CAACf,MAAzC;IACA,IAAMmB,iBAAiB,GAAGF,oBAAoB,CAACjB,MAA/C;IACA,IAAMoB,SAAS,GAAGC,IAAI,CAACC,GAAL,CAASJ,cAAT,EAAyBC,iBAAzB,CAAlB;;IAEA,IAAID,cAAc,KAAK,CAAnB,IAAwBA,cAAc,GAAG,EAA7C,EAAiD;MAC7C,MAAMb,uBAAuB,EAA7B;IACH;;IAED,IAAIU,iBAAiB,CAAC,CAAD,CAAjB,KAAyB,CAA7B,EAAgC;MAC5B,MAAMZ,uBAAuB,EAA7B;IACH;;IAED,IAAIgB,iBAAiB,KAAK,CAAtB,IAA2BA,iBAAiB,GAAG,EAAnD,EAAuD;MACnD,MAAMd,uBAAuB,EAA7B;IACH;;IAED,IAAIY,oBAAoB,CAAC,CAAD,CAApB,KAA4B,CAAhC,EAAmC;MAC/B,MAAMd,uBAAuB,EAA7B;IACH;;IAED,IAAIY,iBAAiB,CAAC,CAAD,CAAjB,KAAyB,CAA7B,EAAgC;MAC5B,KAAK,IAAIhB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGoB,iBAApB,EAAuCpB,CAAC,IAAI,CAA5C,EAA+C;QAC3CkB,oBAAoB,CAAClB,CAAD,CAApB,IAA2BgB,iBAAiB,CAAC,CAAD,CAA5C;MACH;;MAED,KAAK,IAAIhB,EAAC,GAAG,CAAb,EAAgBA,EAAC,GAAGmB,cAApB,EAAoCnB,EAAC,IAAI,CAAzC,EAA4C;QACxCgB,iBAAiB,CAAChB,EAAD,CAAjB,IAAwBgB,iBAAiB,CAAC,CAAD,CAAzC;MACH;IACJ;;IAED,IAAMQ,mBAAmB,GAAGnB,+BAA+B,CAACE,aAAD,EAAgBO,UAAhB,EAA4BL,YAA5B,EAA0CA,YAA1C,CAA3D;IAEAe,mBAAmB,CAACf,YAApB,GAAmCA,YAAnC;IACAe,mBAAmB,CAACd,gBAApB,GAAuCA,gBAAvC;IACAc,mBAAmB,CAACb,qBAApB,GAA4CA,qBAA5C;IAEA,IAAMc,YAAY,GAAG,EAArB;IACA,IAAMC,aAAa,GAAa,EAAhC;IACA,IAAMC,QAAQ,GAAmB,EAAjC;IACA,IAAMC,QAAQ,GAAmB,EAAjC;;IAEA,KAAK,IAAI5B,GAAC,GAAG,CAAb,EAAgBA,GAAC,GAAGS,YAApB,EAAkCT,GAAC,IAAI,CAAvC,EAA0C;MACtC0B,aAAa,CAACG,IAAd,CAAmB,CAAnB;MAEA,IAAMC,OAAO,GAAG,IAAIC,YAAJ,CAAiBN,YAAjB,CAAhB;MACA,IAAMO,OAAO,GAAG,IAAID,YAAJ,CAAiBN,YAAjB,CAAhB;MAEAK,OAAO,CAACG,IAAR,CAAa,CAAb;MACAD,OAAO,CAACC,IAAR,CAAa,CAAb;MAEAN,QAAQ,CAACE,IAAT,CAAcC,OAAd;MACAF,QAAQ,CAACC,IAAT,CAAcG,OAAd;IACH,CAxDmH,CA0DpH;;;IACAR,mBAAmB,CAACU,cAApB,GAAqC,UAACC,KAAD,EAAgC;MACjE,IAAMC,WAAW,GAAGD,KAAK,CAACC,WAA1B;MACA,IAAMC,YAAY,GAAGF,KAAK,CAACE,YAA3B;MAEA,IAAMC,gBAAgB,GAAGF,WAAW,CAACE,gBAArC;;MAEA,KAAK,IAAItC,GAAC,GAAG,CAAb,EAAgBA,GAAC,GAAGsC,gBAApB,EAAsCtC,GAAC,IAAI,CAA3C,EAA8C;QAC1C,IAAMuC,KAAK,GAAGH,WAAW,CAACI,cAAZ,CAA2BxC,GAA3B,CAAd;QACA,IAAMyC,MAAM,GAAGJ,YAAY,CAACG,cAAb,CAA4BxC,GAA5B,CAAf;QAEA0B,aAAa,CAAC1B,GAAD,CAAb,GAAmBX,YAAY,CAC3B2B,iBAD2B,EAE3BG,cAF2B,EAG3BD,oBAH2B,EAI3BE,iBAJ2B,EAK3BC,SAL2B,EAM3BM,QAAQ,CAAC3B,GAAD,CANmB,EAO3B4B,QAAQ,CAAC5B,GAAD,CAPmB,EAQ3B0B,aAAa,CAAC1B,GAAD,CARc,EAS3ByB,YAT2B,EAU3Bc,KAV2B,EAW3BE,MAX2B,CAA/B;MAaH;IACJ,CAxBD;;IA0BA,IAAMC,OAAO,GAAGnC,aAAa,CAACQ,UAAd,GAA2B,CAA3C;IAEA,IAAM4B,wBAAwB,GAAG;MAC7B,IAAI7B,UAAJ,GAAc;QACV,OAAOA,UAAP;MACH,CAH4B;;MAI7B,IAAIL,YAAJ,GAAgB;QACZ,OAAOe,mBAAmB,CAACf,YAA3B;MACH,CAN4B;;MAO7B,IAAIA,YAAJ,CAAiBmC,KAAjB,EAAsB;QAClBpB,mBAAmB,CAACf,YAApB,GAAmCmC,KAAnC;MACH,CAT4B;;MAU7B,IAAIlC,gBAAJ,GAAoB;QAChB,OAAOc,mBAAmB,CAACd,gBAA3B;MACH,CAZ4B;;MAa7B,IAAIA,gBAAJ,CAAqBkC,KAArB,EAA0B;QACtBpB,mBAAmB,CAACd,gBAApB,GAAuCkC,KAAvC;MACH,CAf4B;;MAgB7B,IAAIjC,qBAAJ,GAAyB;QACrB,OAAOa,mBAAmB,CAACb,qBAA3B;MACH,CAlB4B;;MAmB7B,IAAIA,qBAAJ,CAA0BiC,KAA1B,EAA+B;QAC3BpB,mBAAmB,CAACb,qBAApB,GAA4CiC,KAA5C;MACH,CArB4B;;MAsB7B,IAAIC,OAAJ,GAAW;QACP,OAAOrB,mBAAmB,CAACqB,OAA3B;MACH,CAxB4B;;MAyB7B,IAAIC,MAAJ,GAAU;QACN,OAAO,CAACtB,mBAAD,CAAP;MACH,CA3B4B;;MA4B7B,IAAIuB,cAAJ,GAAkB;QACd,OAAOvB,mBAAmB,CAACuB,cAA3B;MACH,CA9B4B;;MA+B7B,IAAIC,eAAJ,GAAmB;QACf,OAAOxB,mBAAmB,CAACwB,eAA3B;MACH,CAjC4B;;MAkC7BC,gBAlC6B,8BAkCE;QAC3B;QACA,OAAOzB,mBAAmB,CAACyB,gBAApB,sJAAP;MACH,CArC4B;MAsC7BC,aAtC6B,2BAsCD;QACxB,OAAO1B,mBAAmB,CAAC0B,aAApB,kDAAP;MACH,CAxC4B;MAyC7BC,oBAzC6B,gCAyCRC,WAzCQ,EAyCmBC,WAzCnB,EAyC8CC,aAzC9C,EAyCyE;QAClG,IAAIF,WAAW,CAACnD,MAAZ,KAAuBoD,WAAW,CAACpD,MAAnC,IAA6CoD,WAAW,CAACpD,MAAZ,KAAuBqD,aAAa,CAACrD,MAAtF,EAA8F;UAC1F,MAAME,wBAAwB,EAA9B;QACH;;QAED,IAAMF,MAAM,GAAGmD,WAAW,CAACnD,MAA3B;;QAEA,KAAK,IAAID,GAAC,GAAG,CAAb,EAAgBA,GAAC,GAAGC,MAApB,EAA4BD,GAAC,IAAI,CAAjC,EAAoC;UAChC,IAAMuD,KAAK,GAAG,CAACjC,IAAI,CAACkC,EAAN,IAAYJ,WAAW,CAACpD,GAAD,CAAX,GAAiB0C,OAA7B,CAAd;UACA,IAAM5C,CAAC,GAAqB,CAACwB,IAAI,CAACmC,GAAL,CAASF,KAAT,CAAD,EAAkBjC,IAAI,CAACoC,GAAL,CAASH,KAAT,CAAlB,CAA5B;UACA,IAAMI,SAAS,GAAG/D,kBAAkB,CAACsB,oBAAD,EAAuBpB,CAAvB,CAApC;UACA,IAAMJ,WAAW,GAAGE,kBAAkB,CAACoB,iBAAD,EAAoBlB,CAApB,CAAtC;UACA,IAAM8D,QAAQ,GAAGrE,MAAM,CAACoE,SAAD,EAAYjE,WAAZ,CAAvB;UAEA2D,WAAW,CAACrD,GAAD,CAAX,GAAiBsB,IAAI,CAACuC,IAAL,CAAUD,QAAQ,CAAC,CAAD,CAAR,GAAcA,QAAQ,CAAC,CAAD,CAAtB,GAA4BA,QAAQ,CAAC,CAAD,CAAR,GAAcA,QAAQ,CAAC,CAAD,CAA5D,CAAjB;UACAN,aAAa,CAACtD,GAAD,CAAb,GAAmBsB,IAAI,CAACwC,KAAL,CAAWF,QAAQ,CAAC,CAAD,CAAnB,EAAwBA,QAAQ,CAAC,CAAD,CAAhC,CAAnB;QACH;MACJ,CA1D4B;MA2D7BG,mBA3D6B,iCA2DK;QAC9B,OAAOvC,mBAAmB,CAACuC,mBAApB,sJAAP;MACH;IA7D4B,CAAjC;IAgEA,OAAOzE,oBAAoB,CAACqD,wBAAD,EAA2BnB,mBAA3B,CAA3B;EACH,CAxJD;AAyJH,CA/JM","names":["computeBufferSize","filterBuffer","interceptConnections","divide","a","b","denominator","multiply","evaluatePolynomial","coefficient","z","result","i","length","createNativeIIRFilterNodeFakerFactory","createInvalidAccessError","createInvalidStateError","createNativeScriptProcessorNode","createNotSupportedError","nativeContext","baseLatency","channelCount","channelCountMode","channelInterpretation","feedback","feedforward","bufferSize","sampleRate","convertedFeedback","Float64Array","convertedFeedforward","feedbackLength","feedforwardLength","minLength","Math","min","scriptProcessorNode","bufferLength","bufferIndexes","xBuffers","yBuffers","push","xBuffer","Float32Array","yBuffer","fill","onaudioprocess","event","inputBuffer","outputBuffer","numberOfChannels","input","getChannelData","output","nyquist","nativeIIRFilterNodeFaker","value","context","inputs","numberOfInputs","numberOfOutputs","addEventListener","dispatchEvent","getFrequencyResponse","frequencyHz","magResponse","phaseResponse","omega","PI","cos","sin","numerator","response","sqrt","atan2","removeEventListener"],"sources":["C:\\Users\\brigh\\storage\\js_project\\Gakugeki_WEB\\node_modules\\standardized-audio-context\\src\\factories\\native-iir-filter-node-faker-factory.ts"],"sourcesContent":["import { computeBufferSize } from '../helpers/compute-buffer-size';\nimport { filterBuffer } from '../helpers/filter-buffer';\nimport { interceptConnections } from '../helpers/intercept-connections';\nimport { TNativeAudioNode, TNativeIIRFilterNode, TNativeIIRFilterNodeFakerFactoryFactory } from '../types';\n\nfunction divide(a: [number, number], b: [number, number]): [number, number] {\n    const denominator = b[0] * b[0] + b[1] * b[1];\n\n    return [(a[0] * b[0] + a[1] * b[1]) / denominator, (a[1] * b[0] - a[0] * b[1]) / denominator];\n}\n\nfunction multiply(a: [number, number], b: [number, number]): [number, number] {\n    return [a[0] * b[0] - a[1] * b[1], a[0] * b[1] + a[1] * b[0]];\n}\n\nfunction evaluatePolynomial(coefficient: Float64Array, z: [number, number]): [number, number] {\n    let result: [number, number] = [0, 0];\n\n    for (let i = coefficient.length - 1; i >= 0; i -= 1) {\n        result = multiply(result, z);\n\n        result[0] += coefficient[i];\n    }\n\n    return result;\n}\n\nexport const createNativeIIRFilterNodeFakerFactory: TNativeIIRFilterNodeFakerFactoryFactory = (\n    createInvalidAccessError,\n    createInvalidStateError,\n    createNativeScriptProcessorNode,\n    createNotSupportedError\n) => {\n    return (nativeContext, baseLatency, { channelCount, channelCountMode, channelInterpretation, feedback, feedforward }) => {\n        const bufferSize = computeBufferSize(baseLatency, nativeContext.sampleRate);\n        const convertedFeedback = feedback instanceof Float64Array ? feedback : new Float64Array(feedback);\n        const convertedFeedforward = feedforward instanceof Float64Array ? feedforward : new Float64Array(feedforward);\n        const feedbackLength = convertedFeedback.length;\n        const feedforwardLength = convertedFeedforward.length;\n        const minLength = Math.min(feedbackLength, feedforwardLength);\n\n        if (feedbackLength === 0 || feedbackLength > 20) {\n            throw createNotSupportedError();\n        }\n\n        if (convertedFeedback[0] === 0) {\n            throw createInvalidStateError();\n        }\n\n        if (feedforwardLength === 0 || feedforwardLength > 20) {\n            throw createNotSupportedError();\n        }\n\n        if (convertedFeedforward[0] === 0) {\n            throw createInvalidStateError();\n        }\n\n        if (convertedFeedback[0] !== 1) {\n            for (let i = 0; i < feedforwardLength; i += 1) {\n                convertedFeedforward[i] /= convertedFeedback[0];\n            }\n\n            for (let i = 1; i < feedbackLength; i += 1) {\n                convertedFeedback[i] /= convertedFeedback[0];\n            }\n        }\n\n        const scriptProcessorNode = createNativeScriptProcessorNode(nativeContext, bufferSize, channelCount, channelCount);\n\n        scriptProcessorNode.channelCount = channelCount;\n        scriptProcessorNode.channelCountMode = channelCountMode;\n        scriptProcessorNode.channelInterpretation = channelInterpretation;\n\n        const bufferLength = 32;\n        const bufferIndexes: number[] = [];\n        const xBuffers: Float32Array[] = [];\n        const yBuffers: Float32Array[] = [];\n\n        for (let i = 0; i < channelCount; i += 1) {\n            bufferIndexes.push(0);\n\n            const xBuffer = new Float32Array(bufferLength);\n            const yBuffer = new Float32Array(bufferLength);\n\n            xBuffer.fill(0);\n            yBuffer.fill(0);\n\n            xBuffers.push(xBuffer);\n            yBuffers.push(yBuffer);\n        }\n\n        // tslint:disable-next-line:deprecation\n        scriptProcessorNode.onaudioprocess = (event: AudioProcessingEvent) => {\n            const inputBuffer = event.inputBuffer;\n            const outputBuffer = event.outputBuffer;\n\n            const numberOfChannels = inputBuffer.numberOfChannels;\n\n            for (let i = 0; i < numberOfChannels; i += 1) {\n                const input = inputBuffer.getChannelData(i);\n                const output = outputBuffer.getChannelData(i);\n\n                bufferIndexes[i] = filterBuffer(\n                    convertedFeedback,\n                    feedbackLength,\n                    convertedFeedforward,\n                    feedforwardLength,\n                    minLength,\n                    xBuffers[i],\n                    yBuffers[i],\n                    bufferIndexes[i],\n                    bufferLength,\n                    input,\n                    output\n                );\n            }\n        };\n\n        const nyquist = nativeContext.sampleRate / 2;\n\n        const nativeIIRFilterNodeFaker = {\n            get bufferSize(): number {\n                return bufferSize;\n            },\n            get channelCount(): number {\n                return scriptProcessorNode.channelCount;\n            },\n            set channelCount(value) {\n                scriptProcessorNode.channelCount = value;\n            },\n            get channelCountMode(): TNativeIIRFilterNode['channelCountMode'] {\n                return scriptProcessorNode.channelCountMode;\n            },\n            set channelCountMode(value) {\n                scriptProcessorNode.channelCountMode = value;\n            },\n            get channelInterpretation(): TNativeIIRFilterNode['channelInterpretation'] {\n                return scriptProcessorNode.channelInterpretation;\n            },\n            set channelInterpretation(value) {\n                scriptProcessorNode.channelInterpretation = value;\n            },\n            get context(): TNativeIIRFilterNode['context'] {\n                return scriptProcessorNode.context;\n            },\n            get inputs(): TNativeAudioNode[] {\n                return [scriptProcessorNode];\n            },\n            get numberOfInputs(): number {\n                return scriptProcessorNode.numberOfInputs;\n            },\n            get numberOfOutputs(): number {\n                return scriptProcessorNode.numberOfOutputs;\n            },\n            addEventListener(...args: any[]): void {\n                // @todo Dissallow adding an audioprocess listener.\n                return scriptProcessorNode.addEventListener(args[0], args[1], args[2]);\n            },\n            dispatchEvent(...args: any[]): boolean {\n                return scriptProcessorNode.dispatchEvent(args[0]);\n            },\n            getFrequencyResponse(frequencyHz: Float32Array, magResponse: Float32Array, phaseResponse: Float32Array): void {\n                if (frequencyHz.length !== magResponse.length || magResponse.length !== phaseResponse.length) {\n                    throw createInvalidAccessError();\n                }\n\n                const length = frequencyHz.length;\n\n                for (let i = 0; i < length; i += 1) {\n                    const omega = -Math.PI * (frequencyHz[i] / nyquist);\n                    const z: [number, number] = [Math.cos(omega), Math.sin(omega)];\n                    const numerator = evaluatePolynomial(convertedFeedforward, z);\n                    const denominator = evaluatePolynomial(convertedFeedback, z);\n                    const response = divide(numerator, denominator);\n\n                    magResponse[i] = Math.sqrt(response[0] * response[0] + response[1] * response[1]);\n                    phaseResponse[i] = Math.atan2(response[1], response[0]);\n                }\n            },\n            removeEventListener(...args: any[]): void {\n                return scriptProcessorNode.removeEventListener(args[0], args[1], args[2]);\n            }\n        };\n\n        return interceptConnections(nativeIIRFilterNodeFaker, scriptProcessorNode);\n    };\n};\n"]},"metadata":{},"sourceType":"module"}