{"ast":null,"code":"import _slicedToArray from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createForOfIteratorHelper from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { isNativeAudioNode } from '../guards/native-audio-node';\nexport var wrapAudioNodeDisconnectMethod = function wrapAudioNodeDisconnectMethod(nativeAudioNode) {\n  var connections = new Map();\n\n  nativeAudioNode.connect = function (connect) {\n    // tslint:disable-next-line:invalid-void no-inferrable-types\n    return function (destination) {\n      var output = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var input = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var returnValue = isNativeAudioNode(destination) ? connect(destination, output, input) : connect(destination, output); // Save the new connection only if the calls to connect above didn't throw an error.\n\n      var connectionsToDestination = connections.get(destination);\n\n      if (connectionsToDestination === undefined) {\n        connections.set(destination, [{\n          input: input,\n          output: output\n        }]);\n      } else {\n        if (connectionsToDestination.every(function (connection) {\n          return connection.input !== input || connection.output !== output;\n        })) {\n          connectionsToDestination.push({\n            input: input,\n            output: output\n          });\n        }\n      }\n\n      return returnValue;\n    };\n  }(nativeAudioNode.connect.bind(nativeAudioNode));\n\n  nativeAudioNode.disconnect = function (disconnect) {\n    return function (destinationOrOutput, output, input) {\n      disconnect.apply(nativeAudioNode);\n\n      if (destinationOrOutput === undefined) {\n        connections.clear();\n      } else if (typeof destinationOrOutput === 'number') {\n        var _iterator = _createForOfIteratorHelper(connections),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var _step$value = _slicedToArray(_step.value, 2),\n                destination = _step$value[0],\n                connectionsToDestination = _step$value[1];\n\n            var filteredConnections = connectionsToDestination.filter(function (connection) {\n              return connection.output !== destinationOrOutput;\n            });\n\n            if (filteredConnections.length === 0) {\n              connections.delete(destination);\n            } else {\n              connections.set(destination, filteredConnections);\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      } else if (connections.has(destinationOrOutput)) {\n        if (output === undefined) {\n          connections.delete(destinationOrOutput);\n        } else {\n          var _connectionsToDestination = connections.get(destinationOrOutput);\n\n          if (_connectionsToDestination !== undefined) {\n            var _filteredConnections = _connectionsToDestination.filter(function (connection) {\n              return connection.output !== output && (connection.input !== input || input === undefined);\n            });\n\n            if (_filteredConnections.length === 0) {\n              connections.delete(destinationOrOutput);\n            } else {\n              connections.set(destinationOrOutput, _filteredConnections);\n            }\n          }\n        }\n      }\n\n      var _iterator2 = _createForOfIteratorHelper(connections),\n          _step2;\n\n      try {\n        var _loop = function _loop() {\n          var _step2$value = _slicedToArray(_step2.value, 2),\n              destination = _step2$value[0],\n              connectionsToDestination = _step2$value[1];\n\n          connectionsToDestination.forEach(function (connection) {\n            if (isNativeAudioNode(destination)) {\n              nativeAudioNode.connect(destination, connection.output, connection.input);\n            } else {\n              nativeAudioNode.connect(destination, connection.output);\n            }\n          });\n        };\n\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          _loop();\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    };\n  }(nativeAudioNode.disconnect);\n};","map":{"version":3,"mappings":"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","names":["isNativeAudioNode","wrapAudioNodeDisconnectMethod","nativeAudioNode","connections","Map","connect","destination","output","input","returnValue","connectionsToDestination","get","undefined","set","every","connection","push","bind","disconnect","destinationOrOutput","apply","clear","filteredConnections","filter","length","delete","has","forEach"],"sources":["C:\\Users\\brigh\\storage\\js_project\\Gakugeki_WEB\\node_modules\\standardized-audio-context\\src\\helpers\\wrap-audio-node-disconnect-method.ts"],"sourcesContent":["import { isNativeAudioNode } from '../guards/native-audio-node';\nimport { TNativeAudioNode, TNativeAudioParam } from '../types';\n\nexport const wrapAudioNodeDisconnectMethod = (nativeAudioNode: TNativeAudioNode): void => {\n    const connections = new Map<TNativeAudioNode | TNativeAudioParam, { input: number; output: number }[]>();\n\n    nativeAudioNode.connect = <TNativeAudioNode['connect']>((connect) => {\n        // tslint:disable-next-line:invalid-void no-inferrable-types\n        return (destination: TNativeAudioNode | TNativeAudioParam, output = 0, input: number = 0): void | TNativeAudioNode => {\n            const returnValue = isNativeAudioNode(destination) ? connect(destination, output, input) : connect(destination, output);\n\n            // Save the new connection only if the calls to connect above didn't throw an error.\n            const connectionsToDestination = connections.get(destination);\n\n            if (connectionsToDestination === undefined) {\n                connections.set(destination, [{ input, output }]);\n            } else {\n                if (connectionsToDestination.every((connection) => connection.input !== input || connection.output !== output)) {\n                    connectionsToDestination.push({ input, output });\n                }\n            }\n\n            return returnValue;\n        };\n    })(nativeAudioNode.connect.bind(nativeAudioNode));\n\n    nativeAudioNode.disconnect = ((disconnect) => {\n        return (destinationOrOutput?: number | TNativeAudioNode | TNativeAudioParam, output?: number, input?: number): void => {\n            disconnect.apply(nativeAudioNode);\n\n            if (destinationOrOutput === undefined) {\n                connections.clear();\n            } else if (typeof destinationOrOutput === 'number') {\n                for (const [destination, connectionsToDestination] of connections) {\n                    const filteredConnections = connectionsToDestination.filter((connection) => connection.output !== destinationOrOutput);\n\n                    if (filteredConnections.length === 0) {\n                        connections.delete(destination);\n                    } else {\n                        connections.set(destination, filteredConnections);\n                    }\n                }\n            } else if (connections.has(destinationOrOutput)) {\n                if (output === undefined) {\n                    connections.delete(destinationOrOutput);\n                } else {\n                    const connectionsToDestination = connections.get(destinationOrOutput);\n\n                    if (connectionsToDestination !== undefined) {\n                        const filteredConnections = connectionsToDestination.filter(\n                            (connection) => connection.output !== output && (connection.input !== input || input === undefined)\n                        );\n\n                        if (filteredConnections.length === 0) {\n                            connections.delete(destinationOrOutput);\n                        } else {\n                            connections.set(destinationOrOutput, filteredConnections);\n                        }\n                    }\n                }\n            }\n\n            for (const [destination, connectionsToDestination] of connections) {\n                connectionsToDestination.forEach((connection) => {\n                    if (isNativeAudioNode(destination)) {\n                        nativeAudioNode.connect(destination, connection.output, connection.input);\n                    } else {\n                        nativeAudioNode.connect(destination, connection.output);\n                    }\n                });\n            }\n        };\n    })(nativeAudioNode.disconnect);\n};\n"]},"metadata":{},"sourceType":"module"}