{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport var createDelayNodeRendererFactory = function createDelayNodeRendererFactory(connectAudioParam, createNativeDelayNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) {\n  return function (maxDelayTime) {\n    var renderedNativeDelayNodes = new WeakMap();\n\n    var createDelayNode = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(proxy, nativeOfflineAudioContext) {\n        var nativeDelayNode, nativeDelayNodeIsOwnedByContext, options;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                nativeDelayNode = getNativeAudioNode(proxy); // If the initially used nativeDelayNode was not constructed on the same OfflineAudioContext it needs to be created again.\n\n                nativeDelayNodeIsOwnedByContext = isOwnedByContext(nativeDelayNode, nativeOfflineAudioContext);\n\n                if (!nativeDelayNodeIsOwnedByContext) {\n                  options = {\n                    channelCount: nativeDelayNode.channelCount,\n                    channelCountMode: nativeDelayNode.channelCountMode,\n                    channelInterpretation: nativeDelayNode.channelInterpretation,\n                    delayTime: nativeDelayNode.delayTime.value,\n                    maxDelayTime: maxDelayTime\n                  };\n                  nativeDelayNode = createNativeDelayNode(nativeOfflineAudioContext, options);\n                }\n\n                renderedNativeDelayNodes.set(nativeOfflineAudioContext, nativeDelayNode);\n\n                if (nativeDelayNodeIsOwnedByContext) {\n                  _context.next = 9;\n                  break;\n                }\n\n                _context.next = 7;\n                return renderAutomation(nativeOfflineAudioContext, proxy.delayTime, nativeDelayNode.delayTime);\n\n              case 7:\n                _context.next = 11;\n                break;\n\n              case 9:\n                _context.next = 11;\n                return connectAudioParam(nativeOfflineAudioContext, proxy.delayTime, nativeDelayNode.delayTime);\n\n              case 11:\n                _context.next = 13;\n                return renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeDelayNode);\n\n              case 13:\n                return _context.abrupt(\"return\", nativeDelayNode);\n\n              case 14:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function createDelayNode(_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    return {\n      render: function render(proxy, nativeOfflineAudioContext) {\n        var renderedNativeDelayNode = renderedNativeDelayNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeDelayNode !== undefined) {\n          return Promise.resolve(renderedNativeDelayNode);\n        }\n\n        return createDelayNode(proxy, nativeOfflineAudioContext);\n      }\n    };\n  };\n};","map":{"version":3,"mappings":";;AAAA,SAASA,gBAAT,QAAiC,gCAAjC;AAIA,OAAO,IAAMC,8BAA8B,GAAqC,SAAnEA,8BAAmE,CAC5EC,iBAD4E,EAE5EC,qBAF4E,EAG5EC,kBAH4E,EAI5EC,gBAJ4E,EAK5EC,uBAL4E,EAM5E;EACA,OAAO,UAA+DC,YAA/D,EAAuF;IAC1F,IAAMC,wBAAwB,GAAG,IAAIC,OAAJ,EAAjC;;IAEA,IAAMC,eAAe;MAAA,sEAAG,iBAAOC,KAAP,EAA6BC,yBAA7B;QAAA;QAAA;UAAA;YAAA;cAAA;gBAChBC,eADgB,GACET,kBAAkB,CAAsBO,KAAtB,CADpB,EAGpB;;gBACMG,+BAJc,GAIoBd,gBAAgB,CAACa,eAAD,EAAkBD,yBAAlB,CAJpC;;gBAMpB,IAAI,CAACE,+BAAL,EAAsC;kBAC5BC,OAD4B,GAClB;oBACZC,YAAY,EAAEH,eAAe,CAACG,YADlB;oBAEZC,gBAAgB,EAAEJ,eAAe,CAACI,gBAFtB;oBAGZC,qBAAqB,EAAEL,eAAe,CAACK,qBAH3B;oBAIZC,SAAS,EAAEN,eAAe,CAACM,SAAhB,CAA0BC,KAJzB;oBAKZb,YAAY,EAAZA;kBALY,CADkB;kBASlCM,eAAe,GAAGV,qBAAqB,CAACS,yBAAD,EAA4BG,OAA5B,CAAvC;gBACH;;gBAEDP,wBAAwB,CAACa,GAAzB,CAA6BT,yBAA7B,EAAwDC,eAAxD;;gBAlBoB,IAoBfC,+BApBe;kBAAA;kBAAA;gBAAA;;gBAAA;gBAAA,OAqBVT,gBAAgB,CAACO,yBAAD,EAA4BD,KAAK,CAACQ,SAAlC,EAA6CN,eAAe,CAACM,SAA7D,CArBN;;cAAA;gBAAA;gBAAA;;cAAA;gBAAA;gBAAA,OAuBVjB,iBAAiB,CAACU,yBAAD,EAA4BD,KAAK,CAACQ,SAAlC,EAA6CN,eAAe,CAACM,SAA7D,CAvBP;;cAAA;gBAAA;gBAAA,OA0Bdb,uBAAuB,CAACK,KAAD,EAAQC,yBAAR,EAAmCC,eAAnC,CA1BT;;cAAA;gBAAA,iCA4BbA,eA5Ba;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CAAH;;MAAA,gBAAfH,eAAe;QAAA;MAAA;IAAA,GAArB;;IA+BA,OAAO;MACHY,MADG,kBACIX,KADJ,EAC0BC,yBAD1B,EAC+E;QAC9E,IAAMW,uBAAuB,GAAGf,wBAAwB,CAACgB,GAAzB,CAA6BZ,yBAA7B,CAAhC;;QAEA,IAAIW,uBAAuB,KAAKE,SAAhC,EAA2C;UACvC,OAAOC,OAAO,CAACC,OAAR,CAAgBJ,uBAAhB,CAAP;QACH;;QAED,OAAOb,eAAe,CAACC,KAAD,EAAQC,yBAAR,CAAtB;MACH;IATE,CAAP;EAWH,CA7CD;AA8CH,CArDM","names":["isOwnedByContext","createDelayNodeRendererFactory","connectAudioParam","createNativeDelayNode","getNativeAudioNode","renderAutomation","renderInputsOfAudioNode","maxDelayTime","renderedNativeDelayNodes","WeakMap","createDelayNode","proxy","nativeOfflineAudioContext","nativeDelayNode","nativeDelayNodeIsOwnedByContext","options","channelCount","channelCountMode","channelInterpretation","delayTime","value","set","render","renderedNativeDelayNode","get","undefined","Promise","resolve"],"sources":["C:\\Users\\brigh\\storage\\js_project\\Gakugeki_WEB\\node_modules\\standardized-audio-context\\src\\factories\\delay-node-renderer-factory.ts"],"sourcesContent":["import { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { IDelayNode, IMinimalOfflineAudioContext, IOfflineAudioContext } from '../interfaces';\nimport { TDelayNodeRendererFactoryFactory, TNativeDelayNode, TNativeOfflineAudioContext } from '../types';\n\nexport const createDelayNodeRendererFactory: TDelayNodeRendererFactoryFactory = (\n    connectAudioParam,\n    createNativeDelayNode,\n    getNativeAudioNode,\n    renderAutomation,\n    renderInputsOfAudioNode\n) => {\n    return <T extends IMinimalOfflineAudioContext | IOfflineAudioContext>(maxDelayTime: number) => {\n        const renderedNativeDelayNodes = new WeakMap<TNativeOfflineAudioContext, TNativeDelayNode>();\n\n        const createDelayNode = async (proxy: IDelayNode<T>, nativeOfflineAudioContext: TNativeOfflineAudioContext) => {\n            let nativeDelayNode = getNativeAudioNode<T, TNativeDelayNode>(proxy);\n\n            // If the initially used nativeDelayNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeDelayNodeIsOwnedByContext = isOwnedByContext(nativeDelayNode, nativeOfflineAudioContext);\n\n            if (!nativeDelayNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeDelayNode.channelCount,\n                    channelCountMode: nativeDelayNode.channelCountMode,\n                    channelInterpretation: nativeDelayNode.channelInterpretation,\n                    delayTime: nativeDelayNode.delayTime.value,\n                    maxDelayTime\n                };\n\n                nativeDelayNode = createNativeDelayNode(nativeOfflineAudioContext, options);\n            }\n\n            renderedNativeDelayNodes.set(nativeOfflineAudioContext, nativeDelayNode);\n\n            if (!nativeDelayNodeIsOwnedByContext) {\n                await renderAutomation(nativeOfflineAudioContext, proxy.delayTime, nativeDelayNode.delayTime);\n            } else {\n                await connectAudioParam(nativeOfflineAudioContext, proxy.delayTime, nativeDelayNode.delayTime);\n            }\n\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeDelayNode);\n\n            return nativeDelayNode;\n        };\n\n        return {\n            render(proxy: IDelayNode<T>, nativeOfflineAudioContext: TNativeOfflineAudioContext): Promise<TNativeDelayNode> {\n                const renderedNativeDelayNode = renderedNativeDelayNodes.get(nativeOfflineAudioContext);\n\n                if (renderedNativeDelayNode !== undefined) {\n                    return Promise.resolve(renderedNativeDelayNode);\n                }\n\n                return createDelayNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n"]},"metadata":{},"sourceType":"module"}