{"ast":null,"code":"export var createUnhandledRejection = function createUnhandledRejection(emitNotSupportedError, window, wrapSubscribeFunction) {\n  return function (coolingOffPeriod) {\n    return wrapSubscribeFunction(function (observer) {\n      if (window === null || window.clearInterval === undefined || window.setInterval === undefined) {\n        return emitNotSupportedError(observer);\n      }\n\n      var possiblyUnhandledRejections = new Map();\n      var intervalId = null;\n\n      var deletePossiblyUnhandledRejection = function deletePossiblyUnhandledRejection(_ref) {\n        var promise = _ref.promise;\n        return possiblyUnhandledRejections.delete(promise);\n      };\n\n      var emitUnhandledRejection = function emitUnhandledRejection() {\n        var latestTimestampToEmit = Date.now() - coolingOffPeriod;\n        possiblyUnhandledRejections.forEach(function (_ref2, promise) {\n          var reason = _ref2.reason,\n              timestamp = _ref2.timestamp;\n\n          if (timestamp > latestTimestampToEmit) {\n            return;\n          }\n\n          possiblyUnhandledRejections.delete(promise);\n          observer.next(reason);\n        });\n\n        if (intervalId !== null && possiblyUnhandledRejections.size === 0) {\n          window.clearInterval(intervalId);\n          intervalId = null;\n        }\n      };\n\n      var registerPossiblyUnhandledRejection = function registerPossiblyUnhandledRejection(event) {\n        event.preventDefault();\n        possiblyUnhandledRejections.set(event.promise, {\n          reason: event.reason,\n          timestamp: Date.now()\n        });\n\n        if (intervalId === null) {\n          intervalId = window.setInterval(emitUnhandledRejection, coolingOffPeriod / 2);\n        }\n      };\n\n      window.addEventListener('rejectionhandled', deletePossiblyUnhandledRejection);\n      window.addEventListener('unhandledrejection', registerPossiblyUnhandledRejection);\n      return function () {\n        if (intervalId !== null) {\n          window.clearInterval(intervalId);\n        }\n\n        window.removeEventListener('rejectionhandled', deletePossiblyUnhandledRejection);\n        window.removeEventListener('unhandledrejection', registerPossiblyUnhandledRejection);\n      };\n    });\n  };\n};","map":{"version":3,"mappings":"AAEA,OAAO,IAAMA,wBAAwB,GAA+B,SAAvDA,wBAAuD,CAACC,qBAAD,EAAwBC,MAAxB,EAAgCC,qBAAhC,EAAyD;EACzH,OAAO,UAACC,gBAAD;IAAA,OACHD,qBAAqB,CAAC,UAACE,QAAD,EAAa;MAC/B,IAAIH,MAAM,KAAK,IAAX,IAAmBA,MAAM,CAACI,aAAP,KAAyBC,SAA5C,IAAyDL,MAAM,CAACM,WAAP,KAAuBD,SAApF,EAA+F;QAC3F,OAAON,qBAAqB,CAACI,QAAD,CAA5B;MACH;;MAED,IAAMI,2BAA2B,GAAG,IAAIC,GAAJ,EAApC;MAEA,IAAIC,UAAU,GAAkB,IAAhC;;MAEA,IAAMC,gCAAgC,GAAG,SAAnCA,gCAAmC;QAAA,IAAGC,OAAH,QAAGA,OAAH;QAAA,OAAwCJ,2BAA2B,CAACK,MAA5B,CAAmCD,OAAnC,CAAxC;MAAA,CAAzC;;MACA,IAAME,sBAAsB,GAAG,SAAzBA,sBAAyB,GAAK;QAChC,IAAMC,qBAAqB,GAAGC,IAAI,CAACC,GAAL,KAAad,gBAA3C;QAEAK,2BAA2B,CAACU,OAA5B,CAAoC,iBAAwBN,OAAxB,EAAmC;UAAA,IAAhCO,MAAgC,SAAhCA,MAAgC;UAAA,IAAxBC,SAAwB,SAAxBA,SAAwB;;UACnE,IAAIA,SAAS,GAAGL,qBAAhB,EAAuC;YACnC;UACH;;UAEDP,2BAA2B,CAACK,MAA5B,CAAmCD,OAAnC;UACAR,QAAQ,CAACiB,IAAT,CAAcF,MAAd;QACH,CAPD;;QASA,IAAIT,UAAU,KAAK,IAAf,IAAuBF,2BAA2B,CAACc,IAA5B,KAAqC,CAAhE,EAAmE;UAC/DrB,MAAM,CAACI,aAAP,CAAqBK,UAArB;UACAA,UAAU,GAAG,IAAb;QACH;MACJ,CAhBD;;MAiBA,IAAMa,kCAAkC,GAAG,SAArCA,kCAAqC,CAACC,KAAD,EAAiC;QACxEA,KAAK,CAACC,cAAN;QAEAjB,2BAA2B,CAACkB,GAA5B,CAAgCF,KAAK,CAACZ,OAAtC,EAA+C;UAC3CO,MAAM,EAAEK,KAAK,CAACL,MAD6B;UAE3CC,SAAS,EAAEJ,IAAI,CAACC,GAAL;QAFgC,CAA/C;;QAKA,IAAIP,UAAU,KAAK,IAAnB,EAAyB;UACrBA,UAAU,GAAGT,MAAM,CAACM,WAAP,CAAmBO,sBAAnB,EAA2CX,gBAAgB,GAAG,CAA9D,CAAb;QACH;MACJ,CAXD;;MAaAF,MAAM,CAAC0B,gBAAP,CAAwB,kBAAxB,EAA4ChB,gCAA5C;MACAV,MAAM,CAAC0B,gBAAP,CAAwB,oBAAxB,EAA8CJ,kCAA9C;MAEA,OAAO,YAAK;QACR,IAAIb,UAAU,KAAK,IAAnB,EAAyB;UACrBT,MAAM,CAACI,aAAP,CAAqBK,UAArB;QACH;;QAEDT,MAAM,CAAC2B,mBAAP,CAA2B,kBAA3B,EAA+CjB,gCAA/C;QACAV,MAAM,CAAC2B,mBAAP,CAA2B,oBAA3B,EAAiDL,kCAAjD;MACH,CAPD;IAQH,CAnDoB,CADlB;EAAA,CAAP;AAqDH,CAtDM","names":["createUnhandledRejection","emitNotSupportedError","window","wrapSubscribeFunction","coolingOffPeriod","observer","clearInterval","undefined","setInterval","possiblyUnhandledRejections","Map","intervalId","deletePossiblyUnhandledRejection","promise","delete","emitUnhandledRejection","latestTimestampToEmit","Date","now","forEach","reason","timestamp","next","size","registerPossiblyUnhandledRejection","event","preventDefault","set","addEventListener","removeEventListener"],"sources":["C:\\Users\\brigh\\storage\\js_project\\Gakugeki_WEB\\node_modules\\subscribable-things\\src\\factories\\unhandled-rejection.ts"],"sourcesContent":["import { TUnhandledRejectionFactory } from '../types';\n\nexport const createUnhandledRejection: TUnhandledRejectionFactory = (emitNotSupportedError, window, wrapSubscribeFunction) => {\n    return (coolingOffPeriod) =>\n        wrapSubscribeFunction((observer) => {\n            if (window === null || window.clearInterval === undefined || window.setInterval === undefined) {\n                return emitNotSupportedError(observer);\n            }\n\n            const possiblyUnhandledRejections = new Map<Promise<any>, { reason: any; timestamp: number }>();\n\n            let intervalId: null | number = null;\n\n            const deletePossiblyUnhandledRejection = ({ promise }: PromiseRejectionEvent) => possiblyUnhandledRejections.delete(promise);\n            const emitUnhandledRejection = () => {\n                const latestTimestampToEmit = Date.now() - coolingOffPeriod;\n\n                possiblyUnhandledRejections.forEach(({ reason, timestamp }, promise) => {\n                    if (timestamp > latestTimestampToEmit) {\n                        return;\n                    }\n\n                    possiblyUnhandledRejections.delete(promise);\n                    observer.next(reason);\n                });\n\n                if (intervalId !== null && possiblyUnhandledRejections.size === 0) {\n                    window.clearInterval(intervalId);\n                    intervalId = null;\n                }\n            };\n            const registerPossiblyUnhandledRejection = (event: PromiseRejectionEvent) => {\n                event.preventDefault();\n\n                possiblyUnhandledRejections.set(event.promise, {\n                    reason: event.reason,\n                    timestamp: Date.now()\n                });\n\n                if (intervalId === null) {\n                    intervalId = window.setInterval(emitUnhandledRejection, coolingOffPeriod / 2);\n                }\n            };\n\n            window.addEventListener('rejectionhandled', deletePossiblyUnhandledRejection);\n            window.addEventListener('unhandledrejection', registerPossiblyUnhandledRejection);\n\n            return () => {\n                if (intervalId !== null) {\n                    window.clearInterval(intervalId);\n                }\n\n                window.removeEventListener('rejectionhandled', deletePossiblyUnhandledRejection);\n                window.removeEventListener('unhandledrejection', registerPossiblyUnhandledRejection);\n            };\n        });\n};\n"]},"metadata":{},"sourceType":"module"}