{"ast":null,"code":"/**\n * Firefox up to version 62 did not kick off the processing of the StereoPannerNode if the value of pan was zero.\n */\nexport var createTestStereoPannerNodeDefaultValueSupport = function createTestStereoPannerNodeDefaultValueSupport(nativeOfflineAudioContextConstructor) {\n  return function () {\n    if (nativeOfflineAudioContextConstructor === null) {\n      return Promise.resolve(false);\n    }\n\n    var nativeOfflineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);\n    /*\n     * Bug #105: Safari does not support the StereoPannerNode. Therefore the returned value should normally be false but the faker does\n     * support the tested behaviour.\n     */\n\n    if (nativeOfflineAudioContext.createStereoPanner === undefined) {\n      return Promise.resolve(true);\n    } // Bug #62: Safari does not support ConstantSourceNodes.\n\n\n    if (nativeOfflineAudioContext.createConstantSource === undefined) {\n      return Promise.resolve(true);\n    }\n\n    var constantSourceNode = nativeOfflineAudioContext.createConstantSource();\n    var stereoPanner = nativeOfflineAudioContext.createStereoPanner();\n    constantSourceNode.channelCount = 1;\n    constantSourceNode.offset.value = 1;\n    stereoPanner.channelCount = 1;\n    constantSourceNode.start();\n    constantSourceNode.connect(stereoPanner).connect(nativeOfflineAudioContext.destination);\n    return nativeOfflineAudioContext.startRendering().then(function (buffer) {\n      return buffer.getChannelData(0)[0] !== 1;\n    });\n  };\n};","map":{"version":3,"mappings":"AAEA;;;AAGA,OAAO,IAAMA,6CAA6C,GAAoD,SAAjGA,6CAAiG,CAC1GC,oCAD0G,EAE1G;EACA,OAAO,YAAK;IACR,IAAIA,oCAAoC,KAAK,IAA7C,EAAmD;MAC/C,OAAOC,OAAO,CAACC,OAAR,CAAgB,KAAhB,CAAP;IACH;;IAED,IAAMC,yBAAyB,GAAG,IAAIH,oCAAJ,CAAyC,CAAzC,EAA4C,CAA5C,EAA+C,KAA/C,CAAlC;IAEA;;;;;IAIA,IAAIG,yBAAyB,CAACC,kBAA1B,KAAiDC,SAArD,EAAgE;MAC5D,OAAOJ,OAAO,CAACC,OAAR,CAAgB,IAAhB,CAAP;IACH,CAbO,CAeR;;;IACA,IAAIC,yBAAyB,CAACG,oBAA1B,KAAmDD,SAAvD,EAAkE;MAC9D,OAAOJ,OAAO,CAACC,OAAR,CAAgB,IAAhB,CAAP;IACH;;IAED,IAAMK,kBAAkB,GAAGJ,yBAAyB,CAACG,oBAA1B,EAA3B;IACA,IAAME,YAAY,GAAGL,yBAAyB,CAACC,kBAA1B,EAArB;IAEAG,kBAAkB,CAACE,YAAnB,GAAkC,CAAlC;IACAF,kBAAkB,CAACG,MAAnB,CAA0BC,KAA1B,GAAkC,CAAlC;IAEAH,YAAY,CAACC,YAAb,GAA4B,CAA5B;IAEAF,kBAAkB,CAACK,KAAnB;IAEAL,kBAAkB,CAACM,OAAnB,CAA2BL,YAA3B,EAAyCK,OAAzC,CAAiDV,yBAAyB,CAACW,WAA3E;IAEA,OAAOX,yBAAyB,CAACY,cAA1B,GAA2CC,IAA3C,CAAgD,UAACC,MAAD;MAAA,OAAYA,MAAM,CAACC,cAAP,CAAsB,CAAtB,EAAyB,CAAzB,MAAgC,CAA5C;IAAA,CAAhD,CAAP;EACH,CAjCD;AAkCH,CArCM","names":["createTestStereoPannerNodeDefaultValueSupport","nativeOfflineAudioContextConstructor","Promise","resolve","nativeOfflineAudioContext","createStereoPanner","undefined","createConstantSource","constantSourceNode","stereoPanner","channelCount","offset","value","start","connect","destination","startRendering","then","buffer","getChannelData"],"sources":["C:\\Users\\brigh\\storage\\js_project\\Gakugeki_WEB\\node_modules\\standardized-audio-context\\src\\factories\\test-stereo-panner-node-default-value-support.ts"],"sourcesContent":["import { TTestStereoPannerNodeDefaultValueSupportFactory } from '../types';\n\n/**\n * Firefox up to version 62 did not kick off the processing of the StereoPannerNode if the value of pan was zero.\n */\nexport const createTestStereoPannerNodeDefaultValueSupport: TTestStereoPannerNodeDefaultValueSupportFactory = (\n    nativeOfflineAudioContextConstructor\n) => {\n    return () => {\n        if (nativeOfflineAudioContextConstructor === null) {\n            return Promise.resolve(false);\n        }\n\n        const nativeOfflineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);\n\n        /*\n         * Bug #105: Safari does not support the StereoPannerNode. Therefore the returned value should normally be false but the faker does\n         * support the tested behaviour.\n         */\n        if (nativeOfflineAudioContext.createStereoPanner === undefined) {\n            return Promise.resolve(true);\n        }\n\n        // Bug #62: Safari does not support ConstantSourceNodes.\n        if (nativeOfflineAudioContext.createConstantSource === undefined) {\n            return Promise.resolve(true);\n        }\n\n        const constantSourceNode = nativeOfflineAudioContext.createConstantSource();\n        const stereoPanner = nativeOfflineAudioContext.createStereoPanner();\n\n        constantSourceNode.channelCount = 1;\n        constantSourceNode.offset.value = 1;\n\n        stereoPanner.channelCount = 1;\n\n        constantSourceNode.start();\n\n        constantSourceNode.connect(stereoPanner).connect(nativeOfflineAudioContext.destination);\n\n        return nativeOfflineAudioContext.startRendering().then((buffer) => buffer.getChannelData(0)[0] !== 1);\n    };\n};\n"]},"metadata":{},"sourceType":"module"}