{"ast":null,"code":"import _classCallCheck from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nexport var createMediaStreamAudioSourceNodeConstructor = function createMediaStreamAudioSourceNodeConstructor(audioNodeConstructor, createNativeMediaStreamAudioSourceNode, getNativeContext, isNativeOfflineAudioContext) {\n  return /*#__PURE__*/function (_audioNodeConstructor) {\n    _inherits(MediaStreamAudioSourceNode, _audioNodeConstructor);\n\n    var _super = _createSuper(MediaStreamAudioSourceNode);\n\n    function MediaStreamAudioSourceNode(context, options) {\n      var _this;\n\n      _classCallCheck(this, MediaStreamAudioSourceNode);\n\n      var nativeContext = getNativeContext(context);\n      var nativeMediaStreamAudioSourceNode = createNativeMediaStreamAudioSourceNode(nativeContext, options); // Bug #172: Safari allows to create a MediaStreamAudioSourceNode with an OfflineAudioContext.\n\n      if (isNativeOfflineAudioContext(nativeContext)) {\n        throw new TypeError();\n      }\n\n      _this = _super.call(this, context, true, nativeMediaStreamAudioSourceNode, null);\n      _this._nativeMediaStreamAudioSourceNode = nativeMediaStreamAudioSourceNode;\n      return _this;\n    }\n\n    _createClass(MediaStreamAudioSourceNode, [{\n      key: \"mediaStream\",\n      get: function get() {\n        return this._nativeMediaStreamAudioSourceNode.mediaStream;\n      }\n    }]);\n\n    return MediaStreamAudioSourceNode;\n  }(audioNodeConstructor);\n};","map":{"version":3,"mappings":";;;;AAGA,OAAO,IAAMA,2CAA2C,GAAkD,SAA7FA,2CAA6F,CACtGC,oBADsG,EAEtGC,sCAFsG,EAGtGC,gBAHsG,EAItGC,2BAJsG,EAKtG;EACA;IAAA;;IAAA;;IAII,oCAAYC,OAAZ,EAAwBC,OAAxB,EAA+D;MAAA;;MAAA;;MAC3D,IAAMC,aAAa,GAAGJ,gBAAgB,CAACE,OAAD,CAAtC;MACA,IAAMG,gCAAgC,GAAGN,sCAAsC,CAACK,aAAD,EAAgBD,OAAhB,CAA/E,CAF2D,CAI3D;;MACA,IAAIF,2BAA2B,CAACG,aAAD,CAA/B,EAAgD;QAC5C,MAAM,IAAIE,SAAJ,EAAN;MACH;;MAED,0BAAMJ,OAAN,EAAe,IAAf,EAAqBG,gCAArB,EAA8E,IAA9E;MAEA,MAAKE,iCAAL,GAAyCF,gCAAzC;MAX2D;IAY9D;;IAhBL;MAAA;MAAA,KAkBI,eAAe;QACX,OAAO,KAAKE,iCAAL,CAAuCC,WAA9C;MACH;IApBL;;IAAA;EAAA,EAAgGV,oBAAhG;AAsBH,CA5BM","names":["createMediaStreamAudioSourceNodeConstructor","audioNodeConstructor","createNativeMediaStreamAudioSourceNode","getNativeContext","isNativeOfflineAudioContext","context","options","nativeContext","nativeMediaStreamAudioSourceNode","TypeError","_nativeMediaStreamAudioSourceNode","mediaStream"],"sources":["C:\\Users\\brigh\\storage\\js_project\\Gakugeki_WEB\\node_modules\\standardized-audio-context\\src\\factories\\media-stream-audio-source-node-constructor.ts"],"sourcesContent":["import { IAudioContext, IMediaStreamAudioSourceNode, IMediaStreamAudioSourceOptions, IMinimalAudioContext } from '../interfaces';\nimport { TAudioNodeRenderer, TMediaStreamAudioSourceNodeConstructorFactory, TNativeMediaStreamAudioSourceNode } from '../types';\n\nexport const createMediaStreamAudioSourceNodeConstructor: TMediaStreamAudioSourceNodeConstructorFactory = (\n    audioNodeConstructor,\n    createNativeMediaStreamAudioSourceNode,\n    getNativeContext,\n    isNativeOfflineAudioContext\n) => {\n    return class MediaStreamAudioSourceNode<T extends IAudioContext | IMinimalAudioContext> extends audioNodeConstructor<T>\n        implements IMediaStreamAudioSourceNode<T> {\n        private _nativeMediaStreamAudioSourceNode: TNativeMediaStreamAudioSourceNode;\n\n        constructor(context: T, options: IMediaStreamAudioSourceOptions) {\n            const nativeContext = getNativeContext(context);\n            const nativeMediaStreamAudioSourceNode = createNativeMediaStreamAudioSourceNode(nativeContext, options);\n\n            // Bug #172: Safari allows to create a MediaStreamAudioSourceNode with an OfflineAudioContext.\n            if (isNativeOfflineAudioContext(nativeContext)) {\n                throw new TypeError();\n            }\n\n            super(context, true, nativeMediaStreamAudioSourceNode, <TAudioNodeRenderer<T>>null);\n\n            this._nativeMediaStreamAudioSourceNode = nativeMediaStreamAudioSourceNode;\n        }\n\n        get mediaStream(): MediaStream {\n            return this._nativeMediaStreamAudioSourceNode.mediaStream;\n        }\n    };\n};\n"]},"metadata":{},"sourceType":"module"}