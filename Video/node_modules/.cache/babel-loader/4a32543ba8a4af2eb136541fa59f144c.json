{"ast":null,"code":"import _objectSpread from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nexport var createBaseAudioContextConstructor = function createBaseAudioContextConstructor(addAudioWorkletModule, analyserNodeConstructor, audioBufferConstructor, audioBufferSourceNodeConstructor, biquadFilterNodeConstructor, channelMergerNodeConstructor, channelSplitterNodeConstructor, constantSourceNodeConstructor, convolverNodeConstructor, _decodeAudioData, delayNodeConstructor, dynamicsCompressorNodeConstructor, gainNodeConstructor, iIRFilterNodeConstructor, minimalBaseAudioContextConstructor, oscillatorNodeConstructor, pannerNodeConstructor, periodicWaveConstructor, stereoPannerNodeConstructor, waveShaperNodeConstructor) {\n  return /*#__PURE__*/function (_minimalBaseAudioCont) {\n    _inherits(BaseAudioContext, _minimalBaseAudioCont);\n\n    var _super = _createSuper(BaseAudioContext);\n\n    function BaseAudioContext(_nativeContext, numberOfChannels) {\n      var _this;\n\n      _classCallCheck(this, BaseAudioContext);\n\n      _this = _super.call(this, _nativeContext, numberOfChannels);\n      _this._nativeContext = _nativeContext;\n      _this._audioWorklet = addAudioWorkletModule === undefined ? undefined : {\n        addModule: function addModule(moduleURL, options) {\n          return addAudioWorkletModule(_assertThisInitialized(_this), moduleURL, options);\n        }\n      };\n      return _this;\n    }\n\n    _createClass(BaseAudioContext, [{\n      key: \"audioWorklet\",\n      get: function get() {\n        return this._audioWorklet;\n      }\n    }, {\n      key: \"createAnalyser\",\n      value: function createAnalyser() {\n        return new analyserNodeConstructor(this);\n      }\n    }, {\n      key: \"createBiquadFilter\",\n      value: function createBiquadFilter() {\n        return new biquadFilterNodeConstructor(this);\n      }\n    }, {\n      key: \"createBuffer\",\n      value: function createBuffer(numberOfChannels, length, sampleRate) {\n        return new audioBufferConstructor({\n          length: length,\n          numberOfChannels: numberOfChannels,\n          sampleRate: sampleRate\n        });\n      }\n    }, {\n      key: \"createBufferSource\",\n      value: function createBufferSource() {\n        return new audioBufferSourceNodeConstructor(this);\n      }\n    }, {\n      key: \"createChannelMerger\",\n      value: function createChannelMerger() {\n        var numberOfInputs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 6;\n        return new channelMergerNodeConstructor(this, {\n          numberOfInputs: numberOfInputs\n        });\n      }\n    }, {\n      key: \"createChannelSplitter\",\n      value: function createChannelSplitter() {\n        var numberOfOutputs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 6;\n        return new channelSplitterNodeConstructor(this, {\n          numberOfOutputs: numberOfOutputs\n        });\n      }\n    }, {\n      key: \"createConstantSource\",\n      value: function createConstantSource() {\n        return new constantSourceNodeConstructor(this);\n      }\n    }, {\n      key: \"createConvolver\",\n      value: function createConvolver() {\n        return new convolverNodeConstructor(this);\n      }\n    }, {\n      key: \"createDelay\",\n      value: function createDelay() {\n        var maxDelayTime = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n        return new delayNodeConstructor(this, {\n          maxDelayTime: maxDelayTime\n        });\n      }\n    }, {\n      key: \"createDynamicsCompressor\",\n      value: function createDynamicsCompressor() {\n        return new dynamicsCompressorNodeConstructor(this);\n      }\n    }, {\n      key: \"createGain\",\n      value: function createGain() {\n        return new gainNodeConstructor(this);\n      }\n    }, {\n      key: \"createIIRFilter\",\n      value: function createIIRFilter(feedforward, feedback) {\n        return new iIRFilterNodeConstructor(this, {\n          feedback: feedback,\n          feedforward: feedforward\n        });\n      }\n    }, {\n      key: \"createOscillator\",\n      value: function createOscillator() {\n        return new oscillatorNodeConstructor(this);\n      }\n    }, {\n      key: \"createPanner\",\n      value: function createPanner() {\n        return new pannerNodeConstructor(this);\n      }\n    }, {\n      key: \"createPeriodicWave\",\n      value: function createPeriodicWave(real, imag) {\n        var constraints = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n          disableNormalization: false\n        };\n        return new periodicWaveConstructor(this, _objectSpread(_objectSpread({}, constraints), {}, {\n          imag: imag,\n          real: real\n        }));\n      }\n    }, {\n      key: \"createStereoPanner\",\n      value: function createStereoPanner() {\n        return new stereoPannerNodeConstructor(this);\n      }\n    }, {\n      key: \"createWaveShaper\",\n      value: function createWaveShaper() {\n        return new waveShaperNodeConstructor(this);\n      }\n    }, {\n      key: \"decodeAudioData\",\n      value: function decodeAudioData(audioData, successCallback, errorCallback) {\n        return _decodeAudioData(this._nativeContext, audioData).then(function (audioBuffer) {\n          if (typeof successCallback === 'function') {\n            successCallback(audioBuffer);\n          }\n\n          return audioBuffer;\n        }, function (err) {\n          if (typeof errorCallback === 'function') {\n            errorCallback(err);\n          }\n\n          throw err;\n        });\n      }\n    }]);\n\n    return BaseAudioContext;\n  }(minimalBaseAudioContextConstructor);\n};","map":{"version":3,"mappings":"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","names":["createBaseAudioContextConstructor","addAudioWorkletModule","analyserNodeConstructor","audioBufferConstructor","audioBufferSourceNodeConstructor","biquadFilterNodeConstructor","channelMergerNodeConstructor","channelSplitterNodeConstructor","constantSourceNodeConstructor","convolverNodeConstructor","decodeAudioData","delayNodeConstructor","dynamicsCompressorNodeConstructor","gainNodeConstructor","iIRFilterNodeConstructor","minimalBaseAudioContextConstructor","oscillatorNodeConstructor","pannerNodeConstructor","periodicWaveConstructor","stereoPannerNodeConstructor","waveShaperNodeConstructor","_nativeContext","numberOfChannels","_audioWorklet","undefined","addModule","moduleURL","options","length","sampleRate","numberOfInputs","numberOfOutputs","maxDelayTime","feedforward","feedback","real","imag","constraints","disableNormalization","audioData","successCallback","errorCallback","then","audioBuffer","err"],"sources":["C:\\Users\\brigh\\storage\\js_project\\Gakugeki_WEB\\node_modules\\standardized-audio-context\\src\\factories\\base-audio-context-constructor.ts"],"sourcesContent":["import {\n    IAnalyserNode,\n    IAudioBuffer,\n    IAudioBufferSourceNode,\n    IAudioNode,\n    IAudioWorklet,\n    IBaseAudioContext,\n    IBiquadFilterNode,\n    IConstantSourceNode,\n    IConvolverNode,\n    IDelayNode,\n    IDynamicsCompressorNode,\n    IGainNode,\n    IIIRFilterNode,\n    IOscillatorNode,\n    IPannerNode,\n    IPeriodicWave,\n    IPeriodicWaveConstraints,\n    IStereoPannerNode,\n    IWaveShaperNode,\n    IWorkletOptions\n} from '../interfaces';\nimport { TBaseAudioContextConstructorFactory, TContext, TDecodeErrorCallback, TDecodeSuccessCallback, TNativeContext } from '../types';\n\nexport const createBaseAudioContextConstructor: TBaseAudioContextConstructorFactory = (\n    addAudioWorkletModule,\n    analyserNodeConstructor,\n    audioBufferConstructor,\n    audioBufferSourceNodeConstructor,\n    biquadFilterNodeConstructor,\n    channelMergerNodeConstructor,\n    channelSplitterNodeConstructor,\n    constantSourceNodeConstructor,\n    convolverNodeConstructor,\n    decodeAudioData,\n    delayNodeConstructor,\n    dynamicsCompressorNodeConstructor,\n    gainNodeConstructor,\n    iIRFilterNodeConstructor,\n    minimalBaseAudioContextConstructor,\n    oscillatorNodeConstructor,\n    pannerNodeConstructor,\n    periodicWaveConstructor,\n    stereoPannerNodeConstructor,\n    waveShaperNodeConstructor\n) => {\n    return class BaseAudioContext<T extends TContext> extends minimalBaseAudioContextConstructor<T> implements IBaseAudioContext<T> {\n        private _audioWorklet: undefined | IAudioWorklet;\n\n        constructor(private _nativeContext: TNativeContext, numberOfChannels: number) {\n            super(_nativeContext, numberOfChannels);\n\n            this._audioWorklet =\n                addAudioWorkletModule === undefined\n                    ? undefined\n                    : {\n                          addModule: (moduleURL: string, options?: IWorkletOptions) => {\n                              return addAudioWorkletModule(<T>(<unknown>this), moduleURL, options);\n                          }\n                      };\n        }\n\n        get audioWorklet(): undefined | IAudioWorklet {\n            return this._audioWorklet;\n        }\n\n        public createAnalyser(): IAnalyserNode<T> {\n            return new analyserNodeConstructor(<T>(<unknown>this));\n        }\n\n        public createBiquadFilter(): IBiquadFilterNode<T> {\n            return new biquadFilterNodeConstructor(<T>(<unknown>this));\n        }\n\n        public createBuffer(numberOfChannels: number, length: number, sampleRate: number): IAudioBuffer {\n            return new audioBufferConstructor({ length, numberOfChannels, sampleRate });\n        }\n\n        public createBufferSource(): IAudioBufferSourceNode<T> {\n            return new audioBufferSourceNodeConstructor(<T>(<unknown>this));\n        }\n\n        public createChannelMerger(numberOfInputs = 6): IAudioNode<T> {\n            return new channelMergerNodeConstructor(<T>(<unknown>this), { numberOfInputs });\n        }\n\n        public createChannelSplitter(numberOfOutputs = 6): IAudioNode<T> {\n            return new channelSplitterNodeConstructor(<T>(<unknown>this), { numberOfOutputs });\n        }\n\n        public createConstantSource(): IConstantSourceNode<T> {\n            return new constantSourceNodeConstructor(<T>(<unknown>this));\n        }\n\n        public createConvolver(): IConvolverNode<T> {\n            return new convolverNodeConstructor(<T>(<unknown>this));\n        }\n\n        public createDelay(maxDelayTime = 1): IDelayNode<T> {\n            return new delayNodeConstructor(<T>(<unknown>this), { maxDelayTime });\n        }\n\n        public createDynamicsCompressor(): IDynamicsCompressorNode<T> {\n            return new dynamicsCompressorNodeConstructor(<T>(<unknown>this));\n        }\n\n        public createGain(): IGainNode<T> {\n            return new gainNodeConstructor(<T>(<unknown>this));\n        }\n\n        public createIIRFilter(feedforward: Iterable<number>, feedback: Iterable<number>): IIIRFilterNode<T> {\n            return new iIRFilterNodeConstructor(<T>(<unknown>this), { feedback, feedforward });\n        }\n\n        public createOscillator(): IOscillatorNode<T> {\n            return new oscillatorNodeConstructor(<T>(<unknown>this));\n        }\n\n        public createPanner(): IPannerNode<T> {\n            return new pannerNodeConstructor(<T>(<unknown>this));\n        }\n\n        public createPeriodicWave(\n            real: Iterable<number>,\n            imag: Iterable<number>,\n            constraints: Partial<IPeriodicWaveConstraints> = { disableNormalization: false }\n        ): IPeriodicWave {\n            return new periodicWaveConstructor(<T>(<unknown>this), { ...constraints, imag, real });\n        }\n\n        public createStereoPanner(): IStereoPannerNode<T> {\n            return new stereoPannerNodeConstructor(<T>(<unknown>this));\n        }\n\n        public createWaveShaper(): IWaveShaperNode<T> {\n            return new waveShaperNodeConstructor(<T>(<unknown>this));\n        }\n\n        public decodeAudioData(\n            audioData: ArrayBuffer,\n            successCallback?: TDecodeSuccessCallback,\n            errorCallback?: TDecodeErrorCallback\n        ): Promise<IAudioBuffer> {\n            return decodeAudioData(this._nativeContext, audioData).then(\n                (audioBuffer) => {\n                    if (typeof successCallback === 'function') {\n                        successCallback(audioBuffer);\n                    }\n\n                    return audioBuffer;\n                },\n                (err) => {\n                    if (typeof errorCallback === 'function') {\n                        errorCallback(err);\n                    }\n\n                    throw err;\n                }\n            );\n        }\n    };\n};\n"]},"metadata":{},"sourceType":"module"}