{"ast":null,"code":"import _classCallCheck from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nexport var createAudioDestinationNodeConstructor = function createAudioDestinationNodeConstructor(audioNodeConstructor, createAudioDestinationNodeRenderer, createIndexSizeError, createInvalidStateError, createNativeAudioDestinationNode, getNativeContext, isNativeOfflineAudioContext, renderInputsOfAudioNode) {\n  return /*#__PURE__*/function (_audioNodeConstructor) {\n    _inherits(AudioDestinationNode, _audioNodeConstructor);\n\n    var _super = _createSuper(AudioDestinationNode);\n\n    function AudioDestinationNode(context, channelCount) {\n      var _this;\n\n      _classCallCheck(this, AudioDestinationNode);\n\n      var nativeContext = getNativeContext(context);\n      var isOffline = isNativeOfflineAudioContext(nativeContext);\n      var nativeAudioDestinationNode = createNativeAudioDestinationNode(nativeContext, channelCount, isOffline);\n      var audioDestinationNodeRenderer = isOffline ? createAudioDestinationNodeRenderer(renderInputsOfAudioNode) : null;\n      _this = _super.call(this, context, false, nativeAudioDestinationNode, audioDestinationNodeRenderer);\n      _this._isNodeOfNativeOfflineAudioContext = isOffline;\n      _this._nativeAudioDestinationNode = nativeAudioDestinationNode;\n      return _this;\n    }\n\n    _createClass(AudioDestinationNode, [{\n      key: \"channelCount\",\n      get: function get() {\n        return this._nativeAudioDestinationNode.channelCount;\n      },\n      set: function set(value) {\n        // Bug #52: Chrome, Edge & Safari do not throw an exception at all.\n        // Bug #54: Firefox does throw an IndexSizeError.\n        if (this._isNodeOfNativeOfflineAudioContext) {\n          throw createInvalidStateError();\n        } // Bug #47: The AudioDestinationNode in Safari does not initialize the maxChannelCount property correctly.\n\n\n        if (value > this._nativeAudioDestinationNode.maxChannelCount) {\n          throw createIndexSizeError();\n        }\n\n        this._nativeAudioDestinationNode.channelCount = value;\n      }\n    }, {\n      key: \"channelCountMode\",\n      get: function get() {\n        return this._nativeAudioDestinationNode.channelCountMode;\n      },\n      set: function set(value) {\n        // Bug #53: No browser does throw an exception yet.\n        if (this._isNodeOfNativeOfflineAudioContext) {\n          throw createInvalidStateError();\n        }\n\n        this._nativeAudioDestinationNode.channelCountMode = value;\n      }\n    }, {\n      key: \"maxChannelCount\",\n      get: function get() {\n        return this._nativeAudioDestinationNode.maxChannelCount;\n      }\n    }]);\n\n    return AudioDestinationNode;\n  }(audioNodeConstructor);\n};","map":{"version":3,"mappings":";;;;AASA,OAAO,IAAMA,qCAAqC,GAA4C,SAAjFA,qCAAiF,CAC1FC,oBAD0F,EAE1FC,kCAF0F,EAG1FC,oBAH0F,EAI1FC,uBAJ0F,EAK1FC,gCAL0F,EAM1FC,gBAN0F,EAO1FC,2BAP0F,EAQ1FC,uBAR0F,EAS1F;EACA;IAAA;;IAAA;;IAKI,8BAAYC,OAAZ,EAAwBC,YAAxB,EAA4C;MAAA;;MAAA;;MACxC,IAAMC,aAAa,GAAGL,gBAAgB,CAACG,OAAD,CAAtC;MACA,IAAMG,SAAS,GAAGL,2BAA2B,CAACI,aAAD,CAA7C;MACA,IAAME,0BAA0B,GAAGR,gCAAgC,CAACM,aAAD,EAAgBD,YAAhB,EAA8BE,SAA9B,CAAnE;MACA,IAAME,4BAA4B,GAC7BF,SAAS,GAAGV,kCAAkC,CAACM,uBAAD,CAArC,GAAiE,IAD/E;MAIA,0BAAMC,OAAN,EAAe,KAAf,EAAsBI,0BAAtB,EAAkDC,4BAAlD;MAEA,MAAKC,kCAAL,GAA0CH,SAA1C;MACA,MAAKI,2BAAL,GAAmCH,0BAAnC;MAXwC;IAY3C;;IAjBL;MAAA;MAAA,KAmBI,eAAgB;QACZ,OAAO,KAAKG,2BAAL,CAAiCN,YAAxC;MACH,CArBL;MAAA,KAuBI,aAAiBO,KAAjB,EAAsB;QAClB;QACA;QACA,IAAI,KAAKF,kCAAT,EAA6C;UACzC,MAAMX,uBAAuB,EAA7B;QACH,CALiB,CAOlB;;;QACA,IAAIa,KAAK,GAAG,KAAKD,2BAAL,CAAiCE,eAA7C,EAA8D;UAC1D,MAAMf,oBAAoB,EAA1B;QACH;;QAED,KAAKa,2BAAL,CAAiCN,YAAjC,GAAgDO,KAAhD;MACH;IApCL;MAAA;MAAA,KAsCI,eAAoB;QAChB,OAAO,KAAKD,2BAAL,CAAiCG,gBAAxC;MACH,CAxCL;MAAA,KA0CI,aAAqBF,KAArB,EAA0B;QACtB;QACA,IAAI,KAAKF,kCAAT,EAA6C;UACzC,MAAMX,uBAAuB,EAA7B;QACH;;QAED,KAAKY,2BAAL,CAAiCG,gBAAjC,GAAoDF,KAApD;MACH;IAjDL;MAAA;MAAA,KAmDI,eAAmB;QACf,OAAO,KAAKD,2BAAL,CAAiCE,eAAxC;MACH;IArDL;;IAAA;EAAA,EAA8DjB,oBAA9D;AAuDH,CAjEM","names":["createAudioDestinationNodeConstructor","audioNodeConstructor","createAudioDestinationNodeRenderer","createIndexSizeError","createInvalidStateError","createNativeAudioDestinationNode","getNativeContext","isNativeOfflineAudioContext","renderInputsOfAudioNode","context","channelCount","nativeContext","isOffline","nativeAudioDestinationNode","audioDestinationNodeRenderer","_isNodeOfNativeOfflineAudioContext","_nativeAudioDestinationNode","value","maxChannelCount","channelCountMode"],"sources":["C:\\Users\\brigh\\storage\\js_project\\Gakugeki_WEB\\node_modules\\standardized-audio-context\\src\\factories\\audio-destination-node-constructor.ts"],"sourcesContent":["import { IAudioDestinationNode } from '../interfaces';\nimport {\n    TAudioDestinationNodeConstructorFactory,\n    TAudioNodeRenderer,\n    TChannelCountMode,\n    TContext,\n    TNativeAudioDestinationNode\n} from '../types';\n\nexport const createAudioDestinationNodeConstructor: TAudioDestinationNodeConstructorFactory = (\n    audioNodeConstructor,\n    createAudioDestinationNodeRenderer,\n    createIndexSizeError,\n    createInvalidStateError,\n    createNativeAudioDestinationNode,\n    getNativeContext,\n    isNativeOfflineAudioContext,\n    renderInputsOfAudioNode\n) => {\n    return class AudioDestinationNode<T extends TContext> extends audioNodeConstructor<T> implements IAudioDestinationNode<T> {\n        private _isNodeOfNativeOfflineAudioContext: boolean;\n\n        private _nativeAudioDestinationNode: TNativeAudioDestinationNode;\n\n        constructor(context: T, channelCount: number) {\n            const nativeContext = getNativeContext(context);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const nativeAudioDestinationNode = createNativeAudioDestinationNode(nativeContext, channelCount, isOffline);\n            const audioDestinationNodeRenderer = <TAudioNodeRenderer<T, this>>(\n                (isOffline ? createAudioDestinationNodeRenderer(renderInputsOfAudioNode) : null)\n            );\n\n            super(context, false, nativeAudioDestinationNode, audioDestinationNodeRenderer);\n\n            this._isNodeOfNativeOfflineAudioContext = isOffline;\n            this._nativeAudioDestinationNode = nativeAudioDestinationNode;\n        }\n\n        get channelCount(): number {\n            return this._nativeAudioDestinationNode.channelCount;\n        }\n\n        set channelCount(value) {\n            // Bug #52: Chrome, Edge & Safari do not throw an exception at all.\n            // Bug #54: Firefox does throw an IndexSizeError.\n            if (this._isNodeOfNativeOfflineAudioContext) {\n                throw createInvalidStateError();\n            }\n\n            // Bug #47: The AudioDestinationNode in Safari does not initialize the maxChannelCount property correctly.\n            if (value > this._nativeAudioDestinationNode.maxChannelCount) {\n                throw createIndexSizeError();\n            }\n\n            this._nativeAudioDestinationNode.channelCount = value;\n        }\n\n        get channelCountMode(): TChannelCountMode {\n            return this._nativeAudioDestinationNode.channelCountMode;\n        }\n\n        set channelCountMode(value) {\n            // Bug #53: No browser does throw an exception yet.\n            if (this._isNodeOfNativeOfflineAudioContext) {\n                throw createInvalidStateError();\n            }\n\n            this._nativeAudioDestinationNode.channelCountMode = value;\n        }\n\n        get maxChannelCount(): number {\n            return this._nativeAudioDestinationNode.maxChannelCount;\n        }\n    };\n};\n"]},"metadata":{},"sourceType":"module"}