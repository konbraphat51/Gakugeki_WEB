{"ast":null,"code":"export var createDecodeWebMChunk = function createDecodeWebMChunk(readElementContent, readElementType) {\n  return function (dataView, elementType, channelCount) {\n    var contents = [];\n    var currentElementType = elementType;\n    var offset = 0;\n\n    while (offset < dataView.byteLength) {\n      if (currentElementType === null) {\n        var lengthAndType = readElementType(dataView, offset);\n\n        if (lengthAndType === null) {\n          break;\n        }\n\n        var length = lengthAndType.length,\n            type = lengthAndType.type;\n        currentElementType = type;\n        offset += length;\n      } else {\n        var contentAndLength = readElementContent(dataView, offset, currentElementType, channelCount);\n\n        if (contentAndLength === null) {\n          break;\n        }\n\n        var content = contentAndLength.content,\n            _length = contentAndLength.length;\n        currentElementType = null;\n        offset += _length;\n\n        if (content !== null) {\n          contents.push(content);\n        }\n      }\n    }\n\n    return {\n      contents: contents,\n      currentElementType: currentElementType,\n      offset: offset\n    };\n  };\n};","map":{"version":3,"mappings":"AAEA,OAAO,IAAMA,qBAAqB,GAA4B,SAAjDA,qBAAiD,CAACC,kBAAD,EAAqBC,eAArB,EAAwC;EAClG,OAAO,UAACC,QAAD,EAAWC,WAAX,EAAwBC,YAAxB,EAAwC;IAC3C,IAAMC,QAAQ,GAAgC,EAA9C;IAEA,IAAIC,kBAAkB,GAAGH,WAAzB;IACA,IAAII,MAAM,GAAG,CAAb;;IAEA,OAAOA,MAAM,GAAGL,QAAQ,CAACM,UAAzB,EAAqC;MACjC,IAAIF,kBAAkB,KAAK,IAA3B,EAAiC;QAC7B,IAAMG,aAAa,GAAGR,eAAe,CAACC,QAAD,EAAWK,MAAX,CAArC;;QAEA,IAAIE,aAAa,KAAK,IAAtB,EAA4B;UACxB;QACH;;QAED,IAAQC,MAAR,GAAyBD,aAAzB,CAAQC,MAAR;QAAA,IAAgBC,IAAhB,GAAyBF,aAAzB,CAAgBE,IAAhB;QAEAL,kBAAkB,GAAGK,IAArB;QACAJ,MAAM,IAAIG,MAAV;MACH,CAXD,MAWO;QACH,IAAME,gBAAgB,GAAGZ,kBAAkB,CAACE,QAAD,EAAWK,MAAX,EAAmBD,kBAAnB,EAAuCF,YAAvC,CAA3C;;QAEA,IAAIQ,gBAAgB,KAAK,IAAzB,EAA+B;UAC3B;QACH;;QAED,IAAQC,OAAR,GAA4BD,gBAA5B,CAAQC,OAAR;QAAA,IAAiBH,OAAjB,GAA4BE,gBAA5B,CAAiBF,MAAjB;QAEAJ,kBAAkB,GAAG,IAArB;QACAC,MAAM,IAAIG,OAAV;;QAEA,IAAIG,OAAO,KAAK,IAAhB,EAAsB;UAClBR,QAAQ,CAACS,IAAT,CAAcD,OAAd;QACH;MACJ;IACJ;;IAED,OAAO;MAAER,QAAQ,EAARA,QAAF;MAAYC,kBAAkB,EAAlBA,kBAAZ;MAAgCC,MAAM,EAANA;IAAhC,CAAP;EACH,CArCD;AAsCH,CAvCM","names":["createDecodeWebMChunk","readElementContent","readElementType","dataView","elementType","channelCount","contents","currentElementType","offset","byteLength","lengthAndType","length","type","contentAndLength","content","push"],"sources":["C:\\Users\\brigh\\storage\\js_project\\Gakugeki_WEB\\node_modules\\extendable-media-recorder\\src\\factories\\decode-web-m-chunk.ts"],"sourcesContent":["import { TDecodeWebMChunkFactory } from '../types';\n\nexport const createDecodeWebMChunk: TDecodeWebMChunkFactory = (readElementContent, readElementType) => {\n    return (dataView, elementType, channelCount) => {\n        const contents: (readonly Float32Array[])[] = [];\n\n        let currentElementType = elementType;\n        let offset = 0;\n\n        while (offset < dataView.byteLength) {\n            if (currentElementType === null) {\n                const lengthAndType = readElementType(dataView, offset);\n\n                if (lengthAndType === null) {\n                    break;\n                }\n\n                const { length, type } = lengthAndType;\n\n                currentElementType = type;\n                offset += length;\n            } else {\n                const contentAndLength = readElementContent(dataView, offset, currentElementType, channelCount);\n\n                if (contentAndLength === null) {\n                    break;\n                }\n\n                const { content, length } = contentAndLength;\n\n                currentElementType = null;\n                offset += length;\n\n                if (content !== null) {\n                    contents.push(content);\n                }\n            }\n        }\n\n        return { contents, currentElementType, offset };\n    };\n};\n"]},"metadata":{},"sourceType":"module"}