{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { cloneAudioWorkletNodeOptions } from './clone-audio-worklet-node-options';\nexport var createAudioWorkletProcessorPromise = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(processorConstructor, audioWorkletNodeOptions) {\n    var clonedAudioWorkletNodeOptions;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return cloneAudioWorkletNodeOptions(audioWorkletNodeOptions);\n\n          case 2:\n            clonedAudioWorkletNodeOptions = _context.sent;\n            return _context.abrupt(\"return\", new processorConstructor(clonedAudioWorkletNodeOptions));\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function createAudioWorkletProcessorPromise(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"mappings":";;AACA,SAASA,4BAAT,QAA6C,oCAA7C;AAEA,OAAO,IAAMC,kCAAkC;EAAA,sEAAG,iBAC9CC,oBAD8C,EAE9CC,uBAF8C;IAAA;IAAA;MAAA;QAAA;UAAA;YAAA;YAAA,OAIFH,4BAA4B,CAACG,uBAAD,CAJ1B;;UAAA;YAIxCC,6BAJwC;YAAA,iCAMvC,IAAIF,oBAAJ,CAAyBE,6BAAzB,CANuC;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAAH;;EAAA,gBAAlCH,kCAAkC;IAAA;EAAA;AAAA,GAAxC","names":["cloneAudioWorkletNodeOptions","createAudioWorkletProcessorPromise","processorConstructor","audioWorkletNodeOptions","clonedAudioWorkletNodeOptions"],"sources":["C:\\Users\\brigh\\storage\\js_project\\Gakugeki_WEB\\node_modules\\standardized-audio-context\\src\\helpers\\create-audio-worklet-processor-promise.ts"],"sourcesContent":["import { IAudioWorkletNodeOptions, IAudioWorkletProcessor, IAudioWorkletProcessorConstructor } from '../interfaces';\nimport { cloneAudioWorkletNodeOptions } from './clone-audio-worklet-node-options';\n\nexport const createAudioWorkletProcessorPromise = async (\n    processorConstructor: IAudioWorkletProcessorConstructor,\n    audioWorkletNodeOptions: IAudioWorkletNodeOptions\n): Promise<IAudioWorkletProcessor> => {\n    const clonedAudioWorkletNodeOptions = await cloneAudioWorkletNodeOptions(audioWorkletNodeOptions);\n\n    return new processorConstructor(clonedAudioWorkletNodeOptions);\n};\n"]},"metadata":{},"sourceType":"module"}