{"ast":null,"code":"export var createWakeLock = function createWakeLock(emitNotSupportedError, window, wrapSubscribeFunction) {\n  return function (type) {\n    return wrapSubscribeFunction(function (observer) {\n      if (window === null || window.navigator === undefined || window.navigator.wakeLock === undefined) {\n        return emitNotSupportedError(observer);\n      }\n\n      var releaseWakeLock = function releaseWakeLock(wakeLockSentinel) {\n        return wakeLockSentinel.release().catch(function () {// Ignore errors.\n        });\n      };\n\n      var removeReleaseEventListener = function removeReleaseEventListener(wakeLockSentinel) {\n        wakeLockSentinel.onrelease = null;\n      };\n\n      var isActive = true;\n\n      var unsubscribeWhileRequesting = function unsubscribeWhileRequesting() {\n        isActive = false;\n      };\n\n      var unsubscribe = unsubscribeWhileRequesting;\n\n      var requestWakeLock = function requestWakeLock() {\n        return window.navigator.wakeLock.request(type).then(function (wakeLockSentinel) {\n          if (isActive) {\n            observer.next(true);\n          }\n\n          if (isActive) {\n            wakeLockSentinel.onrelease = function () {\n              observer.next(false);\n              unsubscribe = unsubscribeWhileRequesting;\n              removeReleaseEventListener(wakeLockSentinel);\n              requestWakeLock();\n            };\n\n            unsubscribe = function unsubscribe() {\n              removeReleaseEventListener(wakeLockSentinel);\n              releaseWakeLock(wakeLockSentinel);\n            };\n          } else {\n            releaseWakeLock(wakeLockSentinel);\n          }\n        }, function (err) {\n          if (isActive) {\n            observer.error(err);\n          }\n        });\n      };\n\n      requestWakeLock();\n      return function () {\n        return unsubscribe();\n      };\n    });\n  };\n};","map":{"version":3,"mappings":"AAGA,OAAO,IAAMA,cAAc,GAAqB,SAAnCA,cAAmC,CAACC,qBAAD,EAAwBC,MAAxB,EAAgCC,qBAAhC,EAAyD;EACrG,OAAO,UAACC,IAAD;IAAA,OACHD,qBAAqB,CAAC,UAACE,QAAD,EAAa;MAC/B,IAAIH,MAAM,KAAK,IAAX,IAAmBA,MAAM,CAACI,SAAP,KAAqBC,SAAxC,IAAqDL,MAAM,CAACI,SAAP,CAAiBE,QAAjB,KAA8BD,SAAvF,EAAkG;QAC9F,OAAON,qBAAqB,CAACI,QAAD,CAA5B;MACH;;MAED,IAAMI,eAAe,GAAG,SAAlBA,eAAkB,CAACC,gBAAD;QAAA,OACpBA,gBAAgB,CAACC,OAAjB,GAA2BC,KAA3B,CAAiC,YAAK,CAClC;QACH,CAFD,CADoB;MAAA,CAAxB;;MAIA,IAAMC,0BAA0B,GAAG,SAA7BA,0BAA6B,CAACH,gBAAD,EAAwC;QACvEA,gBAAgB,CAACI,SAAjB,GAA6B,IAA7B;MACH,CAFD;;MAIA,IAAIC,QAAQ,GAAG,IAAf;;MAEA,IAAMC,0BAA0B,GAAG,SAA7BA,0BAA6B,GAAK;QACpCD,QAAQ,GAAG,KAAX;MACH,CAFD;;MAIA,IAAIE,WAAW,GAAGD,0BAAlB;;MAEA,IAAME,eAAe,GAAG,SAAlBA,eAAkB;QAAA,OACpBhB,MAAM,CAACI,SAAP,CAAiBE,QAAjB,CAA0BW,OAA1B,CAAkCf,IAAlC,EAAwCgB,IAAxC,CACI,UAACV,gBAAD,EAAqB;UACjB,IAAIK,QAAJ,EAAc;YACVV,QAAQ,CAACgB,IAAT,CAAc,IAAd;UACH;;UAED,IAAIN,QAAJ,EAAc;YACVL,gBAAgB,CAACI,SAAjB,GAA6B,YAAK;cAC9BT,QAAQ,CAACgB,IAAT,CAAc,KAAd;cAEAJ,WAAW,GAAGD,0BAAd;cAEAH,0BAA0B,CAACH,gBAAD,CAA1B;cACAQ,eAAe;YAClB,CAPD;;YASAD,WAAW,GAAG,uBAAK;cACfJ,0BAA0B,CAACH,gBAAD,CAA1B;cACAD,eAAe,CAACC,gBAAD,CAAf;YACH,CAHD;UAIH,CAdD,MAcO;YACHD,eAAe,CAACC,gBAAD,CAAf;UACH;QACJ,CAvBL,EAwBI,UAACY,GAAD,EAAQ;UACJ,IAAIP,QAAJ,EAAc;YACVV,QAAQ,CAACkB,KAAT,CAAeD,GAAf;UACH;QACJ,CA5BL,CADoB;MAAA,CAAxB;;MAgCAJ,eAAe;MAEf,OAAO;QAAA,OAAMD,WAAW,EAAjB;MAAA,CAAP;IACH,CAxDoB,CADlB;EAAA,CAAP;AA0DH,CA3DM","names":["createWakeLock","emitNotSupportedError","window","wrapSubscribeFunction","type","observer","navigator","undefined","wakeLock","releaseWakeLock","wakeLockSentinel","release","catch","removeReleaseEventListener","onrelease","isActive","unsubscribeWhileRequesting","unsubscribe","requestWakeLock","request","then","next","err","error"],"sources":["C:\\Users\\brigh\\storage\\js_project\\Gakugeki_WEB\\node_modules\\subscribable-things\\src\\factories\\wake-lock.ts"],"sourcesContent":["import { IWakeLockSentinel } from '../interfaces';\nimport { TWakeLockFactory } from '../types';\n\nexport const createWakeLock: TWakeLockFactory = (emitNotSupportedError, window, wrapSubscribeFunction) => {\n    return (type) =>\n        wrapSubscribeFunction((observer) => {\n            if (window === null || window.navigator === undefined || window.navigator.wakeLock === undefined) {\n                return emitNotSupportedError(observer);\n            }\n\n            const releaseWakeLock = (wakeLockSentinel: IWakeLockSentinel) =>\n                wakeLockSentinel.release().catch(() => {\n                    // Ignore errors.\n                });\n            const removeReleaseEventListener = (wakeLockSentinel: IWakeLockSentinel) => {\n                wakeLockSentinel.onrelease = null;\n            };\n\n            let isActive = true;\n\n            const unsubscribeWhileRequesting = () => {\n                isActive = false;\n            };\n\n            let unsubscribe = unsubscribeWhileRequesting;\n\n            const requestWakeLock = () =>\n                window.navigator.wakeLock.request(type).then(\n                    (wakeLockSentinel) => {\n                        if (isActive) {\n                            observer.next(true);\n                        }\n\n                        if (isActive) {\n                            wakeLockSentinel.onrelease = () => {\n                                observer.next(false);\n\n                                unsubscribe = unsubscribeWhileRequesting;\n\n                                removeReleaseEventListener(wakeLockSentinel);\n                                requestWakeLock();\n                            };\n\n                            unsubscribe = () => {\n                                removeReleaseEventListener(wakeLockSentinel);\n                                releaseWakeLock(wakeLockSentinel);\n                            };\n                        } else {\n                            releaseWakeLock(wakeLockSentinel);\n                        }\n                    },\n                    (err) => {\n                        if (isActive) {\n                            observer.error(err);\n                        }\n                    }\n                );\n\n            requestWakeLock();\n\n            return () => unsubscribe();\n        });\n};\n"]},"metadata":{},"sourceType":"module"}