{"ast":null,"code":"export var createIsAnyOfflineAudioContext = function createIsAnyOfflineAudioContext(contextStore, isNativeOfflineAudioContext) {\n  return function (anything) {\n    var nativeContext = contextStore.get(anything);\n    return isNativeOfflineAudioContext(nativeContext) || isNativeOfflineAudioContext(anything);\n  };\n};","map":{"version":3,"mappings":"AAGA,OAAO,IAAMA,8BAA8B,GAAqC,SAAnEA,8BAAmE,CAACC,YAAD,EAAeC,2BAAf,EAA8C;EAC1H,OAAO,UAACC,QAAD,EAA0G;IAC7G,IAAMC,aAAa,GAAGH,YAAY,CAACI,GAAb,CAAsBF,QAAtB,CAAtB;IAEA,OAAOD,2BAA2B,CAACE,aAAD,CAA3B,IAA8CF,2BAA2B,CAACC,QAAD,CAAhF;EACH,CAJD;AAKH,CANM","names":["createIsAnyOfflineAudioContext","contextStore","isNativeOfflineAudioContext","anything","nativeContext","get"],"sources":["C:\\Users\\brigh\\storage\\js_project\\Gakugeki_WEB\\node_modules\\standardized-audio-context\\src\\factories\\is-any-offline-audio-context.ts"],"sourcesContent":["import { IMinimalOfflineAudioContext, IOfflineAudioContext } from '../interfaces';\nimport { TIsAnyOfflineAudioContextFactory, TNativeOfflineAudioContext } from '../types';\n\nexport const createIsAnyOfflineAudioContext: TIsAnyOfflineAudioContextFactory = (contextStore, isNativeOfflineAudioContext) => {\n    return (anything): anything is IMinimalOfflineAudioContext | IOfflineAudioContext | TNativeOfflineAudioContext => {\n        const nativeContext = contextStore.get(<any>anything);\n\n        return isNativeOfflineAudioContext(nativeContext) || isNativeOfflineAudioContext(anything);\n    };\n};\n"]},"metadata":{},"sourceType":"module"}