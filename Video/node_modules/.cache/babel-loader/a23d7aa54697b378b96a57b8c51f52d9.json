{"ast":null,"code":"import _toConsumableArray from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport { isAudioNode } from '../guards/audio-node';\nimport { isDelayNode } from '../guards/delay-node';\nexport var createDetectCycles = function createDetectCycles(audioParamAudioNodeStore, getAudioNodeConnections, getValueForKey) {\n  return function detectCycles(chain, nextLink) {\n    var audioNode = isAudioNode(nextLink) ? nextLink : getValueForKey(audioParamAudioNodeStore, nextLink);\n\n    if (isDelayNode(audioNode)) {\n      return [];\n    }\n\n    if (chain[0] === audioNode) {\n      return [chain];\n    }\n\n    if (chain.includes(audioNode)) {\n      return [];\n    }\n\n    var _getAudioNodeConnecti = getAudioNodeConnections(audioNode),\n        outputs = _getAudioNodeConnecti.outputs;\n\n    return Array.from(outputs).map(function (outputConnection) {\n      return detectCycles([].concat(_toConsumableArray(chain), [audioNode]), outputConnection[0]);\n    }).reduce(function (mergedCycles, nestedCycles) {\n      return mergedCycles.concat(nestedCycles);\n    }, []);\n  };\n};","map":{"version":3,"mappings":";AAAA,SAASA,WAAT,QAA4B,sBAA5B;AACA,SAASC,WAAT,QAA4B,sBAA5B;AAIA,OAAO,IAAMC,kBAAkB,GAAyB,SAA3CA,kBAA2C,CAACC,wBAAD,EAA2BC,uBAA3B,EAAoDC,cAApD,EAAsE;EAC1H,OAAO,SAASC,YAAT,CAA0CC,KAA1C,EAAkEC,QAAlE,EAAuG;IAC1G,IAAMC,SAAS,GAAGT,WAAW,CAACQ,QAAD,CAAX,GAAwBA,QAAxB,GAAkDH,cAAc,CAACF,wBAAD,EAA2BK,QAA3B,CAAlF;;IAEA,IAAIP,WAAW,CAACQ,SAAD,CAAf,EAA4B;MACxB,OAAO,EAAP;IACH;;IAED,IAAIF,KAAK,CAAC,CAAD,CAAL,KAAaE,SAAjB,EAA4B;MACxB,OAAO,CAACF,KAAD,CAAP;IACH;;IAED,IAAIA,KAAK,CAACG,QAAN,CAAeD,SAAf,CAAJ,EAA+B;MAC3B,OAAO,EAAP;IACH;;IAED,4BAAoBL,uBAAuB,CAACK,SAAD,CAA3C;IAAA,IAAQE,OAAR,yBAAQA,OAAR;;IAEA,OAAOC,KAAK,CAACC,IAAN,CAAWF,OAAX,EACFG,GADE,CACE,UAACC,gBAAD;MAAA,OAAsBT,YAAY,8BAAKC,KAAL,IAAYE,SAAZ,IAAwBM,gBAAgB,CAAC,CAAD,CAAxC,CAAlC;IAAA,CADF,EAEFC,MAFE,CAEK,UAACC,YAAD,EAAeC,YAAf;MAAA,OAAgCD,YAAY,CAACE,MAAb,CAAoBD,YAApB,CAAhC;IAAA,CAFL,EAEwE,EAFxE,CAAP;EAGH,CApBD;AAqBH,CAtBM","names":["isAudioNode","isDelayNode","createDetectCycles","audioParamAudioNodeStore","getAudioNodeConnections","getValueForKey","detectCycles","chain","nextLink","audioNode","includes","outputs","Array","from","map","outputConnection","reduce","mergedCycles","nestedCycles","concat"],"sources":["C:\\Users\\brigh\\storage\\js_project\\Gakugeki_WEB\\node_modules\\standardized-audio-context\\src\\factories\\detect-cycles.ts"],"sourcesContent":["import { isAudioNode } from '../guards/audio-node';\nimport { isDelayNode } from '../guards/delay-node';\nimport { IAudioNode, IAudioParam } from '../interfaces';\nimport { TContext, TDetectCyclesFactory } from '../types';\n\nexport const createDetectCycles: TDetectCyclesFactory = (audioParamAudioNodeStore, getAudioNodeConnections, getValueForKey) => {\n    return function detectCycles<T extends TContext>(chain: IAudioNode<T>[], nextLink: IAudioNode<T> | IAudioParam): IAudioNode<T>[][] {\n        const audioNode = isAudioNode(nextLink) ? nextLink : <IAudioNode<T>>getValueForKey(audioParamAudioNodeStore, nextLink);\n\n        if (isDelayNode(audioNode)) {\n            return [];\n        }\n\n        if (chain[0] === audioNode) {\n            return [chain];\n        }\n\n        if (chain.includes(audioNode)) {\n            return [];\n        }\n\n        const { outputs } = getAudioNodeConnections(audioNode);\n\n        return Array.from(outputs)\n            .map((outputConnection) => detectCycles([...chain, audioNode], outputConnection[0]))\n            .reduce((mergedCycles, nestedCycles) => mergedCycles.concat(nestedCycles), []);\n    };\n};\n"]},"metadata":{},"sourceType":"module"}