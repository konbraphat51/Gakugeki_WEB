{"ast":null,"code":"import _objectSpread from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nvar DEFAULT_OPTIONS = {\n  channelCount: 2,\n\n  /*\n   * Bug #105: The channelCountMode should be 'clamped-max' according to the spec but is set to 'explicit' to achieve consistent\n   * behavior.\n   */\n  channelCountMode: 'explicit',\n  channelInterpretation: 'speakers',\n  pan: 0\n};\nexport var createStereoPannerNodeConstructor = function createStereoPannerNodeConstructor(audioNodeConstructor, createAudioParam, createNativeStereoPannerNode, createStereoPannerNodeRenderer, getNativeContext, isNativeOfflineAudioContext) {\n  return /*#__PURE__*/function (_audioNodeConstructor) {\n    _inherits(StereoPannerNode, _audioNodeConstructor);\n\n    var _super = _createSuper(StereoPannerNode);\n\n    function StereoPannerNode(context, options) {\n      var _this;\n\n      _classCallCheck(this, StereoPannerNode);\n\n      var nativeContext = getNativeContext(context);\n\n      var mergedOptions = _objectSpread(_objectSpread({}, DEFAULT_OPTIONS), options);\n\n      var nativeStereoPannerNode = createNativeStereoPannerNode(nativeContext, mergedOptions);\n      var isOffline = isNativeOfflineAudioContext(nativeContext);\n      var stereoPannerNodeRenderer = isOffline ? createStereoPannerNodeRenderer() : null;\n      _this = _super.call(this, context, false, nativeStereoPannerNode, stereoPannerNodeRenderer);\n      _this._pan = createAudioParam(_assertThisInitialized(_this), isOffline, nativeStereoPannerNode.pan);\n      return _this;\n    }\n\n    _createClass(StereoPannerNode, [{\n      key: \"pan\",\n      get: function get() {\n        return this._pan;\n      }\n    }]);\n\n    return StereoPannerNode;\n  }(audioNodeConstructor);\n};","map":{"version":3,"mappings":";;;;;;AAGA,IAAMA,eAAe,GAAG;EACpBC,YAAY,EAAE,CADM;;EAEpB;;;;EAIAC,gBAAgB,EAAE,UANE;EAOpBC,qBAAqB,EAAE,UAPH;EAQpBC,GAAG,EAAE;AARe,CAAxB;AAWA,OAAO,IAAMC,iCAAiC,GAAwC,SAAzEA,iCAAyE,CAClFC,oBADkF,EAElFC,gBAFkF,EAGlFC,4BAHkF,EAIlFC,8BAJkF,EAKlFC,gBALkF,EAMlFC,2BANkF,EAOlF;EACA;IAAA;;IAAA;;IAGI,0BAAYC,OAAZ,EAAwBC,OAAxB,EAA+D;MAAA;;MAAA;;MAC3D,IAAMC,aAAa,GAAGJ,gBAAgB,CAACE,OAAD,CAAtC;;MACA,IAAMG,aAAa,mCAAQf,eAAR,GAA4Ba,OAA5B,CAAnB;;MACA,IAAMG,sBAAsB,GAAGR,4BAA4B,CAACM,aAAD,EAAgBC,aAAhB,CAA3D;MACA,IAAME,SAAS,GAAGN,2BAA2B,CAACG,aAAD,CAA7C;MACA,IAAMI,wBAAwB,GAAiCD,SAAS,GAAGR,8BAA8B,EAAjC,GAAsC,IAA9G;MAEA,0BAAMG,OAAN,EAAe,KAAf,EAAsBI,sBAAtB,EAA8CE,wBAA9C;MAEA,MAAKC,IAAL,GAAYZ,gBAAgB,gCAAOU,SAAP,EAAkBD,sBAAsB,CAACZ,GAAzC,CAA5B;MAT2D;IAU9D;;IAbL;MAAA;MAAA,KAeI,eAAO;QACH,OAAO,KAAKe,IAAZ;MACH;IAjBL;;IAAA;EAAA,EAA0Db,oBAA1D;AAmBH,CA3BM","names":["DEFAULT_OPTIONS","channelCount","channelCountMode","channelInterpretation","pan","createStereoPannerNodeConstructor","audioNodeConstructor","createAudioParam","createNativeStereoPannerNode","createStereoPannerNodeRenderer","getNativeContext","isNativeOfflineAudioContext","context","options","nativeContext","mergedOptions","nativeStereoPannerNode","isOffline","stereoPannerNodeRenderer","_pan"],"sources":["C:\\Users\\brigh\\storage\\js_project\\Gakugeki_WEB\\node_modules\\standardized-audio-context\\src\\factories\\stereo-panner-node-constructor.ts"],"sourcesContent":["import { IAudioParam, IStereoPannerNode, IStereoPannerOptions } from '../interfaces';\nimport { TAudioNodeRenderer, TContext, TStereoPannerNodeConstructorFactory } from '../types';\n\nconst DEFAULT_OPTIONS = {\n    channelCount: 2,\n    /*\n     * Bug #105: The channelCountMode should be 'clamped-max' according to the spec but is set to 'explicit' to achieve consistent\n     * behavior.\n     */\n    channelCountMode: 'explicit',\n    channelInterpretation: 'speakers',\n    pan: 0\n} as const;\n\nexport const createStereoPannerNodeConstructor: TStereoPannerNodeConstructorFactory = (\n    audioNodeConstructor,\n    createAudioParam,\n    createNativeStereoPannerNode,\n    createStereoPannerNodeRenderer,\n    getNativeContext,\n    isNativeOfflineAudioContext\n) => {\n    return class StereoPannerNode<T extends TContext> extends audioNodeConstructor<T> implements IStereoPannerNode<T> {\n        private _pan: IAudioParam;\n\n        constructor(context: T, options?: Partial<IStereoPannerOptions>) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeStereoPannerNode = createNativeStereoPannerNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const stereoPannerNodeRenderer = <TAudioNodeRenderer<T, this>>(isOffline ? createStereoPannerNodeRenderer() : null);\n\n            super(context, false, nativeStereoPannerNode, stereoPannerNodeRenderer);\n\n            this._pan = createAudioParam(this, isOffline, nativeStereoPannerNode.pan);\n        }\n\n        get pan(): IAudioParam {\n            return this._pan;\n        }\n    };\n};\n"]},"metadata":{},"sourceType":"module"}