{"ast":null,"code":"import _objectSpread from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { deactivateAudioGraph } from '../helpers/deactivate-audio-graph';\nimport { testPromiseSupport } from '../helpers/test-promise-support';\nvar DEFAULT_OPTIONS = {\n  numberOfChannels: 1\n};\nexport var createOfflineAudioContextConstructor = function createOfflineAudioContextConstructor(baseAudioContextConstructor, cacheTestResult, createInvalidStateError, createNativeOfflineAudioContext, _startRendering) {\n  return /*#__PURE__*/function (_baseAudioContextCons) {\n    _inherits(OfflineAudioContext, _baseAudioContextCons);\n\n    var _super = _createSuper(OfflineAudioContext);\n\n    function OfflineAudioContext(a, b, c) {\n      var _this;\n\n      _classCallCheck(this, OfflineAudioContext);\n\n      var options;\n\n      if (typeof a === 'number' && b !== undefined && c !== undefined) {\n        options = {\n          length: b,\n          numberOfChannels: a,\n          sampleRate: c\n        };\n      } else if (typeof a === 'object') {\n        options = a;\n      } else {\n        throw new Error('The given parameters are not valid.');\n      }\n\n      var _DEFAULT_OPTIONS$opti = _objectSpread(_objectSpread({}, DEFAULT_OPTIONS), options),\n          length = _DEFAULT_OPTIONS$opti.length,\n          numberOfChannels = _DEFAULT_OPTIONS$opti.numberOfChannels,\n          sampleRate = _DEFAULT_OPTIONS$opti.sampleRate;\n\n      var nativeOfflineAudioContext = createNativeOfflineAudioContext(numberOfChannels, length, sampleRate); // #21 Safari does not support promises and therefore would fire the statechange event before the promise can be resolved.\n\n      if (!cacheTestResult(testPromiseSupport, function () {\n        return testPromiseSupport(nativeOfflineAudioContext);\n      })) {\n        nativeOfflineAudioContext.addEventListener('statechange', function () {\n          var i = 0;\n\n          var delayStateChangeEvent = function delayStateChangeEvent(event) {\n            if (_this._state === 'running') {\n              if (i > 0) {\n                nativeOfflineAudioContext.removeEventListener('statechange', delayStateChangeEvent);\n                event.stopImmediatePropagation();\n\n                _this._waitForThePromiseToSettle(event);\n              } else {\n                i += 1;\n              }\n            }\n          };\n\n          return delayStateChangeEvent;\n        }());\n      }\n\n      _this = _super.call(this, nativeOfflineAudioContext, numberOfChannels);\n      _this._length = length;\n      _this._nativeOfflineAudioContext = nativeOfflineAudioContext;\n      _this._state = null;\n      return _this;\n    }\n\n    _createClass(OfflineAudioContext, [{\n      key: \"length\",\n      get: function get() {\n        // Bug #17: Safari does not yet expose the length.\n        if (this._nativeOfflineAudioContext.length === undefined) {\n          return this._length;\n        }\n\n        return this._nativeOfflineAudioContext.length;\n      }\n    }, {\n      key: \"state\",\n      get: function get() {\n        return this._state === null ? this._nativeOfflineAudioContext.state : this._state;\n      }\n    }, {\n      key: \"startRendering\",\n      value: function startRendering() {\n        var _this2 = this;\n\n        /*\n         * Bug #9 & #59: It is theoretically possible that startRendering() will first render a partialOfflineAudioContext. Therefore\n         * the state of the nativeOfflineAudioContext might no transition to running immediately.\n         */\n        if (this._state === 'running') {\n          return Promise.reject(createInvalidStateError());\n        }\n\n        this._state = 'running';\n        return _startRendering(this.destination, this._nativeOfflineAudioContext).finally(function () {\n          _this2._state = null;\n          deactivateAudioGraph(_this2);\n        });\n      }\n    }, {\n      key: \"_waitForThePromiseToSettle\",\n      value: function _waitForThePromiseToSettle(event) {\n        var _this3 = this;\n\n        if (this._state === null) {\n          this._nativeOfflineAudioContext.dispatchEvent(event);\n        } else {\n          setTimeout(function () {\n            return _this3._waitForThePromiseToSettle(event);\n          });\n        }\n      }\n    }]);\n\n    return OfflineAudioContext;\n  }(baseAudioContextConstructor);\n};","map":{"version":3,"mappings":"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","names":["deactivateAudioGraph","testPromiseSupport","DEFAULT_OPTIONS","numberOfChannels","createOfflineAudioContextConstructor","baseAudioContextConstructor","cacheTestResult","createInvalidStateError","createNativeOfflineAudioContext","startRendering","a","b","c","options","undefined","length","sampleRate","Error","nativeOfflineAudioContext","addEventListener","i","delayStateChangeEvent","event","_state","removeEventListener","stopImmediatePropagation","_waitForThePromiseToSettle","_length","_nativeOfflineAudioContext","state","Promise","reject","destination","finally","dispatchEvent","setTimeout"],"sources":["C:\\Users\\brigh\\storage\\js_project\\Gakugeki_WEB\\node_modules\\standardized-audio-context\\src\\factories\\offline-audio-context-constructor.ts"],"sourcesContent":["import { deactivateAudioGraph } from '../helpers/deactivate-audio-graph';\nimport { testPromiseSupport } from '../helpers/test-promise-support';\nimport { IAudioBuffer, IOfflineAudioContext, IOfflineAudioContextOptions } from '../interfaces';\nimport { TAudioContextState, TNativeOfflineAudioContext, TOfflineAudioContextConstructorFactory } from '../types';\n\nconst DEFAULT_OPTIONS = {\n    numberOfChannels: 1\n} as const;\n\nexport const createOfflineAudioContextConstructor: TOfflineAudioContextConstructorFactory = (\n    baseAudioContextConstructor,\n    cacheTestResult,\n    createInvalidStateError,\n    createNativeOfflineAudioContext,\n    startRendering\n) => {\n    return class OfflineAudioContext extends baseAudioContextConstructor<IOfflineAudioContext> implements IOfflineAudioContext {\n        private _length: number;\n\n        private _nativeOfflineAudioContext: TNativeOfflineAudioContext;\n\n        private _state: null | TAudioContextState;\n\n        constructor(options: IOfflineAudioContextOptions);\n        constructor(numberOfChannels: number, length: number, sampleRate: number);\n        constructor(a: number | IOfflineAudioContextOptions, b?: number, c?: number) {\n            let options: IOfflineAudioContextOptions;\n\n            if (typeof a === 'number' && b !== undefined && c !== undefined) {\n                options = { length: b, numberOfChannels: a, sampleRate: c };\n            } else if (typeof a === 'object') {\n                options = a;\n            } else {\n                throw new Error('The given parameters are not valid.');\n            }\n\n            const { length, numberOfChannels, sampleRate } = { ...DEFAULT_OPTIONS, ...options };\n\n            const nativeOfflineAudioContext = createNativeOfflineAudioContext(numberOfChannels, length, sampleRate);\n\n            // #21 Safari does not support promises and therefore would fire the statechange event before the promise can be resolved.\n            if (!cacheTestResult(testPromiseSupport, () => testPromiseSupport(nativeOfflineAudioContext))) {\n                nativeOfflineAudioContext.addEventListener(\n                    'statechange',\n                    (() => {\n                        let i = 0;\n\n                        const delayStateChangeEvent = (event: Event) => {\n                            if (this._state === 'running') {\n                                if (i > 0) {\n                                    nativeOfflineAudioContext.removeEventListener('statechange', delayStateChangeEvent);\n                                    event.stopImmediatePropagation();\n\n                                    this._waitForThePromiseToSettle(event);\n                                } else {\n                                    i += 1;\n                                }\n                            }\n                        };\n\n                        return delayStateChangeEvent;\n                    })()\n                );\n            }\n\n            super(nativeOfflineAudioContext, numberOfChannels);\n\n            this._length = length;\n            this._nativeOfflineAudioContext = nativeOfflineAudioContext;\n            this._state = null;\n        }\n\n        get length(): number {\n            // Bug #17: Safari does not yet expose the length.\n            if (this._nativeOfflineAudioContext.length === undefined) {\n                return this._length;\n            }\n\n            return this._nativeOfflineAudioContext.length;\n        }\n\n        get state(): TAudioContextState {\n            return this._state === null ? this._nativeOfflineAudioContext.state : this._state;\n        }\n\n        public startRendering(): Promise<IAudioBuffer> {\n            /*\n             * Bug #9 & #59: It is theoretically possible that startRendering() will first render a partialOfflineAudioContext. Therefore\n             * the state of the nativeOfflineAudioContext might no transition to running immediately.\n             */\n            if (this._state === 'running') {\n                return Promise.reject(createInvalidStateError());\n            }\n\n            this._state = 'running';\n\n            return startRendering(this.destination, this._nativeOfflineAudioContext).finally(() => {\n                this._state = null;\n\n                deactivateAudioGraph(this);\n            });\n        }\n\n        private _waitForThePromiseToSettle(event: Event): void {\n            if (this._state === null) {\n                this._nativeOfflineAudioContext.dispatchEvent(event);\n            } else {\n                setTimeout(() => this._waitForThePromiseToSettle(event));\n            }\n        }\n    };\n};\n"]},"metadata":{},"sourceType":"module"}