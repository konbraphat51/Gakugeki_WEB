{"ast":null,"code":"export var testPromiseSupport = function testPromiseSupport(nativeContext) {\n  // This 12 numbers represent the 48 bytes of an empty WAVE file with a single sample.\n  var uint32Array = new Uint32Array([1179011410, 40, 1163280727, 544501094, 16, 131073, 44100, 176400, 1048580, 1635017060, 4, 0]);\n\n  try {\n    // Bug #1: Safari requires a successCallback.\n    var promise = nativeContext.decodeAudioData(uint32Array.buffer, function () {// Ignore the success callback.\n    });\n\n    if (promise === undefined) {\n      return false;\n    }\n\n    promise.catch(function () {// Ignore rejected errors.\n    });\n    return true;\n  } catch (_unused) {// Ignore errors.\n  }\n\n  return false;\n};","map":{"version":3,"mappings":"AAEA,OAAO,IAAMA,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,aAAD,EAA2C;EACzE;EACA,IAAMC,WAAW,GAAG,IAAIC,WAAJ,CAAgB,CAAC,UAAD,EAAa,EAAb,EAAiB,UAAjB,EAA6B,SAA7B,EAAwC,EAAxC,EAA4C,MAA5C,EAAoD,KAApD,EAA2D,MAA3D,EAAmE,OAAnE,EAA4E,UAA5E,EAAwF,CAAxF,EAA2F,CAA3F,CAAhB,CAApB;;EAEA,IAAI;IACA;IACA,IAAMC,OAAO,GAAGH,aAAa,CAACI,eAAd,CAA2CH,WAAW,CAACI,MAAvD,EAA+D,YAAK,CAChF;IACH,CAFe,CAAhB;;IAIA,IAAIF,OAAO,KAAKG,SAAhB,EAA2B;MACvB,OAAO,KAAP;IACH;;IAEDH,OAAO,CAACI,KAAR,CAAc,YAAK,CACf;IACH,CAFD;IAIA,OAAO,IAAP;EACH,CAfD,CAeE,gBAAM,CACJ;EACH;;EAED,OAAO,KAAP;AACH,CAxBM","names":["testPromiseSupport","nativeContext","uint32Array","Uint32Array","promise","decodeAudioData","buffer","undefined","catch"],"sources":["C:\\Users\\brigh\\storage\\js_project\\Gakugeki_WEB\\node_modules\\standardized-audio-context\\src\\helpers\\test-promise-support.ts"],"sourcesContent":["import { TNativeContext } from '../types';\n\nexport const testPromiseSupport = (nativeContext: TNativeContext): boolean => {\n    // This 12 numbers represent the 48 bytes of an empty WAVE file with a single sample.\n    const uint32Array = new Uint32Array([1179011410, 40, 1163280727, 544501094, 16, 131073, 44100, 176400, 1048580, 1635017060, 4, 0]);\n\n    try {\n        // Bug #1: Safari requires a successCallback.\n        const promise = nativeContext.decodeAudioData(<ArrayBuffer>uint32Array.buffer, () => {\n            // Ignore the success callback.\n        });\n\n        if (promise === undefined) {\n            return false;\n        }\n\n        promise.catch(() => {\n            // Ignore rejected errors.\n        });\n\n        return true;\n    } catch {\n        // Ignore errors.\n    }\n\n    return false;\n};\n"]},"metadata":{},"sourceType":"module"}