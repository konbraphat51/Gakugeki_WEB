{"ast":null,"code":"import _objectSpread from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nimport { isActiveAudioNode } from '../helpers/is-active-audio-node';\nimport { setInternalStateToActive } from '../helpers/set-internal-state-to-active';\nimport { setInternalStateToPassive } from '../helpers/set-internal-state-to-passive';\nvar DEFAULT_OPTIONS = {\n  channelCount: 2,\n  channelCountMode: 'max',\n  channelInterpretation: 'speakers',\n  offset: 1\n};\nexport var createConstantSourceNodeConstructor = function createConstantSourceNodeConstructor(audioNodeConstructor, createAudioParam, createConstantSourceNodeRendererFactory, createNativeConstantSourceNode, getNativeContext, isNativeOfflineAudioContext, wrapEventListener) {\n  return /*#__PURE__*/function (_audioNodeConstructor) {\n    _inherits(ConstantSourceNode, _audioNodeConstructor);\n\n    var _super = _createSuper(ConstantSourceNode);\n\n    function ConstantSourceNode(context, options) {\n      var _this;\n\n      _classCallCheck(this, ConstantSourceNode);\n\n      var nativeContext = getNativeContext(context);\n\n      var mergedOptions = _objectSpread(_objectSpread({}, DEFAULT_OPTIONS), options);\n\n      var nativeConstantSourceNode = createNativeConstantSourceNode(nativeContext, mergedOptions);\n      var isOffline = isNativeOfflineAudioContext(nativeContext);\n      var constantSourceNodeRenderer = isOffline ? createConstantSourceNodeRendererFactory() : null;\n      _this = _super.call(this, context, false, nativeConstantSourceNode, constantSourceNodeRenderer);\n      _this._constantSourceNodeRenderer = constantSourceNodeRenderer;\n      _this._nativeConstantSourceNode = nativeConstantSourceNode;\n      /*\n       * Bug #62 & #74: Safari does not support ConstantSourceNodes and does not export the correct values for maxValue and minValue\n       * for GainNodes.\n       */\n\n      _this._offset = createAudioParam(_assertThisInitialized(_this), isOffline, nativeConstantSourceNode.offset, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n      _this._onended = null;\n      return _this;\n    }\n\n    _createClass(ConstantSourceNode, [{\n      key: \"offset\",\n      get: function get() {\n        return this._offset;\n      }\n    }, {\n      key: \"onended\",\n      get: function get() {\n        return this._onended;\n      },\n      set: function set(value) {\n        var wrappedListener = typeof value === 'function' ? wrapEventListener(this, value) : null;\n        this._nativeConstantSourceNode.onended = wrappedListener;\n        var nativeOnEnded = this._nativeConstantSourceNode.onended;\n        this._onended = nativeOnEnded !== null && nativeOnEnded === wrappedListener ? value : nativeOnEnded;\n      }\n    }, {\n      key: \"start\",\n      value: function start() {\n        var _this2 = this;\n\n        var when = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n        this._nativeConstantSourceNode.start(when);\n\n        if (this._constantSourceNodeRenderer !== null) {\n          this._constantSourceNodeRenderer.start = when;\n        }\n\n        if (this.context.state !== 'closed') {\n          setInternalStateToActive(this);\n\n          var resetInternalStateToPassive = function resetInternalStateToPassive() {\n            _this2._nativeConstantSourceNode.removeEventListener('ended', resetInternalStateToPassive);\n\n            if (isActiveAudioNode(_this2)) {\n              setInternalStateToPassive(_this2);\n            }\n          };\n\n          this._nativeConstantSourceNode.addEventListener('ended', resetInternalStateToPassive);\n        }\n      }\n    }, {\n      key: \"stop\",\n      value: function stop() {\n        var when = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n        this._nativeConstantSourceNode.stop(when);\n\n        if (this._constantSourceNodeRenderer !== null) {\n          this._constantSourceNodeRenderer.stop = when;\n        }\n      }\n    }]);\n\n    return ConstantSourceNode;\n  }(audioNodeConstructor);\n};","map":{"version":3,"mappings":"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","names":["MOST_NEGATIVE_SINGLE_FLOAT","MOST_POSITIVE_SINGLE_FLOAT","isActiveAudioNode","setInternalStateToActive","setInternalStateToPassive","DEFAULT_OPTIONS","channelCount","channelCountMode","channelInterpretation","offset","createConstantSourceNodeConstructor","audioNodeConstructor","createAudioParam","createConstantSourceNodeRendererFactory","createNativeConstantSourceNode","getNativeContext","isNativeOfflineAudioContext","wrapEventListener","context","options","nativeContext","mergedOptions","nativeConstantSourceNode","isOffline","constantSourceNodeRenderer","_constantSourceNodeRenderer","_nativeConstantSourceNode","_offset","_onended","value","wrappedListener","onended","nativeOnEnded","when","start","state","resetInternalStateToPassive","removeEventListener","addEventListener","stop"],"sources":["C:\\Users\\brigh\\storage\\js_project\\Gakugeki_WEB\\node_modules\\standardized-audio-context\\src\\factories\\constant-source-node-constructor.ts"],"sourcesContent":["import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nimport { isActiveAudioNode } from '../helpers/is-active-audio-node';\nimport { setInternalStateToActive } from '../helpers/set-internal-state-to-active';\nimport { setInternalStateToPassive } from '../helpers/set-internal-state-to-passive';\nimport { IAudioParam, IAudioScheduledSourceNodeEventMap, IConstantSourceNode, IConstantSourceOptions } from '../interfaces';\nimport {\n    TConstantSourceNodeConstructorFactory,\n    TConstantSourceNodeRenderer,\n    TContext,\n    TEventHandler,\n    TNativeConstantSourceNode\n} from '../types';\n\nconst DEFAULT_OPTIONS = {\n    channelCount: 2,\n    channelCountMode: 'max',\n    channelInterpretation: 'speakers',\n    offset: 1\n} as const;\n\nexport const createConstantSourceNodeConstructor: TConstantSourceNodeConstructorFactory = (\n    audioNodeConstructor,\n    createAudioParam,\n    createConstantSourceNodeRendererFactory,\n    createNativeConstantSourceNode,\n    getNativeContext,\n    isNativeOfflineAudioContext,\n    wrapEventListener\n) => {\n    return class ConstantSourceNode<T extends TContext>\n        extends audioNodeConstructor<T, IAudioScheduledSourceNodeEventMap>\n        implements IConstantSourceNode<T>\n    {\n        private _constantSourceNodeRenderer: TConstantSourceNodeRenderer<T>;\n\n        private _nativeConstantSourceNode: TNativeConstantSourceNode;\n\n        private _offset: IAudioParam;\n\n        private _onended: null | TEventHandler<this>;\n\n        constructor(context: T, options?: Partial<IConstantSourceOptions>) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeConstantSourceNode = createNativeConstantSourceNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const constantSourceNodeRenderer = <TConstantSourceNodeRenderer<T>>(\n                (isOffline ? createConstantSourceNodeRendererFactory() : null)\n            );\n\n            super(context, false, nativeConstantSourceNode, constantSourceNodeRenderer);\n\n            this._constantSourceNodeRenderer = constantSourceNodeRenderer;\n            this._nativeConstantSourceNode = nativeConstantSourceNode;\n            /*\n             * Bug #62 & #74: Safari does not support ConstantSourceNodes and does not export the correct values for maxValue and minValue\n             * for GainNodes.\n             */\n            this._offset = createAudioParam(\n                this,\n                isOffline,\n                nativeConstantSourceNode.offset,\n                MOST_POSITIVE_SINGLE_FLOAT,\n                MOST_NEGATIVE_SINGLE_FLOAT\n            );\n            this._onended = null;\n        }\n\n        get offset(): IAudioParam {\n            return this._offset;\n        }\n\n        get onended(): null | TEventHandler<this> {\n            return this._onended;\n        }\n\n        set onended(value) {\n            const wrappedListener = typeof value === 'function' ? wrapEventListener(this, value) : null;\n\n            this._nativeConstantSourceNode.onended = wrappedListener;\n\n            const nativeOnEnded = this._nativeConstantSourceNode.onended;\n\n            this._onended = nativeOnEnded !== null && nativeOnEnded === wrappedListener ? value : nativeOnEnded;\n        }\n\n        public start(when = 0): void {\n            this._nativeConstantSourceNode.start(when);\n\n            if (this._constantSourceNodeRenderer !== null) {\n                this._constantSourceNodeRenderer.start = when;\n            }\n\n            if (this.context.state !== 'closed') {\n                setInternalStateToActive(this);\n\n                const resetInternalStateToPassive = () => {\n                    this._nativeConstantSourceNode.removeEventListener('ended', resetInternalStateToPassive);\n\n                    if (isActiveAudioNode(this)) {\n                        setInternalStateToPassive(this);\n                    }\n                };\n\n                this._nativeConstantSourceNode.addEventListener('ended', resetInternalStateToPassive);\n            }\n        }\n\n        public stop(when = 0): void {\n            this._nativeConstantSourceNode.stop(when);\n\n            if (this._constantSourceNodeRenderer !== null) {\n                this._constantSourceNodeRenderer.stop = when;\n            }\n        }\n    };\n};\n"]},"metadata":{},"sourceType":"module"}