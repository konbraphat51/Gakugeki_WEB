{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { isAudioNodeOutputConnection } from '../guards/audio-node-output-connection';\nexport var createDecrementCycleCounter = function createDecrementCycleCounter(connectNativeAudioNodeToNativeAudioNode, cycleCounters, getAudioNodeConnections, getNativeAudioNode, getNativeAudioParam, getNativeContext, isActiveAudioNode, isNativeOfflineAudioContext) {\n  return function (audioNode, count) {\n    var cycleCounter = cycleCounters.get(audioNode);\n\n    if (cycleCounter === undefined) {\n      throw new Error('Missing the expected cycle count.');\n    }\n\n    var nativeContext = getNativeContext(audioNode.context);\n    var isOffline = isNativeOfflineAudioContext(nativeContext);\n\n    if (cycleCounter === count) {\n      cycleCounters.delete(audioNode);\n\n      if (!isOffline && isActiveAudioNode(audioNode)) {\n        var nativeSourceAudioNode = getNativeAudioNode(audioNode);\n\n        var _getAudioNodeConnecti = getAudioNodeConnections(audioNode),\n            outputs = _getAudioNodeConnecti.outputs;\n\n        var _iterator = _createForOfIteratorHelper(outputs),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var output = _step.value;\n\n            if (isAudioNodeOutputConnection(output)) {\n              var nativeDestinationAudioNode = getNativeAudioNode(output[0]);\n              connectNativeAudioNodeToNativeAudioNode(nativeSourceAudioNode, nativeDestinationAudioNode, output[1], output[2]);\n            } else {\n              var nativeDestinationAudioParam = getNativeAudioParam(output[0]);\n              nativeSourceAudioNode.connect(nativeDestinationAudioParam, output[1]);\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n    } else {\n      cycleCounters.set(audioNode, cycleCounter - count);\n    }\n  };\n};","map":{"version":3,"mappings":";AAAA,SAASA,2BAAT,QAA4C,wCAA5C;AAGA,OAAO,IAAMC,2BAA2B,GAAkC,SAA7DA,2BAA6D,CACtEC,uCADsE,EAEtEC,aAFsE,EAGtEC,uBAHsE,EAItEC,kBAJsE,EAKtEC,mBALsE,EAMtEC,gBANsE,EAOtEC,iBAPsE,EAQtEC,2BARsE,EAStE;EACA,OAAO,UAACC,SAAD,EAAYC,KAAZ,EAAqB;IACxB,IAAMC,YAAY,GAAGT,aAAa,CAACU,GAAd,CAAkBH,SAAlB,CAArB;;IAEA,IAAIE,YAAY,KAAKE,SAArB,EAAgC;MAC5B,MAAM,IAAIC,KAAJ,CAAU,mCAAV,CAAN;IACH;;IAED,IAAMC,aAAa,GAAGT,gBAAgB,CAACG,SAAS,CAACO,OAAX,CAAtC;IACA,IAAMC,SAAS,GAAGT,2BAA2B,CAACO,aAAD,CAA7C;;IAEA,IAAIJ,YAAY,KAAKD,KAArB,EAA4B;MACxBR,aAAa,CAACgB,MAAd,CAAqBT,SAArB;;MAEA,IAAI,CAACQ,SAAD,IAAcV,iBAAiB,CAACE,SAAD,CAAnC,EAAgD;QAC5C,IAAMU,qBAAqB,GAAGf,kBAAkB,CAACK,SAAD,CAAhD;;QACA,4BAAoBN,uBAAuB,CAACM,SAAD,CAA3C;QAAA,IAAQW,OAAR,yBAAQA,OAAR;;QAF4C,2CAIvBA,OAJuB;QAAA;;QAAA;UAI5C,oDAA8B;YAAA,IAAnBC,MAAmB;;YAC1B,IAAItB,2BAA2B,CAACsB,MAAD,CAA/B,EAAyC;cACrC,IAAMC,0BAA0B,GAAGlB,kBAAkB,CAACiB,MAAM,CAAC,CAAD,CAAP,CAArD;cAEApB,uCAAuC,CAACkB,qBAAD,EAAwBG,0BAAxB,EAAoDD,MAAM,CAAC,CAAD,CAA1D,EAA+DA,MAAM,CAAC,CAAD,CAArE,CAAvC;YACH,CAJD,MAIO;cACH,IAAME,2BAA2B,GAAGlB,mBAAmB,CAACgB,MAAM,CAAC,CAAD,CAAP,CAAvD;cAEAF,qBAAqB,CAACK,OAAtB,CAA8BD,2BAA9B,EAA2DF,MAAM,CAAC,CAAD,CAAjE;YACH;UACJ;QAd2C;UAAA;QAAA;UAAA;QAAA;MAe/C;IACJ,CAnBD,MAmBO;MACHnB,aAAa,CAACuB,GAAd,CAAkBhB,SAAlB,EAA6BE,YAAY,GAAGD,KAA5C;IACH;EACJ,CAhCD;AAiCH,CA3CM","names":["isAudioNodeOutputConnection","createDecrementCycleCounter","connectNativeAudioNodeToNativeAudioNode","cycleCounters","getAudioNodeConnections","getNativeAudioNode","getNativeAudioParam","getNativeContext","isActiveAudioNode","isNativeOfflineAudioContext","audioNode","count","cycleCounter","get","undefined","Error","nativeContext","context","isOffline","delete","nativeSourceAudioNode","outputs","output","nativeDestinationAudioNode","nativeDestinationAudioParam","connect","set"],"sources":["C:\\Users\\brigh\\storage\\js_project\\Gakugeki_WEB\\node_modules\\standardized-audio-context\\src\\factories\\decrement-cycle-counter.ts"],"sourcesContent":["import { isAudioNodeOutputConnection } from '../guards/audio-node-output-connection';\nimport { TDecrementCycleCounterFactory } from '../types';\n\nexport const createDecrementCycleCounter: TDecrementCycleCounterFactory = (\n    connectNativeAudioNodeToNativeAudioNode,\n    cycleCounters,\n    getAudioNodeConnections,\n    getNativeAudioNode,\n    getNativeAudioParam,\n    getNativeContext,\n    isActiveAudioNode,\n    isNativeOfflineAudioContext\n) => {\n    return (audioNode, count) => {\n        const cycleCounter = cycleCounters.get(audioNode);\n\n        if (cycleCounter === undefined) {\n            throw new Error('Missing the expected cycle count.');\n        }\n\n        const nativeContext = getNativeContext(audioNode.context);\n        const isOffline = isNativeOfflineAudioContext(nativeContext);\n\n        if (cycleCounter === count) {\n            cycleCounters.delete(audioNode);\n\n            if (!isOffline && isActiveAudioNode(audioNode)) {\n                const nativeSourceAudioNode = getNativeAudioNode(audioNode);\n                const { outputs } = getAudioNodeConnections(audioNode);\n\n                for (const output of outputs) {\n                    if (isAudioNodeOutputConnection(output)) {\n                        const nativeDestinationAudioNode = getNativeAudioNode(output[0]);\n\n                        connectNativeAudioNodeToNativeAudioNode(nativeSourceAudioNode, nativeDestinationAudioNode, output[1], output[2]);\n                    } else {\n                        const nativeDestinationAudioParam = getNativeAudioParam(output[0]);\n\n                        nativeSourceAudioNode.connect(nativeDestinationAudioParam, output[1]);\n                    }\n                }\n            }\n        } else {\n            cycleCounters.set(audioNode, cycleCounter - count);\n        }\n    };\n};\n"]},"metadata":{},"sourceType":"module"}