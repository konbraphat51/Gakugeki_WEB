{"ast":null,"code":"import _objectSpread from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { isActiveAudioNode } from '../helpers/is-active-audio-node';\nimport { setInternalStateToActive } from '../helpers/set-internal-state-to-active';\nimport { setInternalStateToPassive } from '../helpers/set-internal-state-to-passive';\nvar DEFAULT_OPTIONS = {\n  channelCount: 2,\n  channelCountMode: 'max',\n  channelInterpretation: 'speakers',\n  detune: 0,\n  frequency: 440,\n  periodicWave: undefined,\n  type: 'sine'\n};\nexport var createOscillatorNodeConstructor = function createOscillatorNodeConstructor(audioNodeConstructor, createAudioParam, createNativeOscillatorNode, createOscillatorNodeRenderer, getNativeContext, isNativeOfflineAudioContext, wrapEventListener) {\n  return /*#__PURE__*/function (_audioNodeConstructor) {\n    _inherits(OscillatorNode, _audioNodeConstructor);\n\n    var _super = _createSuper(OscillatorNode);\n\n    function OscillatorNode(context, options) {\n      var _this;\n\n      _classCallCheck(this, OscillatorNode);\n\n      var nativeContext = getNativeContext(context);\n\n      var mergedOptions = _objectSpread(_objectSpread({}, DEFAULT_OPTIONS), options);\n\n      var nativeOscillatorNode = createNativeOscillatorNode(nativeContext, mergedOptions);\n      var isOffline = isNativeOfflineAudioContext(nativeContext);\n      var oscillatorNodeRenderer = isOffline ? createOscillatorNodeRenderer() : null;\n      var nyquist = context.sampleRate / 2;\n      _this = _super.call(this, context, false, nativeOscillatorNode, oscillatorNodeRenderer); // Bug #81: Firefox & Safari do not export the correct values for maxValue and minValue.\n\n      _this._detune = createAudioParam(_assertThisInitialized(_this), isOffline, nativeOscillatorNode.detune, 153600, -153600); // Bug #76: Safari does not export the correct values for maxValue and minValue.\n\n      _this._frequency = createAudioParam(_assertThisInitialized(_this), isOffline, nativeOscillatorNode.frequency, nyquist, -nyquist);\n      _this._nativeOscillatorNode = nativeOscillatorNode;\n      _this._onended = null;\n      _this._oscillatorNodeRenderer = oscillatorNodeRenderer;\n\n      if (_this._oscillatorNodeRenderer !== null && mergedOptions.periodicWave !== undefined) {\n        _this._oscillatorNodeRenderer.periodicWave = mergedOptions.periodicWave;\n      }\n\n      return _this;\n    }\n\n    _createClass(OscillatorNode, [{\n      key: \"detune\",\n      get: function get() {\n        return this._detune;\n      }\n    }, {\n      key: \"frequency\",\n      get: function get() {\n        return this._frequency;\n      }\n    }, {\n      key: \"onended\",\n      get: function get() {\n        return this._onended;\n      },\n      set: function set(value) {\n        var wrappedListener = typeof value === 'function' ? wrapEventListener(this, value) : null;\n        this._nativeOscillatorNode.onended = wrappedListener;\n        var nativeOnEnded = this._nativeOscillatorNode.onended;\n        this._onended = nativeOnEnded !== null && nativeOnEnded === wrappedListener ? value : nativeOnEnded;\n      }\n    }, {\n      key: \"type\",\n      get: function get() {\n        return this._nativeOscillatorNode.type;\n      },\n      set: function set(value) {\n        this._nativeOscillatorNode.type = value;\n\n        if (this._oscillatorNodeRenderer !== null) {\n          this._oscillatorNodeRenderer.periodicWave = null;\n        }\n      }\n    }, {\n      key: \"setPeriodicWave\",\n      value: function setPeriodicWave(periodicWave) {\n        this._nativeOscillatorNode.setPeriodicWave(periodicWave);\n\n        if (this._oscillatorNodeRenderer !== null) {\n          this._oscillatorNodeRenderer.periodicWave = periodicWave;\n        }\n      }\n    }, {\n      key: \"start\",\n      value: function start() {\n        var _this2 = this;\n\n        var when = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n        this._nativeOscillatorNode.start(when);\n\n        if (this._oscillatorNodeRenderer !== null) {\n          this._oscillatorNodeRenderer.start = when;\n        }\n\n        if (this.context.state !== 'closed') {\n          setInternalStateToActive(this);\n\n          var resetInternalStateToPassive = function resetInternalStateToPassive() {\n            _this2._nativeOscillatorNode.removeEventListener('ended', resetInternalStateToPassive);\n\n            if (isActiveAudioNode(_this2)) {\n              setInternalStateToPassive(_this2);\n            }\n          };\n\n          this._nativeOscillatorNode.addEventListener('ended', resetInternalStateToPassive);\n        }\n      }\n    }, {\n      key: \"stop\",\n      value: function stop() {\n        var when = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n        this._nativeOscillatorNode.stop(when);\n\n        if (this._oscillatorNodeRenderer !== null) {\n          this._oscillatorNodeRenderer.stop = when;\n        }\n      }\n    }]);\n\n    return OscillatorNode;\n  }(audioNodeConstructor);\n};","map":{"version":3,"mappings":"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","names":["isActiveAudioNode","setInternalStateToActive","setInternalStateToPassive","DEFAULT_OPTIONS","channelCount","channelCountMode","channelInterpretation","detune","frequency","periodicWave","undefined","type","createOscillatorNodeConstructor","audioNodeConstructor","createAudioParam","createNativeOscillatorNode","createOscillatorNodeRenderer","getNativeContext","isNativeOfflineAudioContext","wrapEventListener","context","options","nativeContext","mergedOptions","nativeOscillatorNode","isOffline","oscillatorNodeRenderer","nyquist","sampleRate","_detune","_frequency","_nativeOscillatorNode","_onended","_oscillatorNodeRenderer","value","wrappedListener","onended","nativeOnEnded","setPeriodicWave","when","start","state","resetInternalStateToPassive","removeEventListener","addEventListener","stop"],"sources":["C:\\Users\\brigh\\storage\\js_project\\Gakugeki_WEB\\node_modules\\standardized-audio-context\\src\\factories\\oscillator-node-constructor.ts"],"sourcesContent":["import { isActiveAudioNode } from '../helpers/is-active-audio-node';\nimport { setInternalStateToActive } from '../helpers/set-internal-state-to-active';\nimport { setInternalStateToPassive } from '../helpers/set-internal-state-to-passive';\nimport {\n    IAudioParam,\n    IAudioScheduledSourceNodeEventMap,\n    IMinimalOfflineAudioContext,\n    IOscillatorNode,\n    IOscillatorNodeRenderer,\n    IOscillatorOptions\n} from '../interfaces';\nimport {\n    TContext,\n    TEventHandler,\n    TNativeOscillatorNode,\n    TOscillatorNodeConstructorFactory,\n    TOscillatorNodeRenderer,\n    TOscillatorType\n} from '../types';\n\nconst DEFAULT_OPTIONS = {\n    channelCount: 2,\n    channelCountMode: 'max', // This attribute has no effect for nodes with no inputs.\n    channelInterpretation: 'speakers', // This attribute has no effect for nodes with no inputs.\n    detune: 0,\n    frequency: 440,\n    periodicWave: undefined,\n    type: 'sine'\n} as const;\n\nexport const createOscillatorNodeConstructor: TOscillatorNodeConstructorFactory = (\n    audioNodeConstructor,\n    createAudioParam,\n    createNativeOscillatorNode,\n    createOscillatorNodeRenderer,\n    getNativeContext,\n    isNativeOfflineAudioContext,\n    wrapEventListener\n) => {\n    return class OscillatorNode<T extends TContext>\n        extends audioNodeConstructor<T, IAudioScheduledSourceNodeEventMap>\n        implements IOscillatorNode<T>\n    {\n        private _detune: IAudioParam;\n\n        private _frequency: IAudioParam;\n\n        private _nativeOscillatorNode: TNativeOscillatorNode;\n\n        private _onended: null | TEventHandler<this>;\n\n        private _oscillatorNodeRenderer: TOscillatorNodeRenderer<T>;\n\n        constructor(context: T, options?: Partial<IOscillatorOptions>) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeOscillatorNode = createNativeOscillatorNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const oscillatorNodeRenderer = <TOscillatorNodeRenderer<T>>(isOffline ? createOscillatorNodeRenderer() : null);\n            const nyquist = context.sampleRate / 2;\n\n            super(context, false, nativeOscillatorNode, oscillatorNodeRenderer);\n\n            // Bug #81: Firefox & Safari do not export the correct values for maxValue and minValue.\n            this._detune = createAudioParam(this, isOffline, nativeOscillatorNode.detune, 153600, -153600);\n            // Bug #76: Safari does not export the correct values for maxValue and minValue.\n            this._frequency = createAudioParam(this, isOffline, nativeOscillatorNode.frequency, nyquist, -nyquist);\n            this._nativeOscillatorNode = nativeOscillatorNode;\n            this._onended = null;\n            this._oscillatorNodeRenderer = oscillatorNodeRenderer;\n\n            if (this._oscillatorNodeRenderer !== null && mergedOptions.periodicWave !== undefined) {\n                (<IOscillatorNodeRenderer<IMinimalOfflineAudioContext>>this._oscillatorNodeRenderer).periodicWave =\n                    mergedOptions.periodicWave;\n            }\n        }\n\n        get detune(): IAudioParam {\n            return this._detune;\n        }\n\n        get frequency(): IAudioParam {\n            return this._frequency;\n        }\n\n        get onended(): null | TEventHandler<this> {\n            return this._onended;\n        }\n\n        set onended(value) {\n            const wrappedListener = typeof value === 'function' ? wrapEventListener(this, value) : null;\n\n            this._nativeOscillatorNode.onended = wrappedListener;\n\n            const nativeOnEnded = this._nativeOscillatorNode.onended;\n\n            this._onended = nativeOnEnded !== null && nativeOnEnded === wrappedListener ? value : nativeOnEnded;\n        }\n\n        get type(): TOscillatorType {\n            return this._nativeOscillatorNode.type;\n        }\n\n        set type(value) {\n            this._nativeOscillatorNode.type = value;\n\n            if (this._oscillatorNodeRenderer !== null) {\n                this._oscillatorNodeRenderer.periodicWave = null;\n            }\n        }\n\n        public setPeriodicWave(periodicWave: PeriodicWave): void {\n            this._nativeOscillatorNode.setPeriodicWave(periodicWave);\n\n            if (this._oscillatorNodeRenderer !== null) {\n                this._oscillatorNodeRenderer.periodicWave = periodicWave;\n            }\n        }\n\n        public start(when = 0): void {\n            this._nativeOscillatorNode.start(when);\n\n            if (this._oscillatorNodeRenderer !== null) {\n                this._oscillatorNodeRenderer.start = when;\n            }\n\n            if (this.context.state !== 'closed') {\n                setInternalStateToActive(this);\n\n                const resetInternalStateToPassive = () => {\n                    this._nativeOscillatorNode.removeEventListener('ended', resetInternalStateToPassive);\n\n                    if (isActiveAudioNode(this)) {\n                        setInternalStateToPassive(this);\n                    }\n                };\n\n                this._nativeOscillatorNode.addEventListener('ended', resetInternalStateToPassive);\n            }\n        }\n\n        public stop(when = 0): void {\n            this._nativeOscillatorNode.stop(when);\n\n            if (this._oscillatorNodeRenderer !== null) {\n                this._oscillatorNodeRenderer.stop = when;\n            }\n        }\n    };\n};\n"]},"metadata":{},"sourceType":"module"}