{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport var createBiquadFilterNodeRendererFactory = function createBiquadFilterNodeRendererFactory(connectAudioParam, createNativeBiquadFilterNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) {\n  return function () {\n    var renderedNativeBiquadFilterNodes = new WeakMap();\n\n    var createBiquadFilterNode = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(proxy, nativeOfflineAudioContext) {\n        var nativeBiquadFilterNode, nativeBiquadFilterNodeIsOwnedByContext, options;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                nativeBiquadFilterNode = getNativeAudioNode(proxy);\n                /*\n                 * If the initially used nativeBiquadFilterNode was not constructed on the same OfflineAudioContext it needs to be created\n                 * again.\n                 */\n\n                nativeBiquadFilterNodeIsOwnedByContext = isOwnedByContext(nativeBiquadFilterNode, nativeOfflineAudioContext);\n\n                if (!nativeBiquadFilterNodeIsOwnedByContext) {\n                  options = {\n                    Q: nativeBiquadFilterNode.Q.value,\n                    channelCount: nativeBiquadFilterNode.channelCount,\n                    channelCountMode: nativeBiquadFilterNode.channelCountMode,\n                    channelInterpretation: nativeBiquadFilterNode.channelInterpretation,\n                    detune: nativeBiquadFilterNode.detune.value,\n                    frequency: nativeBiquadFilterNode.frequency.value,\n                    gain: nativeBiquadFilterNode.gain.value,\n                    type: nativeBiquadFilterNode.type\n                  };\n                  nativeBiquadFilterNode = createNativeBiquadFilterNode(nativeOfflineAudioContext, options);\n                }\n\n                renderedNativeBiquadFilterNodes.set(nativeOfflineAudioContext, nativeBiquadFilterNode);\n\n                if (nativeBiquadFilterNodeIsOwnedByContext) {\n                  _context.next = 15;\n                  break;\n                }\n\n                _context.next = 7;\n                return renderAutomation(nativeOfflineAudioContext, proxy.Q, nativeBiquadFilterNode.Q);\n\n              case 7:\n                _context.next = 9;\n                return renderAutomation(nativeOfflineAudioContext, proxy.detune, nativeBiquadFilterNode.detune);\n\n              case 9:\n                _context.next = 11;\n                return renderAutomation(nativeOfflineAudioContext, proxy.frequency, nativeBiquadFilterNode.frequency);\n\n              case 11:\n                _context.next = 13;\n                return renderAutomation(nativeOfflineAudioContext, proxy.gain, nativeBiquadFilterNode.gain);\n\n              case 13:\n                _context.next = 23;\n                break;\n\n              case 15:\n                _context.next = 17;\n                return connectAudioParam(nativeOfflineAudioContext, proxy.Q, nativeBiquadFilterNode.Q);\n\n              case 17:\n                _context.next = 19;\n                return connectAudioParam(nativeOfflineAudioContext, proxy.detune, nativeBiquadFilterNode.detune);\n\n              case 19:\n                _context.next = 21;\n                return connectAudioParam(nativeOfflineAudioContext, proxy.frequency, nativeBiquadFilterNode.frequency);\n\n              case 21:\n                _context.next = 23;\n                return connectAudioParam(nativeOfflineAudioContext, proxy.gain, nativeBiquadFilterNode.gain);\n\n              case 23:\n                _context.next = 25;\n                return renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeBiquadFilterNode);\n\n              case 25:\n                return _context.abrupt(\"return\", nativeBiquadFilterNode);\n\n              case 26:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function createBiquadFilterNode(_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    return {\n      render: function render(proxy, nativeOfflineAudioContext) {\n        var renderedNativeBiquadFilterNode = renderedNativeBiquadFilterNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeBiquadFilterNode !== undefined) {\n          return Promise.resolve(renderedNativeBiquadFilterNode);\n        }\n\n        return createBiquadFilterNode(proxy, nativeOfflineAudioContext);\n      }\n    };\n  };\n};","map":{"version":3,"mappings":"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","names":["isOwnedByContext","createBiquadFilterNodeRendererFactory","connectAudioParam","createNativeBiquadFilterNode","getNativeAudioNode","renderAutomation","renderInputsOfAudioNode","renderedNativeBiquadFilterNodes","WeakMap","createBiquadFilterNode","proxy","nativeOfflineAudioContext","nativeBiquadFilterNode","nativeBiquadFilterNodeIsOwnedByContext","options","Q","value","channelCount","channelCountMode","channelInterpretation","detune","frequency","gain","type","set","render","renderedNativeBiquadFilterNode","get","undefined","Promise","resolve"],"sources":["C:\\Users\\brigh\\storage\\js_project\\Gakugeki_WEB\\node_modules\\standardized-audio-context\\src\\factories\\biquad-filter-node-renderer-factory.ts"],"sourcesContent":["import { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { IBiquadFilterNode, IMinimalOfflineAudioContext, IOfflineAudioContext } from '../interfaces';\nimport { TBiquadFilterNodeRendererFactoryFactory, TNativeBiquadFilterNode, TNativeOfflineAudioContext } from '../types';\n\nexport const createBiquadFilterNodeRendererFactory: TBiquadFilterNodeRendererFactoryFactory = (\n    connectAudioParam,\n    createNativeBiquadFilterNode,\n    getNativeAudioNode,\n    renderAutomation,\n    renderInputsOfAudioNode\n) => {\n    return <T extends IMinimalOfflineAudioContext | IOfflineAudioContext>() => {\n        const renderedNativeBiquadFilterNodes = new WeakMap<TNativeOfflineAudioContext, TNativeBiquadFilterNode>();\n\n        const createBiquadFilterNode = async (proxy: IBiquadFilterNode<T>, nativeOfflineAudioContext: TNativeOfflineAudioContext) => {\n            let nativeBiquadFilterNode = getNativeAudioNode<T, TNativeBiquadFilterNode>(proxy);\n\n            /*\n             * If the initially used nativeBiquadFilterNode was not constructed on the same OfflineAudioContext it needs to be created\n             * again.\n             */\n            const nativeBiquadFilterNodeIsOwnedByContext = isOwnedByContext(nativeBiquadFilterNode, nativeOfflineAudioContext);\n\n            if (!nativeBiquadFilterNodeIsOwnedByContext) {\n                const options = {\n                    Q: nativeBiquadFilterNode.Q.value,\n                    channelCount: nativeBiquadFilterNode.channelCount,\n                    channelCountMode: nativeBiquadFilterNode.channelCountMode,\n                    channelInterpretation: nativeBiquadFilterNode.channelInterpretation,\n                    detune: nativeBiquadFilterNode.detune.value,\n                    frequency: nativeBiquadFilterNode.frequency.value,\n                    gain: nativeBiquadFilterNode.gain.value,\n                    type: nativeBiquadFilterNode.type\n                };\n\n                nativeBiquadFilterNode = createNativeBiquadFilterNode(nativeOfflineAudioContext, options);\n            }\n\n            renderedNativeBiquadFilterNodes.set(nativeOfflineAudioContext, nativeBiquadFilterNode);\n\n            if (!nativeBiquadFilterNodeIsOwnedByContext) {\n                await renderAutomation(nativeOfflineAudioContext, proxy.Q, nativeBiquadFilterNode.Q);\n                await renderAutomation(nativeOfflineAudioContext, proxy.detune, nativeBiquadFilterNode.detune);\n                await renderAutomation(nativeOfflineAudioContext, proxy.frequency, nativeBiquadFilterNode.frequency);\n                await renderAutomation(nativeOfflineAudioContext, proxy.gain, nativeBiquadFilterNode.gain);\n            } else {\n                await connectAudioParam(nativeOfflineAudioContext, proxy.Q, nativeBiquadFilterNode.Q);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.detune, nativeBiquadFilterNode.detune);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.frequency, nativeBiquadFilterNode.frequency);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.gain, nativeBiquadFilterNode.gain);\n            }\n\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeBiquadFilterNode);\n\n            return nativeBiquadFilterNode;\n        };\n\n        return {\n            render(proxy: IBiquadFilterNode<T>, nativeOfflineAudioContext: TNativeOfflineAudioContext): Promise<TNativeBiquadFilterNode> {\n                const renderedNativeBiquadFilterNode = renderedNativeBiquadFilterNodes.get(nativeOfflineAudioContext);\n\n                if (renderedNativeBiquadFilterNode !== undefined) {\n                    return Promise.resolve(renderedNativeBiquadFilterNode);\n                }\n\n                return createBiquadFilterNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n"]},"metadata":{},"sourceType":"module"}