{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _toConsumableArray from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _slicedToArray from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { isAudioBufferSourceNode } from '../guards/audio-buffer-source-node';\nimport { isAudioWorkletNode } from '../guards/audio-worklet-node';\nimport { isBiquadFilterNode } from '../guards/biquad-filter-node';\nimport { isConstantSourceNode } from '../guards/constant-source-node';\nimport { isGainNode } from '../guards/gain-node';\nimport { isOscillatorNode } from '../guards/oscillator-node';\nimport { isStereoPannerNode } from '../guards/stereo-panner-node';\nimport { getAudioNodeConnections } from './get-audio-node-connections';\nimport { getAudioParamConnections } from './get-audio-param-connections';\nimport { isActiveAudioNode } from './is-active-audio-node';\nimport { setInternalStateToPassive } from './set-internal-state-to-passive';\nexport var deactivateActiveAudioNodeInputConnections = function deactivateActiveAudioNodeInputConnections(audioNode, trace) {\n  var _getAudioNodeConnecti = getAudioNodeConnections(audioNode),\n      activeInputs = _getAudioNodeConnecti.activeInputs;\n\n  activeInputs.forEach(function (connections) {\n    return connections.forEach(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 1),\n          source = _ref2[0];\n\n      if (!trace.includes(audioNode)) {\n        deactivateActiveAudioNodeInputConnections(source, [].concat(_toConsumableArray(trace), [audioNode]));\n      }\n    });\n  });\n  var audioParams = isAudioBufferSourceNode(audioNode) ? [// Bug #149: Safari does not yet support the detune AudioParam.\n  audioNode.playbackRate] : isAudioWorkletNode(audioNode) ? Array.from(audioNode.parameters.values()) : isBiquadFilterNode(audioNode) ? [audioNode.Q, audioNode.detune, audioNode.frequency, audioNode.gain] : isConstantSourceNode(audioNode) ? [audioNode.offset] : isGainNode(audioNode) ? [audioNode.gain] : isOscillatorNode(audioNode) ? [audioNode.detune, audioNode.frequency] : isStereoPannerNode(audioNode) ? [audioNode.pan] : [];\n\n  var _iterator = _createForOfIteratorHelper(audioParams),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var audioParam = _step.value;\n      var audioParamConnections = getAudioParamConnections(audioParam);\n\n      if (audioParamConnections !== undefined) {\n        audioParamConnections.activeInputs.forEach(function (_ref3) {\n          var _ref4 = _slicedToArray(_ref3, 1),\n              source = _ref4[0];\n\n          return deactivateActiveAudioNodeInputConnections(source, trace);\n        });\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  if (isActiveAudioNode(audioNode)) {\n    setInternalStateToPassive(audioNode);\n  }\n};","map":{"version":3,"mappings":";;;AAAA,SAASA,uBAAT,QAAwC,oCAAxC;AACA,SAASC,kBAAT,QAAmC,8BAAnC;AACA,SAASC,kBAAT,QAAmC,8BAAnC;AACA,SAASC,oBAAT,QAAqC,gCAArC;AACA,SAASC,UAAT,QAA2B,qBAA3B;AACA,SAASC,gBAAT,QAAiC,2BAAjC;AACA,SAASC,kBAAT,QAAmC,8BAAnC;AAGA,SAASC,uBAAT,QAAwC,8BAAxC;AACA,SAASC,wBAAT,QAAyC,+BAAzC;AACA,SAASC,iBAAT,QAAkC,wBAAlC;AACA,SAASC,yBAAT,QAA0C,iCAA1C;AAEA,OAAO,IAAMC,yCAAyC,GAAG,SAA5CA,yCAA4C,CACrDC,SADqD,EAErDC,KAFqD,EAGrD;EACA,4BAAyBN,uBAAuB,CAACK,SAAD,CAAhD;EAAA,IAAQE,YAAR,yBAAQA,YAAR;;EAEAA,YAAY,CAACC,OAAb,CAAqB,UAACC,WAAD;IAAA,OACjBA,WAAW,CAACD,OAAZ,CAAoB,gBAAa;MAAA;MAAA,IAAXE,MAAW;;MAC7B,IAAI,CAACJ,KAAK,CAACK,QAAN,CAAeN,SAAf,CAAL,EAAgC;QAC5BD,yCAAyC,CAACM,MAAD,+BAAaJ,KAAb,IAAoBD,SAApB,GAAzC;MACH;IACJ,CAJD,CADiB;EAAA,CAArB;EAQA,IAAMO,WAAW,GAAGnB,uBAAuB,CAACY,SAAD,CAAvB,GACd,CACI;EACAA,SAAS,CAACQ,YAFd,CADc,GAKdnB,kBAAkB,CAACW,SAAD,CAAlB,GACAS,KAAK,CAACC,IAAN,CAAWV,SAAS,CAACW,UAAV,CAAqBC,MAArB,EAAX,CADA,GAEAtB,kBAAkB,CAACU,SAAD,CAAlB,GACA,CAACA,SAAS,CAACa,CAAX,EAAcb,SAAS,CAACc,MAAxB,EAAgCd,SAAS,CAACe,SAA1C,EAAqDf,SAAS,CAACgB,IAA/D,CADA,GAEAzB,oBAAoB,CAACS,SAAD,CAApB,GACA,CAACA,SAAS,CAACiB,MAAX,CADA,GAEAzB,UAAU,CAACQ,SAAD,CAAV,GACA,CAACA,SAAS,CAACgB,IAAX,CADA,GAEAvB,gBAAgB,CAACO,SAAD,CAAhB,GACA,CAACA,SAAS,CAACc,MAAX,EAAmBd,SAAS,CAACe,SAA7B,CADA,GAEArB,kBAAkB,CAACM,SAAD,CAAlB,GACA,CAACA,SAAS,CAACkB,GAAX,CADA,GAEA,EAjBN;;EAXA,2CA8ByBX,WA9BzB;EAAA;;EAAA;IA8BA,oDAAsC;MAAA,IAA3BY,UAA2B;MAClC,IAAMC,qBAAqB,GAAGxB,wBAAwB,CAAIuB,UAAJ,CAAtD;;MAEA,IAAIC,qBAAqB,KAAKC,SAA9B,EAAyC;QACrCD,qBAAqB,CAAClB,YAAtB,CAAmCC,OAAnC,CAA2C;UAAA;UAAA,IAAEE,MAAF;;UAAA,OAAcN,yCAAyC,CAACM,MAAD,EAASJ,KAAT,CAAvD;QAAA,CAA3C;MACH;IACJ;EApCD;IAAA;EAAA;IAAA;EAAA;;EAsCA,IAAIJ,iBAAiB,CAACG,SAAD,CAArB,EAAkC;IAC9BF,yBAAyB,CAACE,SAAD,CAAzB;EACH;AACJ,CA5CM","names":["isAudioBufferSourceNode","isAudioWorkletNode","isBiquadFilterNode","isConstantSourceNode","isGainNode","isOscillatorNode","isStereoPannerNode","getAudioNodeConnections","getAudioParamConnections","isActiveAudioNode","setInternalStateToPassive","deactivateActiveAudioNodeInputConnections","audioNode","trace","activeInputs","forEach","connections","source","includes","audioParams","playbackRate","Array","from","parameters","values","Q","detune","frequency","gain","offset","pan","audioParam","audioParamConnections","undefined"],"sources":["C:\\Users\\brigh\\storage\\js_project\\Gakugeki_WEB\\node_modules\\standardized-audio-context\\src\\helpers\\deactivate-active-audio-node-input-connections.ts"],"sourcesContent":["import { isAudioBufferSourceNode } from '../guards/audio-buffer-source-node';\nimport { isAudioWorkletNode } from '../guards/audio-worklet-node';\nimport { isBiquadFilterNode } from '../guards/biquad-filter-node';\nimport { isConstantSourceNode } from '../guards/constant-source-node';\nimport { isGainNode } from '../guards/gain-node';\nimport { isOscillatorNode } from '../guards/oscillator-node';\nimport { isStereoPannerNode } from '../guards/stereo-panner-node';\nimport { IAudioNode } from '../interfaces';\nimport { TContext } from '../types';\nimport { getAudioNodeConnections } from './get-audio-node-connections';\nimport { getAudioParamConnections } from './get-audio-param-connections';\nimport { isActiveAudioNode } from './is-active-audio-node';\nimport { setInternalStateToPassive } from './set-internal-state-to-passive';\n\nexport const deactivateActiveAudioNodeInputConnections = <T extends TContext>(\n    audioNode: IAudioNode<T>,\n    trace: readonly IAudioNode<T>[]\n) => {\n    const { activeInputs } = getAudioNodeConnections(audioNode);\n\n    activeInputs.forEach((connections) =>\n        connections.forEach(([source]) => {\n            if (!trace.includes(audioNode)) {\n                deactivateActiveAudioNodeInputConnections(source, [...trace, audioNode]);\n            }\n        })\n    );\n\n    const audioParams = isAudioBufferSourceNode(audioNode)\n        ? [\n              // Bug #149: Safari does not yet support the detune AudioParam.\n              audioNode.playbackRate\n          ]\n        : isAudioWorkletNode(audioNode)\n        ? Array.from(audioNode.parameters.values())\n        : isBiquadFilterNode(audioNode)\n        ? [audioNode.Q, audioNode.detune, audioNode.frequency, audioNode.gain]\n        : isConstantSourceNode(audioNode)\n        ? [audioNode.offset]\n        : isGainNode(audioNode)\n        ? [audioNode.gain]\n        : isOscillatorNode(audioNode)\n        ? [audioNode.detune, audioNode.frequency]\n        : isStereoPannerNode(audioNode)\n        ? [audioNode.pan]\n        : [];\n\n    for (const audioParam of audioParams) {\n        const audioParamConnections = getAudioParamConnections<T>(audioParam);\n\n        if (audioParamConnections !== undefined) {\n            audioParamConnections.activeInputs.forEach(([source]) => deactivateActiveAudioNodeInputConnections(source, trace));\n        }\n    }\n\n    if (isActiveAudioNode(audioNode)) {\n        setInternalStateToPassive(audioNode);\n    }\n};\n"]},"metadata":{},"sourceType":"module"}