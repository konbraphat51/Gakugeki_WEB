{"ast":null,"code":"import _defineProperty from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _objectSpread from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _createForOfIteratorHelper from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nimport { computeBufferSize } from '../helpers/compute-buffer-size';\nimport { copyFromChannel } from '../helpers/copy-from-channel';\nimport { copyToChannel } from '../helpers/copy-to-channel';\nimport { createAudioWorkletProcessor } from '../helpers/create-audio-worklet-processor';\nimport { createNestedArrays } from '../helpers/create-nested-arrays';\nimport { ReadOnlyMap } from '../read-only-map';\nexport var createNativeAudioWorkletNodeFakerFactory = function createNativeAudioWorkletNodeFakerFactory(connectMultipleOutputs, createIndexSizeError, createInvalidStateError, createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeConstantSourceNode, createNativeGainNode, createNativeScriptProcessorNode, createNotSupportedError, disconnectMultipleOutputs, exposeCurrentFrameAndCurrentTime, getActiveAudioWorkletNodeInputs, monitorConnections) {\n  return function (nativeContext, baseLatency, processorConstructor, options) {\n    if (options.numberOfInputs === 0 && options.numberOfOutputs === 0) {\n      throw createNotSupportedError();\n    }\n\n    var outputChannelCount = Array.isArray(options.outputChannelCount) ? options.outputChannelCount : Array.from(options.outputChannelCount); // @todo Check if any of the channelCount values is greater than the implementation's maximum number of channels.\n\n    if (outputChannelCount.some(function (channelCount) {\n      return channelCount < 1;\n    })) {\n      throw createNotSupportedError();\n    }\n\n    if (outputChannelCount.length !== options.numberOfOutputs) {\n      throw createIndexSizeError();\n    } // Bug #61: This is not part of the standard but required for the faker to work.\n\n\n    if (options.channelCountMode !== 'explicit') {\n      throw createNotSupportedError();\n    }\n\n    var numberOfInputChannels = options.channelCount * options.numberOfInputs;\n    var numberOfOutputChannels = outputChannelCount.reduce(function (sum, value) {\n      return sum + value;\n    }, 0);\n    var numberOfParameters = processorConstructor.parameterDescriptors === undefined ? 0 : processorConstructor.parameterDescriptors.length; // Bug #61: This is not part of the standard but required for the faker to work.\n\n    if (numberOfInputChannels + numberOfParameters > 6 || numberOfOutputChannels > 6) {\n      throw createNotSupportedError();\n    }\n\n    var messageChannel = new MessageChannel();\n    var gainNodes = [];\n    var inputChannelSplitterNodes = [];\n\n    for (var i = 0; i < options.numberOfInputs; i += 1) {\n      gainNodes.push(createNativeGainNode(nativeContext, {\n        channelCount: options.channelCount,\n        channelCountMode: options.channelCountMode,\n        channelInterpretation: options.channelInterpretation,\n        gain: 1\n      }));\n      inputChannelSplitterNodes.push(createNativeChannelSplitterNode(nativeContext, {\n        channelCount: options.channelCount,\n        channelCountMode: 'explicit',\n        channelInterpretation: 'discrete',\n        numberOfOutputs: options.channelCount\n      }));\n    }\n\n    var constantSourceNodes = [];\n\n    if (processorConstructor.parameterDescriptors !== undefined) {\n      var _iterator = _createForOfIteratorHelper(processorConstructor.parameterDescriptors),\n          _step;\n\n      try {\n        var _loop = function _loop() {\n          var _step$value = _step.value,\n              defaultValue = _step$value.defaultValue,\n              maxValue = _step$value.maxValue,\n              minValue = _step$value.minValue,\n              name = _step$value.name;\n          var constantSourceNode = createNativeConstantSourceNode(nativeContext, {\n            channelCount: 1,\n            channelCountMode: 'explicit',\n            channelInterpretation: 'discrete',\n            offset: options.parameterData[name] !== undefined ? options.parameterData[name] : defaultValue === undefined ? 0 : defaultValue\n          });\n          Object.defineProperties(constantSourceNode.offset, {\n            defaultValue: {\n              get: function get() {\n                return defaultValue === undefined ? 0 : defaultValue;\n              }\n            },\n            maxValue: {\n              get: function get() {\n                return maxValue === undefined ? MOST_POSITIVE_SINGLE_FLOAT : maxValue;\n              }\n            },\n            minValue: {\n              get: function get() {\n                return minValue === undefined ? MOST_NEGATIVE_SINGLE_FLOAT : minValue;\n              }\n            }\n          });\n          constantSourceNodes.push(constantSourceNode);\n        };\n\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          _loop();\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n\n    var inputChannelMergerNode = createNativeChannelMergerNode(nativeContext, {\n      channelCount: 1,\n      channelCountMode: 'explicit',\n      channelInterpretation: 'speakers',\n      numberOfInputs: Math.max(1, numberOfInputChannels + numberOfParameters)\n    });\n    var bufferSize = computeBufferSize(baseLatency, nativeContext.sampleRate);\n    var scriptProcessorNode = createNativeScriptProcessorNode(nativeContext, bufferSize, numberOfInputChannels + numberOfParameters, // Bug #87: Only Firefox will fire an AudioProcessingEvent if there is no connected output.\n    Math.max(1, numberOfOutputChannels));\n    var outputChannelSplitterNode = createNativeChannelSplitterNode(nativeContext, {\n      channelCount: Math.max(1, numberOfOutputChannels),\n      channelCountMode: 'explicit',\n      channelInterpretation: 'discrete',\n      numberOfOutputs: Math.max(1, numberOfOutputChannels)\n    });\n    var outputChannelMergerNodes = [];\n\n    for (var _i = 0; _i < options.numberOfOutputs; _i += 1) {\n      outputChannelMergerNodes.push(createNativeChannelMergerNode(nativeContext, {\n        channelCount: 1,\n        channelCountMode: 'explicit',\n        channelInterpretation: 'speakers',\n        numberOfInputs: outputChannelCount[_i]\n      }));\n    }\n\n    for (var _i2 = 0; _i2 < options.numberOfInputs; _i2 += 1) {\n      gainNodes[_i2].connect(inputChannelSplitterNodes[_i2]);\n\n      for (var j = 0; j < options.channelCount; j += 1) {\n        inputChannelSplitterNodes[_i2].connect(inputChannelMergerNode, j, _i2 * options.channelCount + j);\n      }\n    }\n\n    var parameterMap = new ReadOnlyMap(processorConstructor.parameterDescriptors === undefined ? [] : processorConstructor.parameterDescriptors.map(function (_ref, index) {\n      var name = _ref.name;\n      var constantSourceNode = constantSourceNodes[index];\n      constantSourceNode.connect(inputChannelMergerNode, 0, numberOfInputChannels + index);\n      constantSourceNode.start(0);\n      return [name, constantSourceNode.offset];\n    }));\n    inputChannelMergerNode.connect(scriptProcessorNode);\n    var channelInterpretation = options.channelInterpretation;\n    var onprocessorerror = null; // Bug #87: Expose at least one output to make this node connectable.\n\n    var outputAudioNodes = options.numberOfOutputs === 0 ? [scriptProcessorNode] : outputChannelMergerNodes;\n    var nativeAudioWorkletNodeFaker = {\n      get bufferSize() {\n        return bufferSize;\n      },\n\n      get channelCount() {\n        return options.channelCount;\n      },\n\n      set channelCount(_) {\n        // Bug #61: This is not part of the standard but required for the faker to work.\n        throw createInvalidStateError();\n      },\n\n      get channelCountMode() {\n        return options.channelCountMode;\n      },\n\n      set channelCountMode(_) {\n        // Bug #61: This is not part of the standard but required for the faker to work.\n        throw createInvalidStateError();\n      },\n\n      get channelInterpretation() {\n        return channelInterpretation;\n      },\n\n      set channelInterpretation(value) {\n        var _iterator2 = _createForOfIteratorHelper(gainNodes),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var gainNode = _step2.value;\n            gainNode.channelInterpretation = value;\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n\n        channelInterpretation = value;\n      },\n\n      get context() {\n        return scriptProcessorNode.context;\n      },\n\n      get inputs() {\n        return gainNodes;\n      },\n\n      get numberOfInputs() {\n        return options.numberOfInputs;\n      },\n\n      get numberOfOutputs() {\n        return options.numberOfOutputs;\n      },\n\n      get onprocessorerror() {\n        return onprocessorerror;\n      },\n\n      set onprocessorerror(value) {\n        if (typeof onprocessorerror === 'function') {\n          nativeAudioWorkletNodeFaker.removeEventListener('processorerror', onprocessorerror);\n        }\n\n        onprocessorerror = typeof value === 'function' ? value : null;\n\n        if (typeof onprocessorerror === 'function') {\n          nativeAudioWorkletNodeFaker.addEventListener('processorerror', onprocessorerror);\n        }\n      },\n\n      get parameters() {\n        return parameterMap;\n      },\n\n      get port() {\n        return messageChannel.port2;\n      },\n\n      addEventListener: function addEventListener() {\n        return scriptProcessorNode.addEventListener(arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1], arguments.length <= 2 ? undefined : arguments[2]);\n      },\n      connect: connectMultipleOutputs.bind(null, outputAudioNodes),\n      disconnect: disconnectMultipleOutputs.bind(null, outputAudioNodes),\n      dispatchEvent: function dispatchEvent() {\n        return scriptProcessorNode.dispatchEvent(arguments.length <= 0 ? undefined : arguments[0]);\n      },\n      removeEventListener: function removeEventListener() {\n        return scriptProcessorNode.removeEventListener(arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1], arguments.length <= 2 ? undefined : arguments[2]);\n      }\n    };\n    var patchedEventListeners = new Map();\n\n    messageChannel.port1.addEventListener = function (addEventListener) {\n      return function () {\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        if (args[0] === 'message') {\n          var unpatchedEventListener = typeof args[1] === 'function' ? args[1] : typeof args[1] === 'object' && args[1] !== null && typeof args[1].handleEvent === 'function' ? args[1].handleEvent : null;\n\n          if (unpatchedEventListener !== null) {\n            var patchedEventListener = patchedEventListeners.get(args[1]);\n\n            if (patchedEventListener !== undefined) {\n              args[1] = patchedEventListener;\n            } else {\n              args[1] = function (event) {\n                exposeCurrentFrameAndCurrentTime(nativeContext.currentTime, nativeContext.sampleRate, function () {\n                  return unpatchedEventListener(event);\n                });\n              };\n\n              patchedEventListeners.set(unpatchedEventListener, args[1]);\n            }\n          }\n        }\n\n        return addEventListener.call(messageChannel.port1, args[0], args[1], args[2]);\n      };\n    }(messageChannel.port1.addEventListener);\n\n    messageChannel.port1.removeEventListener = function (removeEventListener) {\n      return function () {\n        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n          args[_key2] = arguments[_key2];\n        }\n\n        if (args[0] === 'message') {\n          var patchedEventListener = patchedEventListeners.get(args[1]);\n\n          if (patchedEventListener !== undefined) {\n            patchedEventListeners.delete(args[1]);\n            args[1] = patchedEventListener;\n          }\n        }\n\n        return removeEventListener.call(messageChannel.port1, args[0], args[1], args[2]);\n      };\n    }(messageChannel.port1.removeEventListener);\n\n    var onmessage = null;\n    Object.defineProperty(messageChannel.port1, 'onmessage', {\n      get: function get() {\n        return onmessage;\n      },\n      set: function set(value) {\n        if (typeof onmessage === 'function') {\n          messageChannel.port1.removeEventListener('message', onmessage);\n        }\n\n        onmessage = typeof value === 'function' ? value : null;\n\n        if (typeof onmessage === 'function') {\n          messageChannel.port1.addEventListener('message', onmessage);\n          messageChannel.port1.start();\n        }\n      }\n    });\n    processorConstructor.prototype.port = messageChannel.port1;\n    var audioWorkletProcessor = null;\n    var audioWorkletProcessorPromise = createAudioWorkletProcessor(nativeContext, nativeAudioWorkletNodeFaker, processorConstructor, options);\n    audioWorkletProcessorPromise.then(function (dWrkltPrcssr) {\n      return audioWorkletProcessor = dWrkltPrcssr;\n    });\n    var inputs = createNestedArrays(options.numberOfInputs, options.channelCount);\n    var outputs = createNestedArrays(options.numberOfOutputs, outputChannelCount);\n    var parameters = processorConstructor.parameterDescriptors === undefined ? [] : processorConstructor.parameterDescriptors.reduce(function (prmtrs, _ref2) {\n      var name = _ref2.name;\n      return _objectSpread(_objectSpread({}, prmtrs), {}, _defineProperty({}, name, new Float32Array(128)));\n    }, {});\n    var isActive = true;\n\n    var disconnectOutputsGraph = function disconnectOutputsGraph() {\n      if (options.numberOfOutputs > 0) {\n        scriptProcessorNode.disconnect(outputChannelSplitterNode);\n      }\n\n      for (var _i3 = 0, outputChannelSplitterNodeOutput = 0; _i3 < options.numberOfOutputs; _i3 += 1) {\n        var outputChannelMergerNode = outputChannelMergerNodes[_i3];\n\n        for (var _j = 0; _j < outputChannelCount[_i3]; _j += 1) {\n          outputChannelSplitterNode.disconnect(outputChannelMergerNode, outputChannelSplitterNodeOutput + _j, _j);\n        }\n\n        outputChannelSplitterNodeOutput += outputChannelCount[_i3];\n      }\n    };\n\n    var activeInputIndexes = new Map(); // tslint:disable-next-line:deprecation\n\n    scriptProcessorNode.onaudioprocess = function (_ref3) {\n      var inputBuffer = _ref3.inputBuffer,\n          outputBuffer = _ref3.outputBuffer;\n\n      if (audioWorkletProcessor !== null) {\n        (function () {\n          var activeInputs = getActiveAudioWorkletNodeInputs(nativeAudioWorkletNodeFaker);\n\n          var _loop2 = function _loop2(_i4) {\n            for (var _j2 = 0; _j2 < options.numberOfInputs; _j2 += 1) {\n              for (var k = 0; k < options.channelCount; k += 1) {\n                copyFromChannel(inputBuffer, inputs[_j2], k, k, _i4);\n              }\n            }\n\n            if (processorConstructor.parameterDescriptors !== undefined) {\n              processorConstructor.parameterDescriptors.forEach(function (_ref4, index) {\n                var name = _ref4.name;\n                copyFromChannel(inputBuffer, parameters, name, numberOfInputChannels + index, _i4);\n              });\n            }\n\n            for (var _j3 = 0; _j3 < options.numberOfInputs; _j3 += 1) {\n              for (var _k = 0; _k < outputChannelCount[_j3]; _k += 1) {\n                // The byteLength will be 0 when the ArrayBuffer was transferred.\n                if (outputs[_j3][_k].byteLength === 0) {\n                  outputs[_j3][_k] = new Float32Array(128);\n                }\n              }\n            }\n\n            try {\n              var potentiallyEmptyInputs = inputs.map(function (input, index) {\n                var activeInput = activeInputs[index];\n\n                if (activeInput.size > 0) {\n                  activeInputIndexes.set(index, bufferSize / 128);\n                  return input;\n                }\n\n                var count = activeInputIndexes.get(index);\n\n                if (count === undefined) {\n                  return [];\n                }\n\n                if (input.every(function (channelData) {\n                  return channelData.every(function (sample) {\n                    return sample === 0;\n                  });\n                })) {\n                  if (count === 1) {\n                    activeInputIndexes.delete(index);\n                  } else {\n                    activeInputIndexes.set(index, count - 1);\n                  }\n                }\n\n                return input;\n              });\n              var activeSourceFlag = exposeCurrentFrameAndCurrentTime(nativeContext.currentTime + _i4 / nativeContext.sampleRate, nativeContext.sampleRate, function () {\n                return audioWorkletProcessor.process(potentiallyEmptyInputs, outputs, parameters);\n              });\n              isActive = activeSourceFlag;\n\n              for (var _j4 = 0, outputChannelSplitterNodeOutput = 0; _j4 < options.numberOfOutputs; _j4 += 1) {\n                for (var _k2 = 0; _k2 < outputChannelCount[_j4]; _k2 += 1) {\n                  copyToChannel(outputBuffer, outputs[_j4], _k2, outputChannelSplitterNodeOutput + _k2, _i4);\n                }\n\n                outputChannelSplitterNodeOutput += outputChannelCount[_j4];\n              }\n            } catch (error) {\n              isActive = false;\n              nativeAudioWorkletNodeFaker.dispatchEvent(new ErrorEvent('processorerror', {\n                colno: error.colno,\n                filename: error.filename,\n                lineno: error.lineno,\n                message: error.message\n              }));\n            }\n\n            if (!isActive) {\n              for (var _j5 = 0; _j5 < options.numberOfInputs; _j5 += 1) {\n                gainNodes[_j5].disconnect(inputChannelSplitterNodes[_j5]);\n\n                for (var _k3 = 0; _k3 < options.channelCount; _k3 += 1) {\n                  inputChannelSplitterNodes[_i4].disconnect(inputChannelMergerNode, _k3, _j5 * options.channelCount + _k3);\n                }\n              }\n\n              if (processorConstructor.parameterDescriptors !== undefined) {\n                var length = processorConstructor.parameterDescriptors.length;\n\n                for (var _j6 = 0; _j6 < length; _j6 += 1) {\n                  var constantSourceNode = constantSourceNodes[_j6];\n                  constantSourceNode.disconnect(inputChannelMergerNode, 0, numberOfInputChannels + _j6);\n                  constantSourceNode.stop();\n                }\n              }\n\n              inputChannelMergerNode.disconnect(scriptProcessorNode);\n              scriptProcessorNode.onaudioprocess = null; // tslint:disable-line:deprecation\n\n              if (isConnected) {\n                disconnectOutputsGraph();\n              } else {\n                disconnectFakeGraph();\n              }\n\n              return \"break\";\n            }\n          };\n\n          for (var _i4 = 0; _i4 < bufferSize; _i4 += 128) {\n            var _ret = _loop2(_i4);\n\n            if (_ret === \"break\") break;\n          }\n        })();\n      }\n    };\n\n    var isConnected = false; // Bug #87: Only Firefox will fire an AudioProcessingEvent if there is no connected output.\n\n    var nativeGainNode = createNativeGainNode(nativeContext, {\n      channelCount: 1,\n      channelCountMode: 'explicit',\n      channelInterpretation: 'discrete',\n      gain: 0\n    });\n\n    var connectFakeGraph = function connectFakeGraph() {\n      return scriptProcessorNode.connect(nativeGainNode).connect(nativeContext.destination);\n    };\n\n    var disconnectFakeGraph = function disconnectFakeGraph() {\n      scriptProcessorNode.disconnect(nativeGainNode);\n      nativeGainNode.disconnect();\n    };\n\n    var whenConnected = function whenConnected() {\n      if (isActive) {\n        disconnectFakeGraph();\n\n        if (options.numberOfOutputs > 0) {\n          scriptProcessorNode.connect(outputChannelSplitterNode);\n        }\n\n        for (var _i5 = 0, outputChannelSplitterNodeOutput = 0; _i5 < options.numberOfOutputs; _i5 += 1) {\n          var outputChannelMergerNode = outputChannelMergerNodes[_i5];\n\n          for (var _j7 = 0; _j7 < outputChannelCount[_i5]; _j7 += 1) {\n            outputChannelSplitterNode.connect(outputChannelMergerNode, outputChannelSplitterNodeOutput + _j7, _j7);\n          }\n\n          outputChannelSplitterNodeOutput += outputChannelCount[_i5];\n        }\n      }\n\n      isConnected = true;\n    };\n\n    var whenDisconnected = function whenDisconnected() {\n      if (isActive) {\n        connectFakeGraph();\n        disconnectOutputsGraph();\n      }\n\n      isConnected = false;\n    };\n\n    connectFakeGraph();\n    return monitorConnections(nativeAudioWorkletNodeFaker, whenConnected, whenDisconnected);\n  };\n};","map":{"version":3,"mappings":"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","names":["MOST_NEGATIVE_SINGLE_FLOAT","MOST_POSITIVE_SINGLE_FLOAT","computeBufferSize","copyFromChannel","copyToChannel","createAudioWorkletProcessor","createNestedArrays","ReadOnlyMap","createNativeAudioWorkletNodeFakerFactory","connectMultipleOutputs","createIndexSizeError","createInvalidStateError","createNativeChannelMergerNode","createNativeChannelSplitterNode","createNativeConstantSourceNode","createNativeGainNode","createNativeScriptProcessorNode","createNotSupportedError","disconnectMultipleOutputs","exposeCurrentFrameAndCurrentTime","getActiveAudioWorkletNodeInputs","monitorConnections","nativeContext","baseLatency","processorConstructor","options","numberOfInputs","numberOfOutputs","outputChannelCount","Array","isArray","from","some","channelCount","length","channelCountMode","numberOfInputChannels","numberOfOutputChannels","reduce","sum","value","numberOfParameters","parameterDescriptors","undefined","messageChannel","MessageChannel","gainNodes","inputChannelSplitterNodes","i","push","channelInterpretation","gain","constantSourceNodes","defaultValue","maxValue","minValue","name","constantSourceNode","offset","parameterData","Object","defineProperties","get","inputChannelMergerNode","Math","max","bufferSize","sampleRate","scriptProcessorNode","outputChannelSplitterNode","outputChannelMergerNodes","connect","j","parameterMap","map","index","start","onprocessorerror","outputAudioNodes","nativeAudioWorkletNodeFaker","_","gainNode","context","inputs","removeEventListener","addEventListener","parameters","port","port2","bind","disconnect","dispatchEvent","patchedEventListeners","Map","port1","args","unpatchedEventListener","handleEvent","patchedEventListener","event","currentTime","set","call","delete","onmessage","defineProperty","prototype","audioWorkletProcessor","audioWorkletProcessorPromise","then","dWrkltPrcssr","outputs","prmtrs","Float32Array","isActive","disconnectOutputsGraph","outputChannelSplitterNodeOutput","outputChannelMergerNode","activeInputIndexes","onaudioprocess","inputBuffer","outputBuffer","activeInputs","k","forEach","byteLength","potentiallyEmptyInputs","input","activeInput","size","count","every","channelData","sample","activeSourceFlag","process","error","ErrorEvent","colno","filename","lineno","message","stop","isConnected","disconnectFakeGraph","nativeGainNode","connectFakeGraph","destination","whenConnected","whenDisconnected"],"sources":["C:\\Users\\brigh\\storage\\js_project\\Gakugeki_WEB\\node_modules\\standardized-audio-context\\src\\factories\\native-audio-worklet-node-faker-factory.ts"],"sourcesContent":["import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nimport { computeBufferSize } from '../helpers/compute-buffer-size';\nimport { copyFromChannel } from '../helpers/copy-from-channel';\nimport { copyToChannel } from '../helpers/copy-to-channel';\nimport { createAudioWorkletProcessor } from '../helpers/create-audio-worklet-processor';\nimport { createNestedArrays } from '../helpers/create-nested-arrays';\nimport { IAudioWorkletProcessor } from '../interfaces';\nimport { ReadOnlyMap } from '../read-only-map';\nimport {\n    TNativeAudioNode,\n    TNativeAudioParam,\n    TNativeAudioWorkletNode,\n    TNativeAudioWorkletNodeFakerFactoryFactory,\n    TNativeChannelMergerNode,\n    TNativeChannelSplitterNode,\n    TNativeConstantSourceNode,\n    TNativeGainNode\n} from '../types';\n\nexport const createNativeAudioWorkletNodeFakerFactory: TNativeAudioWorkletNodeFakerFactoryFactory = (\n    connectMultipleOutputs,\n    createIndexSizeError,\n    createInvalidStateError,\n    createNativeChannelMergerNode,\n    createNativeChannelSplitterNode,\n    createNativeConstantSourceNode,\n    createNativeGainNode,\n    createNativeScriptProcessorNode,\n    createNotSupportedError,\n    disconnectMultipleOutputs,\n    exposeCurrentFrameAndCurrentTime,\n    getActiveAudioWorkletNodeInputs,\n    monitorConnections\n) => {\n    return (nativeContext, baseLatency, processorConstructor, options) => {\n        if (options.numberOfInputs === 0 && options.numberOfOutputs === 0) {\n            throw createNotSupportedError();\n        }\n\n        const outputChannelCount = Array.isArray(options.outputChannelCount)\n            ? options.outputChannelCount\n            : Array.from(options.outputChannelCount);\n\n        // @todo Check if any of the channelCount values is greater than the implementation's maximum number of channels.\n        if (outputChannelCount.some((channelCount) => channelCount < 1)) {\n            throw createNotSupportedError();\n        }\n\n        if (outputChannelCount.length !== options.numberOfOutputs) {\n            throw createIndexSizeError();\n        }\n\n        // Bug #61: This is not part of the standard but required for the faker to work.\n        if (options.channelCountMode !== 'explicit') {\n            throw createNotSupportedError();\n        }\n\n        const numberOfInputChannels = options.channelCount * options.numberOfInputs;\n        const numberOfOutputChannels = outputChannelCount.reduce((sum, value) => sum + value, 0);\n        const numberOfParameters =\n            processorConstructor.parameterDescriptors === undefined ? 0 : processorConstructor.parameterDescriptors.length;\n\n        // Bug #61: This is not part of the standard but required for the faker to work.\n        if (numberOfInputChannels + numberOfParameters > 6 || numberOfOutputChannels > 6) {\n            throw createNotSupportedError();\n        }\n\n        const messageChannel = new MessageChannel();\n        const gainNodes: TNativeGainNode[] = [];\n        const inputChannelSplitterNodes: TNativeChannelSplitterNode[] = [];\n\n        for (let i = 0; i < options.numberOfInputs; i += 1) {\n            gainNodes.push(\n                createNativeGainNode(nativeContext, {\n                    channelCount: options.channelCount,\n                    channelCountMode: options.channelCountMode,\n                    channelInterpretation: options.channelInterpretation,\n                    gain: 1\n                })\n            );\n            inputChannelSplitterNodes.push(\n                createNativeChannelSplitterNode(nativeContext, {\n                    channelCount: options.channelCount,\n                    channelCountMode: 'explicit',\n                    channelInterpretation: 'discrete',\n                    numberOfOutputs: options.channelCount\n                })\n            );\n        }\n\n        const constantSourceNodes: TNativeConstantSourceNode[] = [];\n\n        if (processorConstructor.parameterDescriptors !== undefined) {\n            for (const { defaultValue, maxValue, minValue, name } of processorConstructor.parameterDescriptors) {\n                const constantSourceNode = createNativeConstantSourceNode(nativeContext, {\n                    channelCount: 1,\n                    channelCountMode: 'explicit',\n                    channelInterpretation: 'discrete',\n                    offset:\n                        options.parameterData[name] !== undefined\n                            ? options.parameterData[name]\n                            : defaultValue === undefined\n                            ? 0\n                            : defaultValue\n                });\n\n                Object.defineProperties(constantSourceNode.offset, {\n                    defaultValue: {\n                        get: () => (defaultValue === undefined ? 0 : defaultValue)\n                    },\n                    maxValue: {\n                        get: () => (maxValue === undefined ? MOST_POSITIVE_SINGLE_FLOAT : maxValue)\n                    },\n                    minValue: {\n                        get: () => (minValue === undefined ? MOST_NEGATIVE_SINGLE_FLOAT : minValue)\n                    }\n                });\n\n                constantSourceNodes.push(constantSourceNode);\n            }\n        }\n\n        const inputChannelMergerNode = createNativeChannelMergerNode(nativeContext, {\n            channelCount: 1,\n            channelCountMode: 'explicit',\n            channelInterpretation: 'speakers',\n            numberOfInputs: Math.max(1, numberOfInputChannels + numberOfParameters)\n        });\n        const bufferSize = computeBufferSize(baseLatency, nativeContext.sampleRate);\n        const scriptProcessorNode = createNativeScriptProcessorNode(\n            nativeContext,\n            bufferSize,\n            numberOfInputChannels + numberOfParameters,\n            // Bug #87: Only Firefox will fire an AudioProcessingEvent if there is no connected output.\n            Math.max(1, numberOfOutputChannels)\n        );\n        const outputChannelSplitterNode = createNativeChannelSplitterNode(nativeContext, {\n            channelCount: Math.max(1, numberOfOutputChannels),\n            channelCountMode: 'explicit',\n            channelInterpretation: 'discrete',\n            numberOfOutputs: Math.max(1, numberOfOutputChannels)\n        });\n        const outputChannelMergerNodes: TNativeChannelMergerNode[] = [];\n\n        for (let i = 0; i < options.numberOfOutputs; i += 1) {\n            outputChannelMergerNodes.push(\n                createNativeChannelMergerNode(nativeContext, {\n                    channelCount: 1,\n                    channelCountMode: 'explicit',\n                    channelInterpretation: 'speakers',\n                    numberOfInputs: outputChannelCount[i]\n                })\n            );\n        }\n\n        for (let i = 0; i < options.numberOfInputs; i += 1) {\n            gainNodes[i].connect(inputChannelSplitterNodes[i]);\n\n            for (let j = 0; j < options.channelCount; j += 1) {\n                inputChannelSplitterNodes[i].connect(inputChannelMergerNode, j, i * options.channelCount + j);\n            }\n        }\n\n        const parameterMap = new ReadOnlyMap(\n            processorConstructor.parameterDescriptors === undefined\n                ? []\n                : processorConstructor.parameterDescriptors.map(({ name }, index) => {\n                      const constantSourceNode = constantSourceNodes[index];\n\n                      constantSourceNode.connect(inputChannelMergerNode, 0, numberOfInputChannels + index);\n                      constantSourceNode.start(0);\n\n                      return <[string, TNativeAudioParam]>[name, constantSourceNode.offset];\n                  })\n        );\n\n        inputChannelMergerNode.connect(scriptProcessorNode);\n\n        let channelInterpretation = options.channelInterpretation;\n        let onprocessorerror: TNativeAudioWorkletNode['onprocessorerror'] = null;\n\n        // Bug #87: Expose at least one output to make this node connectable.\n        const outputAudioNodes = options.numberOfOutputs === 0 ? [scriptProcessorNode] : outputChannelMergerNodes;\n        const nativeAudioWorkletNodeFaker = {\n            get bufferSize(): number {\n                return bufferSize;\n            },\n            get channelCount(): number {\n                return options.channelCount;\n            },\n            set channelCount(_) {\n                // Bug #61: This is not part of the standard but required for the faker to work.\n                throw createInvalidStateError();\n            },\n            get channelCountMode(): TNativeAudioWorkletNode['channelCountMode'] {\n                return options.channelCountMode;\n            },\n            set channelCountMode(_) {\n                // Bug #61: This is not part of the standard but required for the faker to work.\n                throw createInvalidStateError();\n            },\n            get channelInterpretation(): TNativeAudioWorkletNode['channelInterpretation'] {\n                return channelInterpretation;\n            },\n            set channelInterpretation(value) {\n                for (const gainNode of gainNodes) {\n                    gainNode.channelInterpretation = value;\n                }\n\n                channelInterpretation = value;\n            },\n            get context(): TNativeAudioWorkletNode['context'] {\n                return scriptProcessorNode.context;\n            },\n            get inputs(): TNativeAudioNode[] {\n                return gainNodes;\n            },\n            get numberOfInputs(): number {\n                return options.numberOfInputs;\n            },\n            get numberOfOutputs(): number {\n                return options.numberOfOutputs;\n            },\n            get onprocessorerror(): TNativeAudioWorkletNode['onprocessorerror'] {\n                return onprocessorerror;\n            },\n            set onprocessorerror(value) {\n                if (typeof onprocessorerror === 'function') {\n                    nativeAudioWorkletNodeFaker.removeEventListener('processorerror', onprocessorerror);\n                }\n\n                onprocessorerror = typeof value === 'function' ? value : null;\n\n                if (typeof onprocessorerror === 'function') {\n                    nativeAudioWorkletNodeFaker.addEventListener('processorerror', onprocessorerror);\n                }\n            },\n            get parameters(): TNativeAudioWorkletNode['parameters'] {\n                return parameterMap;\n            },\n            get port(): TNativeAudioWorkletNode['port'] {\n                return messageChannel.port2;\n            },\n            addEventListener(...args: any[]): void {\n                return scriptProcessorNode.addEventListener(args[0], args[1], args[2]);\n            },\n            connect: <TNativeAudioNode['connect']>connectMultipleOutputs.bind(null, outputAudioNodes),\n            disconnect: <TNativeAudioNode['disconnect']>disconnectMultipleOutputs.bind(null, outputAudioNodes),\n            dispatchEvent(...args: any[]): boolean {\n                return scriptProcessorNode.dispatchEvent(args[0]);\n            },\n            removeEventListener(...args: any[]): void {\n                return scriptProcessorNode.removeEventListener(args[0], args[1], args[2]);\n            }\n        };\n\n        const patchedEventListeners: Map<EventListenerOrEventListenerObject, NonNullable<MessagePort['onmessage']>> = new Map();\n\n        messageChannel.port1.addEventListener = ((addEventListener) => {\n            return (...args: [string, EventListenerOrEventListenerObject, (boolean | AddEventListenerOptions)?]): void => {\n                if (args[0] === 'message') {\n                    const unpatchedEventListener =\n                        typeof args[1] === 'function'\n                            ? args[1]\n                            : typeof args[1] === 'object' && args[1] !== null && typeof args[1].handleEvent === 'function'\n                            ? args[1].handleEvent\n                            : null;\n\n                    if (unpatchedEventListener !== null) {\n                        const patchedEventListener = patchedEventListeners.get(args[1]);\n\n                        if (patchedEventListener !== undefined) {\n                            args[1] = <EventListenerOrEventListenerObject>patchedEventListener;\n                        } else {\n                            args[1] = (event: Event) => {\n                                exposeCurrentFrameAndCurrentTime(nativeContext.currentTime, nativeContext.sampleRate, () =>\n                                    unpatchedEventListener(event)\n                                );\n                            };\n\n                            patchedEventListeners.set(unpatchedEventListener, args[1]);\n                        }\n                    }\n                }\n\n                return addEventListener.call(messageChannel.port1, args[0], args[1], args[2]);\n            };\n        })(messageChannel.port1.addEventListener);\n\n        messageChannel.port1.removeEventListener = ((removeEventListener) => {\n            return (...args: any[]): void => {\n                if (args[0] === 'message') {\n                    const patchedEventListener = patchedEventListeners.get(args[1]);\n\n                    if (patchedEventListener !== undefined) {\n                        patchedEventListeners.delete(args[1]);\n\n                        args[1] = patchedEventListener;\n                    }\n                }\n\n                return removeEventListener.call(messageChannel.port1, args[0], args[1], args[2]);\n            };\n        })(messageChannel.port1.removeEventListener);\n\n        let onmessage: MessagePort['onmessage'] = null;\n\n        Object.defineProperty(messageChannel.port1, 'onmessage', {\n            get: () => onmessage,\n            set: (value) => {\n                if (typeof onmessage === 'function') {\n                    messageChannel.port1.removeEventListener('message', onmessage);\n                }\n\n                onmessage = typeof value === 'function' ? value : null;\n\n                if (typeof onmessage === 'function') {\n                    messageChannel.port1.addEventListener('message', onmessage);\n                    messageChannel.port1.start();\n                }\n            }\n        });\n\n        processorConstructor.prototype.port = messageChannel.port1;\n\n        let audioWorkletProcessor: null | IAudioWorkletProcessor = null;\n\n        const audioWorkletProcessorPromise = createAudioWorkletProcessor(\n            nativeContext,\n            nativeAudioWorkletNodeFaker,\n            processorConstructor,\n            options\n        );\n\n        audioWorkletProcessorPromise.then((dWrkltPrcssr) => (audioWorkletProcessor = dWrkltPrcssr));\n\n        const inputs = createNestedArrays(options.numberOfInputs, options.channelCount);\n        const outputs = createNestedArrays(options.numberOfOutputs, outputChannelCount);\n        const parameters: { [name: string]: Float32Array } =\n            processorConstructor.parameterDescriptors === undefined\n                ? []\n                : processorConstructor.parameterDescriptors.reduce(\n                      (prmtrs, { name }) => ({ ...prmtrs, [name]: new Float32Array(128) }),\n                      {}\n                  );\n\n        let isActive = true;\n\n        const disconnectOutputsGraph = () => {\n            if (options.numberOfOutputs > 0) {\n                scriptProcessorNode.disconnect(outputChannelSplitterNode);\n            }\n\n            for (let i = 0, outputChannelSplitterNodeOutput = 0; i < options.numberOfOutputs; i += 1) {\n                const outputChannelMergerNode = outputChannelMergerNodes[i];\n\n                for (let j = 0; j < outputChannelCount[i]; j += 1) {\n                    outputChannelSplitterNode.disconnect(outputChannelMergerNode, outputChannelSplitterNodeOutput + j, j);\n                }\n\n                outputChannelSplitterNodeOutput += outputChannelCount[i];\n            }\n        };\n\n        const activeInputIndexes = new Map<number, number>();\n\n        // tslint:disable-next-line:deprecation\n        scriptProcessorNode.onaudioprocess = ({ inputBuffer, outputBuffer }: AudioProcessingEvent) => {\n            if (audioWorkletProcessor !== null) {\n                const activeInputs = getActiveAudioWorkletNodeInputs(nativeAudioWorkletNodeFaker);\n\n                for (let i = 0; i < bufferSize; i += 128) {\n                    for (let j = 0; j < options.numberOfInputs; j += 1) {\n                        for (let k = 0; k < options.channelCount; k += 1) {\n                            copyFromChannel(inputBuffer, inputs[j], k, k, i);\n                        }\n                    }\n\n                    if (processorConstructor.parameterDescriptors !== undefined) {\n                        processorConstructor.parameterDescriptors.forEach(({ name }, index) => {\n                            copyFromChannel(inputBuffer, parameters, name, numberOfInputChannels + index, i);\n                        });\n                    }\n\n                    for (let j = 0; j < options.numberOfInputs; j += 1) {\n                        for (let k = 0; k < outputChannelCount[j]; k += 1) {\n                            // The byteLength will be 0 when the ArrayBuffer was transferred.\n                            if (outputs[j][k].byteLength === 0) {\n                                outputs[j][k] = new Float32Array(128);\n                            }\n                        }\n                    }\n\n                    try {\n                        const potentiallyEmptyInputs = inputs.map((input, index) => {\n                            const activeInput = activeInputs[index];\n\n                            if (activeInput.size > 0) {\n                                activeInputIndexes.set(index, bufferSize / 128);\n\n                                return input;\n                            }\n\n                            const count = activeInputIndexes.get(index);\n\n                            if (count === undefined) {\n                                return [];\n                            }\n\n                            if (input.every((channelData) => channelData.every((sample) => sample === 0))) {\n                                if (count === 1) {\n                                    activeInputIndexes.delete(index);\n                                } else {\n                                    activeInputIndexes.set(index, count - 1);\n                                }\n                            }\n\n                            return input;\n                        });\n\n                        const activeSourceFlag = exposeCurrentFrameAndCurrentTime(\n                            nativeContext.currentTime + i / nativeContext.sampleRate,\n                            nativeContext.sampleRate,\n                            () => (<IAudioWorkletProcessor>audioWorkletProcessor).process(potentiallyEmptyInputs, outputs, parameters)\n                        );\n\n                        isActive = activeSourceFlag;\n\n                        for (let j = 0, outputChannelSplitterNodeOutput = 0; j < options.numberOfOutputs; j += 1) {\n                            for (let k = 0; k < outputChannelCount[j]; k += 1) {\n                                copyToChannel(outputBuffer, outputs[j], k, outputChannelSplitterNodeOutput + k, i);\n                            }\n\n                            outputChannelSplitterNodeOutput += outputChannelCount[j];\n                        }\n                    } catch (error) {\n                        isActive = false;\n\n                        nativeAudioWorkletNodeFaker.dispatchEvent(\n                            new ErrorEvent('processorerror', {\n                                colno: error.colno,\n                                filename: error.filename,\n                                lineno: error.lineno,\n                                message: error.message\n                            })\n                        );\n                    }\n\n                    if (!isActive) {\n                        for (let j = 0; j < options.numberOfInputs; j += 1) {\n                            gainNodes[j].disconnect(inputChannelSplitterNodes[j]);\n\n                            for (let k = 0; k < options.channelCount; k += 1) {\n                                inputChannelSplitterNodes[i].disconnect(inputChannelMergerNode, k, j * options.channelCount + k);\n                            }\n                        }\n\n                        if (processorConstructor.parameterDescriptors !== undefined) {\n                            const length = processorConstructor.parameterDescriptors.length;\n\n                            for (let j = 0; j < length; j += 1) {\n                                const constantSourceNode = constantSourceNodes[j];\n\n                                constantSourceNode.disconnect(inputChannelMergerNode, 0, numberOfInputChannels + j);\n                                constantSourceNode.stop();\n                            }\n                        }\n\n                        inputChannelMergerNode.disconnect(scriptProcessorNode);\n\n                        scriptProcessorNode.onaudioprocess = null; // tslint:disable-line:deprecation\n\n                        if (isConnected) {\n                            disconnectOutputsGraph();\n                        } else {\n                            disconnectFakeGraph();\n                        }\n\n                        break;\n                    }\n                }\n            }\n        };\n\n        let isConnected = false;\n\n        // Bug #87: Only Firefox will fire an AudioProcessingEvent if there is no connected output.\n        const nativeGainNode = createNativeGainNode(nativeContext, {\n            channelCount: 1,\n            channelCountMode: 'explicit',\n            channelInterpretation: 'discrete',\n            gain: 0\n        });\n\n        const connectFakeGraph = () => scriptProcessorNode.connect(nativeGainNode).connect(nativeContext.destination);\n        const disconnectFakeGraph = () => {\n            scriptProcessorNode.disconnect(nativeGainNode);\n            nativeGainNode.disconnect();\n        };\n        const whenConnected = () => {\n            if (isActive) {\n                disconnectFakeGraph();\n\n                if (options.numberOfOutputs > 0) {\n                    scriptProcessorNode.connect(outputChannelSplitterNode);\n                }\n\n                for (let i = 0, outputChannelSplitterNodeOutput = 0; i < options.numberOfOutputs; i += 1) {\n                    const outputChannelMergerNode = outputChannelMergerNodes[i];\n\n                    for (let j = 0; j < outputChannelCount[i]; j += 1) {\n                        outputChannelSplitterNode.connect(outputChannelMergerNode, outputChannelSplitterNodeOutput + j, j);\n                    }\n\n                    outputChannelSplitterNodeOutput += outputChannelCount[i];\n                }\n            }\n\n            isConnected = true;\n        };\n        const whenDisconnected = () => {\n            if (isActive) {\n                connectFakeGraph();\n                disconnectOutputsGraph();\n            }\n\n            isConnected = false;\n        };\n\n        connectFakeGraph();\n\n        return monitorConnections(nativeAudioWorkletNodeFaker, whenConnected, whenDisconnected);\n    };\n};\n"]},"metadata":{},"sourceType":"module"}