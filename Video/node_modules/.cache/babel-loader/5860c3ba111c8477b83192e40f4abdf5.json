{"ast":null,"code":"export var createIntersections = function createIntersections(emitNotSupportedError, window, wrapSubscribeFunction) {\n  return function (htmlElement, options) {\n    return wrapSubscribeFunction(function (observer) {\n      if (window === null || window.IntersectionObserver === undefined) {\n        return emitNotSupportedError(observer);\n      }\n\n      var intersectionObserverObserver = new window.IntersectionObserver(function (entries) {\n        return observer.next(entries);\n      }, options);\n\n      try {\n        intersectionObserverObserver.observe(htmlElement);\n      } catch (err) {\n        observer.error(err);\n      }\n\n      return function () {\n        return intersectionObserverObserver.disconnect();\n      };\n    });\n  };\n};","map":{"version":3,"mappings":"AAEA,OAAO,IAAMA,mBAAmB,GAA0B,SAA7CA,mBAA6C,CAACC,qBAAD,EAAwBC,MAAxB,EAAgCC,qBAAhC,EAAyD;EAC/G,OAAO,UAACC,WAAD,EAAcC,OAAd;IAAA,OACHF,qBAAqB,CAAC,UAACG,QAAD,EAAa;MAC/B,IAAIJ,MAAM,KAAK,IAAX,IAAmBA,MAAM,CAACK,oBAAP,KAAgCC,SAAvD,EAAkE;QAC9D,OAAOP,qBAAqB,CAACK,QAAD,CAA5B;MACH;;MAED,IAAMG,4BAA4B,GAAG,IAAIP,MAAM,CAACK,oBAAX,CAAgC,UAACG,OAAD;QAAA,OAAaJ,QAAQ,CAACK,IAAT,CAAcD,OAAd,CAAb;MAAA,CAAhC,EAAqEL,OAArE,CAArC;;MAEA,IAAI;QACAI,4BAA4B,CAACG,OAA7B,CAAqCR,WAArC;MACH,CAFD,CAEE,OAAOS,GAAP,EAAY;QACVP,QAAQ,CAACQ,KAAT,CAAeD,GAAf;MACH;;MAED,OAAO;QAAA,OAAMJ,4BAA4B,CAACM,UAA7B,EAAN;MAAA,CAAP;IACH,CAdoB,CADlB;EAAA,CAAP;AAgBH,CAjBM","names":["createIntersections","emitNotSupportedError","window","wrapSubscribeFunction","htmlElement","options","observer","IntersectionObserver","undefined","intersectionObserverObserver","entries","next","observe","err","error","disconnect"],"sources":["C:\\Users\\brigh\\storage\\js_project\\Gakugeki_WEB\\node_modules\\subscribable-things\\src\\factories\\intersections.ts"],"sourcesContent":["import { TIntersectionsFactory } from '../types';\n\nexport const createIntersections: TIntersectionsFactory = (emitNotSupportedError, window, wrapSubscribeFunction) => {\n    return (htmlElement, options) =>\n        wrapSubscribeFunction((observer) => {\n            if (window === null || window.IntersectionObserver === undefined) {\n                return emitNotSupportedError(observer);\n            }\n\n            const intersectionObserverObserver = new window.IntersectionObserver((entries) => observer.next(entries), options);\n\n            try {\n                intersectionObserverObserver.observe(htmlElement);\n            } catch (err) {\n                observer.error(err);\n            }\n\n            return () => intersectionObserverObserver.disconnect();\n        });\n};\n"]},"metadata":{},"sourceType":"module"}