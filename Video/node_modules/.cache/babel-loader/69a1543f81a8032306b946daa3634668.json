{"ast":null,"code":"export var createWrapSubscribeFunction = function createWrapSubscribeFunction(patch, toObserver) {\n  var emptyFunction = function emptyFunction() {}; // tslint:disable-line:no-empty\n\n\n  var isNextFunction = function isNextFunction(args) {\n    return typeof args[0] === 'function';\n  };\n\n  return function (innerSubscribe) {\n    var _subscribe = function subscribe() {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      var unsubscribe = innerSubscribe(isNextFunction(args) ? toObserver({\n        next: args[0]\n      }) : toObserver.apply(void 0, args));\n\n      if (unsubscribe !== undefined) {\n        return unsubscribe;\n      }\n\n      return emptyFunction;\n    };\n\n    _subscribe[Symbol.observable] = function () {\n      return {\n        subscribe: function subscribe() {\n          return {\n            unsubscribe: _subscribe.apply(void 0, arguments)\n          };\n        }\n      };\n    };\n\n    return patch(_subscribe);\n  };\n};","map":{"version":3,"mappings":"AAGA,OAAO,IAAMA,2BAA2B,GAAkC,SAA7DA,2BAA6D,CAACC,KAAD,EAAQC,UAAR,EAAsB;EAC5F,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,GAAK,CAAG,CAA9B,CAD4F,CAC5D;;;EAChC,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAAIC,IAAJ;IAAA,OAAoE,OAAOA,IAAI,CAAC,CAAD,CAAX,KAAmB,UAAvF;EAAA,CAAvB;;EAEA,OAAO,UAAIC,cAAJ,EAA6C;IAChD,IAAMC,UAAS,GAA2B,SAApCA,SAAoC,GAAoC;MAAA,kCAAhCF,IAAgC;QAAhCA,IAAgC;MAAA;;MAC1E,IAAMG,WAAW,GAAGF,cAAc,CAACF,cAAc,CAACC,IAAD,CAAd,GAAuBH,UAAU,CAAC;QAAEO,IAAI,EAAEJ,IAAI,CAAC,CAAD;MAAZ,CAAD,CAAjC,GAAuDH,UAAU,MAAV,SAAcG,IAAd,CAAxD,CAAlC;;MAEA,IAAIG,WAAW,KAAKE,SAApB,EAA+B;QAC3B,OAAOF,WAAP;MACH;;MAED,OAAOL,aAAP;IACH,CARD;;IAUAI,UAAS,CAACI,MAAM,CAACC,UAAR,CAAT,GAA+B;MAAA,OAAO;QAClCL,SAAS,EAAE;UAAA,OAAwD;YAAEC,WAAW,EAAED,UAAS,MAAT;UAAf,CAAxD;QAAA;MADuB,CAAP;IAAA,CAA/B;;IAIA,OAAON,KAAK,CAACM,UAAD,CAAZ;EACH,CAhBD;AAiBH,CArBM","names":["createWrapSubscribeFunction","patch","toObserver","emptyFunction","isNextFunction","args","innerSubscribe","subscribe","unsubscribe","next","undefined","Symbol","observable"],"sources":["C:\\Users\\brigh\\storage\\js_project\\Gakugeki_WEB\\node_modules\\subscribable-things\\src\\factories\\wrap-subscribe-function.ts"],"sourcesContent":["import { Observer, Subscribable } from 'rxjs-interop';\nimport { TObserverParameters, TSubscribableThing, TSubscribeFunction, TWrapSubscribeFunctionFactory } from '../types';\n\nexport const createWrapSubscribeFunction: TWrapSubscribeFunctionFactory = (patch, toObserver) => {\n    const emptyFunction = () => {}; // tslint:disable-line:no-empty\n    const isNextFunction = <T>(args: TObserverParameters<T>): args is [Observer<T>['next']] => typeof args[0] === 'function';\n\n    return <T>(innerSubscribe: TSubscribeFunction<T>) => {\n        const subscribe = <TSubscribableThing<T>>((...args: TObserverParameters<T>) => {\n            const unsubscribe = innerSubscribe(isNextFunction(args) ? toObserver({ next: args[0] }) : toObserver(...args));\n\n            if (unsubscribe !== undefined) {\n                return unsubscribe;\n            }\n\n            return emptyFunction;\n        });\n\n        subscribe[Symbol.observable] = () => ({\n            subscribe: (...args: Parameters<Subscribable<T>['subscribe']>) => ({ unsubscribe: subscribe(...args) })\n        });\n\n        return patch(subscribe);\n    };\n};\n"]},"metadata":{},"sourceType":"module"}