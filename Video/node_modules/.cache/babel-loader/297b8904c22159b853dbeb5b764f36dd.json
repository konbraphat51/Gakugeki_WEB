{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport var createGainNodeRendererFactory = function createGainNodeRendererFactory(connectAudioParam, createNativeGainNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) {\n  return function () {\n    var renderedNativeGainNodes = new WeakMap();\n\n    var createGainNode = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(proxy, nativeOfflineAudioContext) {\n        var nativeGainNode, nativeGainNodeIsOwnedByContext, options;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                nativeGainNode = getNativeAudioNode(proxy); // If the initially used nativeGainNode was not constructed on the same OfflineAudioContext it needs to be created again.\n\n                nativeGainNodeIsOwnedByContext = isOwnedByContext(nativeGainNode, nativeOfflineAudioContext);\n\n                if (!nativeGainNodeIsOwnedByContext) {\n                  options = {\n                    channelCount: nativeGainNode.channelCount,\n                    channelCountMode: nativeGainNode.channelCountMode,\n                    channelInterpretation: nativeGainNode.channelInterpretation,\n                    gain: nativeGainNode.gain.value\n                  };\n                  nativeGainNode = createNativeGainNode(nativeOfflineAudioContext, options);\n                }\n\n                renderedNativeGainNodes.set(nativeOfflineAudioContext, nativeGainNode);\n\n                if (nativeGainNodeIsOwnedByContext) {\n                  _context.next = 9;\n                  break;\n                }\n\n                _context.next = 7;\n                return renderAutomation(nativeOfflineAudioContext, proxy.gain, nativeGainNode.gain);\n\n              case 7:\n                _context.next = 11;\n                break;\n\n              case 9:\n                _context.next = 11;\n                return connectAudioParam(nativeOfflineAudioContext, proxy.gain, nativeGainNode.gain);\n\n              case 11:\n                _context.next = 13;\n                return renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeGainNode);\n\n              case 13:\n                return _context.abrupt(\"return\", nativeGainNode);\n\n              case 14:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function createGainNode(_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    return {\n      render: function render(proxy, nativeOfflineAudioContext) {\n        var renderedNativeGainNode = renderedNativeGainNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeGainNode !== undefined) {\n          return Promise.resolve(renderedNativeGainNode);\n        }\n\n        return createGainNode(proxy, nativeOfflineAudioContext);\n      }\n    };\n  };\n};","map":{"version":3,"mappings":";;AAAA,SAASA,gBAAT,QAAiC,gCAAjC;AAIA,OAAO,IAAMC,6BAA6B,GAAoC,SAAjEA,6BAAiE,CAC1EC,iBAD0E,EAE1EC,oBAF0E,EAG1EC,kBAH0E,EAI1EC,gBAJ0E,EAK1EC,uBAL0E,EAM1E;EACA,OAAO,YAAmE;IACtE,IAAMC,uBAAuB,GAAG,IAAIC,OAAJ,EAAhC;;IAEA,IAAMC,cAAc;MAAA,sEAAG,iBAAOC,KAAP,EAA4BC,yBAA5B;QAAA;QAAA;UAAA;YAAA;cAAA;gBACfC,cADe,GACER,kBAAkB,CAAqBM,KAArB,CADpB,EAGnB;;gBACMG,8BAJa,GAIoBb,gBAAgB,CAACY,cAAD,EAAiBD,yBAAjB,CAJpC;;gBAMnB,IAAI,CAACE,8BAAL,EAAqC;kBAC3BC,OAD2B,GACjB;oBACZC,YAAY,EAAEH,cAAc,CAACG,YADjB;oBAEZC,gBAAgB,EAAEJ,cAAc,CAACI,gBAFrB;oBAGZC,qBAAqB,EAAEL,cAAc,CAACK,qBAH1B;oBAIZC,IAAI,EAAEN,cAAc,CAACM,IAAf,CAAoBC;kBAJd,CADiB;kBAQjCP,cAAc,GAAGT,oBAAoB,CAACQ,yBAAD,EAA4BG,OAA5B,CAArC;gBACH;;gBAEDP,uBAAuB,CAACa,GAAxB,CAA4BT,yBAA5B,EAAuDC,cAAvD;;gBAjBmB,IAmBdC,8BAnBc;kBAAA;kBAAA;gBAAA;;gBAAA;gBAAA,OAoBTR,gBAAgB,CAACM,yBAAD,EAA4BD,KAAK,CAACQ,IAAlC,EAAwCN,cAAc,CAACM,IAAvD,CApBP;;cAAA;gBAAA;gBAAA;;cAAA;gBAAA;gBAAA,OAsBThB,iBAAiB,CAACS,yBAAD,EAA4BD,KAAK,CAACQ,IAAlC,EAAwCN,cAAc,CAACM,IAAvD,CAtBR;;cAAA;gBAAA;gBAAA,OAyBbZ,uBAAuB,CAACI,KAAD,EAAQC,yBAAR,EAAmCC,cAAnC,CAzBV;;cAAA;gBAAA,iCA2BZA,cA3BY;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CAAH;;MAAA,gBAAdH,cAAc;QAAA;MAAA;IAAA,GAApB;;IA8BA,OAAO;MACHY,MADG,kBACIX,KADJ,EACyBC,yBADzB,EAC8E;QAC7E,IAAMW,sBAAsB,GAAGf,uBAAuB,CAACgB,GAAxB,CAA4BZ,yBAA5B,CAA/B;;QAEA,IAAIW,sBAAsB,KAAKE,SAA/B,EAA0C;UACtC,OAAOC,OAAO,CAACC,OAAR,CAAgBJ,sBAAhB,CAAP;QACH;;QAED,OAAOb,cAAc,CAACC,KAAD,EAAQC,yBAAR,CAArB;MACH;IATE,CAAP;EAWH,CA5CD;AA6CH,CApDM","names":["isOwnedByContext","createGainNodeRendererFactory","connectAudioParam","createNativeGainNode","getNativeAudioNode","renderAutomation","renderInputsOfAudioNode","renderedNativeGainNodes","WeakMap","createGainNode","proxy","nativeOfflineAudioContext","nativeGainNode","nativeGainNodeIsOwnedByContext","options","channelCount","channelCountMode","channelInterpretation","gain","value","set","render","renderedNativeGainNode","get","undefined","Promise","resolve"],"sources":["C:\\Users\\brigh\\storage\\js_project\\Gakugeki_WEB\\node_modules\\standardized-audio-context\\src\\factories\\gain-node-renderer-factory.ts"],"sourcesContent":["import { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { IGainNode, IMinimalOfflineAudioContext, IOfflineAudioContext } from '../interfaces';\nimport { TGainNodeRendererFactoryFactory, TNativeGainNode, TNativeOfflineAudioContext } from '../types';\n\nexport const createGainNodeRendererFactory: TGainNodeRendererFactoryFactory = (\n    connectAudioParam,\n    createNativeGainNode,\n    getNativeAudioNode,\n    renderAutomation,\n    renderInputsOfAudioNode\n) => {\n    return <T extends IMinimalOfflineAudioContext | IOfflineAudioContext>() => {\n        const renderedNativeGainNodes = new WeakMap<TNativeOfflineAudioContext, TNativeGainNode>();\n\n        const createGainNode = async (proxy: IGainNode<T>, nativeOfflineAudioContext: TNativeOfflineAudioContext) => {\n            let nativeGainNode = getNativeAudioNode<T, TNativeGainNode>(proxy);\n\n            // If the initially used nativeGainNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeGainNodeIsOwnedByContext = isOwnedByContext(nativeGainNode, nativeOfflineAudioContext);\n\n            if (!nativeGainNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeGainNode.channelCount,\n                    channelCountMode: nativeGainNode.channelCountMode,\n                    channelInterpretation: nativeGainNode.channelInterpretation,\n                    gain: nativeGainNode.gain.value\n                };\n\n                nativeGainNode = createNativeGainNode(nativeOfflineAudioContext, options);\n            }\n\n            renderedNativeGainNodes.set(nativeOfflineAudioContext, nativeGainNode);\n\n            if (!nativeGainNodeIsOwnedByContext) {\n                await renderAutomation(nativeOfflineAudioContext, proxy.gain, nativeGainNode.gain);\n            } else {\n                await connectAudioParam(nativeOfflineAudioContext, proxy.gain, nativeGainNode.gain);\n            }\n\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeGainNode);\n\n            return nativeGainNode;\n        };\n\n        return {\n            render(proxy: IGainNode<T>, nativeOfflineAudioContext: TNativeOfflineAudioContext): Promise<TNativeGainNode> {\n                const renderedNativeGainNode = renderedNativeGainNodes.get(nativeOfflineAudioContext);\n\n                if (renderedNativeGainNode !== undefined) {\n                    return Promise.resolve(renderedNativeGainNode);\n                }\n\n                return createGainNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n"]},"metadata":{},"sourceType":"module"}