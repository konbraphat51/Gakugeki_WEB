{"ast":null,"code":"import _objectSpread from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nvar DEFAULT_OPTIONS = {\n  channelCount: 2,\n  channelCountMode: 'clamped-max',\n  channelInterpretation: 'speakers',\n  coneInnerAngle: 360,\n  coneOuterAngle: 360,\n  coneOuterGain: 0,\n  distanceModel: 'inverse',\n  maxDistance: 10000,\n  orientationX: 1,\n  orientationY: 0,\n  orientationZ: 0,\n  panningModel: 'equalpower',\n  positionX: 0,\n  positionY: 0,\n  positionZ: 0,\n  refDistance: 1,\n  rolloffFactor: 1\n};\nexport var createPannerNodeConstructor = function createPannerNodeConstructor(audioNodeConstructor, createAudioParam, createNativePannerNode, createPannerNodeRenderer, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime) {\n  return /*#__PURE__*/function (_audioNodeConstructor) {\n    _inherits(PannerNode, _audioNodeConstructor);\n\n    var _super = _createSuper(PannerNode);\n\n    function PannerNode(context, options) {\n      var _this;\n\n      _classCallCheck(this, PannerNode);\n\n      var nativeContext = getNativeContext(context);\n\n      var mergedOptions = _objectSpread(_objectSpread({}, DEFAULT_OPTIONS), options);\n\n      var nativePannerNode = createNativePannerNode(nativeContext, mergedOptions);\n      var isOffline = isNativeOfflineAudioContext(nativeContext);\n      var pannerNodeRenderer = isOffline ? createPannerNodeRenderer() : null;\n      _this = _super.call(this, context, false, nativePannerNode, pannerNodeRenderer);\n      _this._nativePannerNode = nativePannerNode; // Bug #74: Safari does not export the correct values for maxValue and minValue.\n\n      _this._orientationX = createAudioParam(_assertThisInitialized(_this), isOffline, nativePannerNode.orientationX, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n      _this._orientationY = createAudioParam(_assertThisInitialized(_this), isOffline, nativePannerNode.orientationY, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n      _this._orientationZ = createAudioParam(_assertThisInitialized(_this), isOffline, nativePannerNode.orientationZ, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n      _this._positionX = createAudioParam(_assertThisInitialized(_this), isOffline, nativePannerNode.positionX, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n      _this._positionY = createAudioParam(_assertThisInitialized(_this), isOffline, nativePannerNode.positionY, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n      _this._positionZ = createAudioParam(_assertThisInitialized(_this), isOffline, nativePannerNode.positionZ, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT); // @todo Determine a meaningful tail-time instead of just using one second.\n\n      setAudioNodeTailTime(_assertThisInitialized(_this), 1);\n      return _this;\n    }\n\n    _createClass(PannerNode, [{\n      key: \"coneInnerAngle\",\n      get: function get() {\n        return this._nativePannerNode.coneInnerAngle;\n      },\n      set: function set(value) {\n        this._nativePannerNode.coneInnerAngle = value;\n      }\n    }, {\n      key: \"coneOuterAngle\",\n      get: function get() {\n        return this._nativePannerNode.coneOuterAngle;\n      },\n      set: function set(value) {\n        this._nativePannerNode.coneOuterAngle = value;\n      }\n    }, {\n      key: \"coneOuterGain\",\n      get: function get() {\n        return this._nativePannerNode.coneOuterGain;\n      },\n      set: function set(value) {\n        this._nativePannerNode.coneOuterGain = value;\n      }\n    }, {\n      key: \"distanceModel\",\n      get: function get() {\n        return this._nativePannerNode.distanceModel;\n      },\n      set: function set(value) {\n        this._nativePannerNode.distanceModel = value;\n      }\n    }, {\n      key: \"maxDistance\",\n      get: function get() {\n        return this._nativePannerNode.maxDistance;\n      },\n      set: function set(value) {\n        this._nativePannerNode.maxDistance = value;\n      }\n    }, {\n      key: \"orientationX\",\n      get: function get() {\n        return this._orientationX;\n      }\n    }, {\n      key: \"orientationY\",\n      get: function get() {\n        return this._orientationY;\n      }\n    }, {\n      key: \"orientationZ\",\n      get: function get() {\n        return this._orientationZ;\n      }\n    }, {\n      key: \"panningModel\",\n      get: function get() {\n        return this._nativePannerNode.panningModel;\n      },\n      set: function set(value) {\n        this._nativePannerNode.panningModel = value;\n      }\n    }, {\n      key: \"positionX\",\n      get: function get() {\n        return this._positionX;\n      }\n    }, {\n      key: \"positionY\",\n      get: function get() {\n        return this._positionY;\n      }\n    }, {\n      key: \"positionZ\",\n      get: function get() {\n        return this._positionZ;\n      }\n    }, {\n      key: \"refDistance\",\n      get: function get() {\n        return this._nativePannerNode.refDistance;\n      },\n      set: function set(value) {\n        this._nativePannerNode.refDistance = value;\n      }\n    }, {\n      key: \"rolloffFactor\",\n      get: function get() {\n        return this._nativePannerNode.rolloffFactor;\n      },\n      set: function set(value) {\n        this._nativePannerNode.rolloffFactor = value;\n      }\n    }]);\n\n    return PannerNode;\n  }(audioNodeConstructor);\n};","map":{"version":3,"mappings":"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","names":["MOST_NEGATIVE_SINGLE_FLOAT","MOST_POSITIVE_SINGLE_FLOAT","DEFAULT_OPTIONS","channelCount","channelCountMode","channelInterpretation","coneInnerAngle","coneOuterAngle","coneOuterGain","distanceModel","maxDistance","orientationX","orientationY","orientationZ","panningModel","positionX","positionY","positionZ","refDistance","rolloffFactor","createPannerNodeConstructor","audioNodeConstructor","createAudioParam","createNativePannerNode","createPannerNodeRenderer","getNativeContext","isNativeOfflineAudioContext","setAudioNodeTailTime","context","options","nativeContext","mergedOptions","nativePannerNode","isOffline","pannerNodeRenderer","_nativePannerNode","_orientationX","_orientationY","_orientationZ","_positionX","_positionY","_positionZ","value"],"sources":["C:\\Users\\brigh\\storage\\js_project\\Gakugeki_WEB\\node_modules\\standardized-audio-context\\src\\factories\\panner-node-constructor.ts"],"sourcesContent":["import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nimport { IAudioParam, IPannerNode, IPannerOptions } from '../interfaces';\nimport {\n    TAudioNodeRenderer,\n    TContext,\n    TDistanceModelType,\n    TNativePannerNode,\n    TPannerNodeConstructorFactory,\n    TPanningModelType\n} from '../types';\n\nconst DEFAULT_OPTIONS = {\n    channelCount: 2,\n    channelCountMode: 'clamped-max',\n    channelInterpretation: 'speakers',\n    coneInnerAngle: 360,\n    coneOuterAngle: 360,\n    coneOuterGain: 0,\n    distanceModel: 'inverse',\n    maxDistance: 10000,\n    orientationX: 1,\n    orientationY: 0,\n    orientationZ: 0,\n    panningModel: 'equalpower',\n    positionX: 0,\n    positionY: 0,\n    positionZ: 0,\n    refDistance: 1,\n    rolloffFactor: 1\n} as const;\n\nexport const createPannerNodeConstructor: TPannerNodeConstructorFactory = (\n    audioNodeConstructor,\n    createAudioParam,\n    createNativePannerNode,\n    createPannerNodeRenderer,\n    getNativeContext,\n    isNativeOfflineAudioContext,\n    setAudioNodeTailTime\n) => {\n    return class PannerNode<T extends TContext> extends audioNodeConstructor<T> implements IPannerNode<T> {\n        private _nativePannerNode: TNativePannerNode;\n\n        private _orientationX: IAudioParam;\n\n        private _orientationY: IAudioParam;\n\n        private _orientationZ: IAudioParam;\n\n        private _positionX: IAudioParam;\n\n        private _positionY: IAudioParam;\n\n        private _positionZ: IAudioParam;\n\n        constructor(context: T, options?: Partial<IPannerOptions>) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativePannerNode = createNativePannerNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const pannerNodeRenderer = <TAudioNodeRenderer<T, this>>(isOffline ? createPannerNodeRenderer() : null);\n\n            super(context, false, nativePannerNode, pannerNodeRenderer);\n\n            this._nativePannerNode = nativePannerNode;\n            // Bug #74: Safari does not export the correct values for maxValue and minValue.\n            this._orientationX = createAudioParam(\n                this,\n                isOffline,\n                nativePannerNode.orientationX,\n                MOST_POSITIVE_SINGLE_FLOAT,\n                MOST_NEGATIVE_SINGLE_FLOAT\n            );\n            this._orientationY = createAudioParam(\n                this,\n                isOffline,\n                nativePannerNode.orientationY,\n                MOST_POSITIVE_SINGLE_FLOAT,\n                MOST_NEGATIVE_SINGLE_FLOAT\n            );\n            this._orientationZ = createAudioParam(\n                this,\n                isOffline,\n                nativePannerNode.orientationZ,\n                MOST_POSITIVE_SINGLE_FLOAT,\n                MOST_NEGATIVE_SINGLE_FLOAT\n            );\n            this._positionX = createAudioParam(\n                this,\n                isOffline,\n                nativePannerNode.positionX,\n                MOST_POSITIVE_SINGLE_FLOAT,\n                MOST_NEGATIVE_SINGLE_FLOAT\n            );\n            this._positionY = createAudioParam(\n                this,\n                isOffline,\n                nativePannerNode.positionY,\n                MOST_POSITIVE_SINGLE_FLOAT,\n                MOST_NEGATIVE_SINGLE_FLOAT\n            );\n            this._positionZ = createAudioParam(\n                this,\n                isOffline,\n                nativePannerNode.positionZ,\n                MOST_POSITIVE_SINGLE_FLOAT,\n                MOST_NEGATIVE_SINGLE_FLOAT\n            );\n\n            // @todo Determine a meaningful tail-time instead of just using one second.\n            setAudioNodeTailTime(this, 1);\n        }\n\n        get coneInnerAngle(): number {\n            return this._nativePannerNode.coneInnerAngle;\n        }\n\n        set coneInnerAngle(value) {\n            this._nativePannerNode.coneInnerAngle = value;\n        }\n\n        get coneOuterAngle(): number {\n            return this._nativePannerNode.coneOuterAngle;\n        }\n\n        set coneOuterAngle(value) {\n            this._nativePannerNode.coneOuterAngle = value;\n        }\n\n        get coneOuterGain(): number {\n            return this._nativePannerNode.coneOuterGain;\n        }\n\n        set coneOuterGain(value) {\n            this._nativePannerNode.coneOuterGain = value;\n        }\n\n        get distanceModel(): TDistanceModelType {\n            return this._nativePannerNode.distanceModel;\n        }\n\n        set distanceModel(value) {\n            this._nativePannerNode.distanceModel = value;\n        }\n\n        get maxDistance(): number {\n            return this._nativePannerNode.maxDistance;\n        }\n\n        set maxDistance(value) {\n            this._nativePannerNode.maxDistance = value;\n        }\n\n        get orientationX(): IAudioParam {\n            return this._orientationX;\n        }\n\n        get orientationY(): IAudioParam {\n            return this._orientationY;\n        }\n\n        get orientationZ(): IAudioParam {\n            return this._orientationZ;\n        }\n\n        get panningModel(): TPanningModelType {\n            return this._nativePannerNode.panningModel;\n        }\n\n        set panningModel(value) {\n            this._nativePannerNode.panningModel = value;\n        }\n\n        get positionX(): IAudioParam {\n            return this._positionX;\n        }\n\n        get positionY(): IAudioParam {\n            return this._positionY;\n        }\n\n        get positionZ(): IAudioParam {\n            return this._positionZ;\n        }\n\n        get refDistance(): number {\n            return this._nativePannerNode.refDistance;\n        }\n\n        set refDistance(value) {\n            this._nativePannerNode.refDistance = value;\n        }\n\n        get rolloffFactor(): number {\n            return this._nativePannerNode.rolloffFactor;\n        }\n\n        set rolloffFactor(value) {\n            this._nativePannerNode.rolloffFactor = value;\n        }\n    };\n};\n"]},"metadata":{},"sourceType":"module"}