{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { filterBuffer } from '../helpers/filter-buffer';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\n\nvar filterFullBuffer = function filterFullBuffer(renderedBuffer, nativeOfflineAudioContext, feedback, feedforward) {\n  var convertedFeedback = feedback instanceof Float64Array ? feedback : new Float64Array(feedback);\n  var convertedFeedforward = feedforward instanceof Float64Array ? feedforward : new Float64Array(feedforward);\n  var feedbackLength = convertedFeedback.length;\n  var feedforwardLength = convertedFeedforward.length;\n  var minLength = Math.min(feedbackLength, feedforwardLength);\n\n  if (convertedFeedback[0] !== 1) {\n    for (var i = 0; i < feedbackLength; i += 1) {\n      convertedFeedforward[i] /= convertedFeedback[0];\n    }\n\n    for (var _i = 1; _i < feedforwardLength; _i += 1) {\n      convertedFeedback[_i] /= convertedFeedback[0];\n    }\n  }\n\n  var bufferLength = 32;\n  var xBuffer = new Float32Array(bufferLength);\n  var yBuffer = new Float32Array(bufferLength);\n  var filteredBuffer = nativeOfflineAudioContext.createBuffer(renderedBuffer.numberOfChannels, renderedBuffer.length, renderedBuffer.sampleRate);\n  var numberOfChannels = renderedBuffer.numberOfChannels;\n\n  for (var _i2 = 0; _i2 < numberOfChannels; _i2 += 1) {\n    var input = renderedBuffer.getChannelData(_i2);\n    var output = filteredBuffer.getChannelData(_i2);\n    xBuffer.fill(0);\n    yBuffer.fill(0);\n    filterBuffer(convertedFeedback, feedbackLength, convertedFeedforward, feedforwardLength, minLength, xBuffer, yBuffer, 0, bufferLength, input, output);\n  }\n\n  return filteredBuffer;\n};\n\nexport var createIIRFilterNodeRendererFactory = function createIIRFilterNodeRendererFactory(createNativeAudioBufferSourceNode, getNativeAudioNode, nativeOfflineAudioContextConstructor, renderInputsOfAudioNode, renderNativeOfflineAudioContext) {\n  return function (feedback, feedforward) {\n    var renderedNativeAudioNodes = new WeakMap();\n    var filteredBufferPromise = null;\n\n    var createAudioNode = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(proxy, nativeOfflineAudioContext) {\n        var nativeAudioBufferSourceNode, nativeIIRFilterNode, nativeIIRFilterNodeIsOwnedByContext, partialOfflineAudioContext, filteredBuffer;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                nativeAudioBufferSourceNode = null;\n                nativeIIRFilterNode = getNativeAudioNode(proxy); // If the initially used nativeIIRFilterNode was not constructed on the same OfflineAudioContext it needs to be created again.\n\n                nativeIIRFilterNodeIsOwnedByContext = isOwnedByContext(nativeIIRFilterNode, nativeOfflineAudioContext); // Bug #9: Safari does not support IIRFilterNodes.\n\n                if (nativeOfflineAudioContext.createIIRFilter === undefined) {\n                  nativeAudioBufferSourceNode = createNativeAudioBufferSourceNode(nativeOfflineAudioContext, {\n                    buffer: null,\n                    channelCount: 2,\n                    channelCountMode: 'max',\n                    channelInterpretation: 'speakers',\n                    loop: false,\n                    loopEnd: 0,\n                    loopStart: 0,\n                    playbackRate: 1\n                  });\n                } else if (!nativeIIRFilterNodeIsOwnedByContext) {\n                  // @todo TypeScript defines the parameters of createIIRFilter() as arrays of numbers.\n                  nativeIIRFilterNode = nativeOfflineAudioContext.createIIRFilter(feedforward, feedback);\n                }\n\n                renderedNativeAudioNodes.set(nativeOfflineAudioContext, nativeAudioBufferSourceNode === null ? nativeIIRFilterNode : nativeAudioBufferSourceNode);\n\n                if (!(nativeAudioBufferSourceNode !== null)) {\n                  _context2.next = 17;\n                  break;\n                }\n\n                if (!(filteredBufferPromise === null)) {\n                  _context2.next = 11;\n                  break;\n                }\n\n                if (!(nativeOfflineAudioContextConstructor === null)) {\n                  _context2.next = 9;\n                  break;\n                }\n\n                throw new Error('Missing the native OfflineAudioContext constructor.');\n\n              case 9:\n                partialOfflineAudioContext = new nativeOfflineAudioContextConstructor( // Bug #47: The AudioDestinationNode in Safari gets not initialized correctly.\n                proxy.context.destination.channelCount, // Bug #17: Safari does not yet expose the length.\n                proxy.context.length, nativeOfflineAudioContext.sampleRate);\n                filteredBufferPromise = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n                  var renderedBuffer;\n                  return _regeneratorRuntime().wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          _context.next = 2;\n                          return renderInputsOfAudioNode(proxy, partialOfflineAudioContext, partialOfflineAudioContext.destination);\n\n                        case 2:\n                          _context.next = 4;\n                          return renderNativeOfflineAudioContext(partialOfflineAudioContext);\n\n                        case 4:\n                          renderedBuffer = _context.sent;\n                          return _context.abrupt(\"return\", filterFullBuffer(renderedBuffer, nativeOfflineAudioContext, feedback, feedforward));\n\n                        case 6:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee);\n                }))();\n\n              case 11:\n                _context2.next = 13;\n                return filteredBufferPromise;\n\n              case 13:\n                filteredBuffer = _context2.sent;\n                nativeAudioBufferSourceNode.buffer = filteredBuffer;\n                nativeAudioBufferSourceNode.start(0);\n                return _context2.abrupt(\"return\", nativeAudioBufferSourceNode);\n\n              case 17:\n                _context2.next = 19;\n                return renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeIIRFilterNode);\n\n              case 19:\n                return _context2.abrupt(\"return\", nativeIIRFilterNode);\n\n              case 20:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function createAudioNode(_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    return {\n      render: function render(proxy, nativeOfflineAudioContext) {\n        var renderedNativeAudioNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeAudioNode !== undefined) {\n          return Promise.resolve(renderedNativeAudioNode);\n        }\n\n        return createAudioNode(proxy, nativeOfflineAudioContext);\n      }\n    };\n  };\n};","map":{"version":3,"mappings":"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","names":["filterBuffer","isOwnedByContext","filterFullBuffer","renderedBuffer","nativeOfflineAudioContext","feedback","feedforward","convertedFeedback","Float64Array","convertedFeedforward","feedbackLength","length","feedforwardLength","minLength","Math","min","i","bufferLength","xBuffer","Float32Array","yBuffer","filteredBuffer","createBuffer","numberOfChannels","sampleRate","input","getChannelData","output","fill","createIIRFilterNodeRendererFactory","createNativeAudioBufferSourceNode","getNativeAudioNode","nativeOfflineAudioContextConstructor","renderInputsOfAudioNode","renderNativeOfflineAudioContext","renderedNativeAudioNodes","WeakMap","filteredBufferPromise","createAudioNode","proxy","nativeAudioBufferSourceNode","nativeIIRFilterNode","nativeIIRFilterNodeIsOwnedByContext","createIIRFilter","undefined","buffer","channelCount","channelCountMode","channelInterpretation","loop","loopEnd","loopStart","playbackRate","set","Error","partialOfflineAudioContext","context","destination","start","render","renderedNativeAudioNode","get","Promise","resolve"],"sources":["C:\\Users\\brigh\\storage\\js_project\\Gakugeki_WEB\\node_modules\\standardized-audio-context\\src\\factories\\iir-filter-node-renderer-factory.ts"],"sourcesContent":["import { filterBuffer } from '../helpers/filter-buffer';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { IIIRFilterNode, IMinimalOfflineAudioContext, IOfflineAudioContext } from '../interfaces';\nimport {\n    TIIRFilterNodeRendererFactoryFactory,\n    TNativeAudioBuffer,\n    TNativeAudioBufferSourceNode,\n    TNativeIIRFilterNode,\n    TNativeOfflineAudioContext\n} from '../types';\n\nconst filterFullBuffer = (\n    renderedBuffer: TNativeAudioBuffer,\n    nativeOfflineAudioContext: TNativeOfflineAudioContext,\n    feedback: Iterable<number>,\n    feedforward: Iterable<number>\n) => {\n    const convertedFeedback = feedback instanceof Float64Array ? feedback : new Float64Array(feedback);\n    const convertedFeedforward = feedforward instanceof Float64Array ? feedforward : new Float64Array(feedforward);\n    const feedbackLength = convertedFeedback.length;\n    const feedforwardLength = convertedFeedforward.length;\n    const minLength = Math.min(feedbackLength, feedforwardLength);\n\n    if (convertedFeedback[0] !== 1) {\n        for (let i = 0; i < feedbackLength; i += 1) {\n            convertedFeedforward[i] /= convertedFeedback[0];\n        }\n\n        for (let i = 1; i < feedforwardLength; i += 1) {\n            convertedFeedback[i] /= convertedFeedback[0];\n        }\n    }\n\n    const bufferLength = 32;\n    const xBuffer = new Float32Array(bufferLength);\n    const yBuffer = new Float32Array(bufferLength);\n\n    const filteredBuffer = nativeOfflineAudioContext.createBuffer(\n        renderedBuffer.numberOfChannels,\n        renderedBuffer.length,\n        renderedBuffer.sampleRate\n    );\n\n    const numberOfChannels = renderedBuffer.numberOfChannels;\n\n    for (let i = 0; i < numberOfChannels; i += 1) {\n        const input = renderedBuffer.getChannelData(i);\n        const output = filteredBuffer.getChannelData(i);\n\n        xBuffer.fill(0);\n        yBuffer.fill(0);\n\n        filterBuffer(\n            convertedFeedback,\n            feedbackLength,\n            convertedFeedforward,\n            feedforwardLength,\n            minLength,\n            xBuffer,\n            yBuffer,\n            0,\n            bufferLength,\n            input,\n            output\n        );\n    }\n\n    return filteredBuffer;\n};\n\nexport const createIIRFilterNodeRendererFactory: TIIRFilterNodeRendererFactoryFactory = (\n    createNativeAudioBufferSourceNode,\n    getNativeAudioNode,\n    nativeOfflineAudioContextConstructor,\n    renderInputsOfAudioNode,\n    renderNativeOfflineAudioContext\n) => {\n    return <T extends IMinimalOfflineAudioContext | IOfflineAudioContext>(feedback: Iterable<number>, feedforward: Iterable<number>) => {\n        const renderedNativeAudioNodes = new WeakMap<TNativeOfflineAudioContext, TNativeAudioBufferSourceNode | TNativeIIRFilterNode>();\n\n        let filteredBufferPromise: null | Promise<null | TNativeAudioBuffer> = null;\n\n        const createAudioNode = async (proxy: IIIRFilterNode<T>, nativeOfflineAudioContext: TNativeOfflineAudioContext) => {\n            let nativeAudioBufferSourceNode: null | TNativeAudioBufferSourceNode = null;\n            let nativeIIRFilterNode = getNativeAudioNode<T, TNativeIIRFilterNode>(proxy);\n\n            // If the initially used nativeIIRFilterNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeIIRFilterNodeIsOwnedByContext = isOwnedByContext(nativeIIRFilterNode, nativeOfflineAudioContext);\n\n            // Bug #9: Safari does not support IIRFilterNodes.\n            if (nativeOfflineAudioContext.createIIRFilter === undefined) {\n                nativeAudioBufferSourceNode = createNativeAudioBufferSourceNode(nativeOfflineAudioContext, {\n                    buffer: null,\n                    channelCount: 2,\n                    channelCountMode: 'max',\n                    channelInterpretation: 'speakers',\n                    loop: false,\n                    loopEnd: 0,\n                    loopStart: 0,\n                    playbackRate: 1\n                });\n            } else if (!nativeIIRFilterNodeIsOwnedByContext) {\n                // @todo TypeScript defines the parameters of createIIRFilter() as arrays of numbers.\n                nativeIIRFilterNode = nativeOfflineAudioContext.createIIRFilter(<number[]>feedforward, <number[]>feedback);\n            }\n\n            renderedNativeAudioNodes.set(\n                nativeOfflineAudioContext,\n                nativeAudioBufferSourceNode === null ? nativeIIRFilterNode : nativeAudioBufferSourceNode\n            );\n\n            if (nativeAudioBufferSourceNode !== null) {\n                if (filteredBufferPromise === null) {\n                    if (nativeOfflineAudioContextConstructor === null) {\n                        throw new Error('Missing the native OfflineAudioContext constructor.');\n                    }\n\n                    const partialOfflineAudioContext = new nativeOfflineAudioContextConstructor(\n                        // Bug #47: The AudioDestinationNode in Safari gets not initialized correctly.\n                        proxy.context.destination.channelCount,\n                        // Bug #17: Safari does not yet expose the length.\n                        proxy.context.length,\n                        nativeOfflineAudioContext.sampleRate\n                    );\n\n                    filteredBufferPromise = (async () => {\n                        await renderInputsOfAudioNode(proxy, partialOfflineAudioContext, partialOfflineAudioContext.destination);\n\n                        const renderedBuffer = await renderNativeOfflineAudioContext(partialOfflineAudioContext);\n\n                        return filterFullBuffer(renderedBuffer, nativeOfflineAudioContext, feedback, feedforward);\n                    })();\n                }\n\n                const filteredBuffer = await filteredBufferPromise;\n\n                nativeAudioBufferSourceNode.buffer = filteredBuffer;\n                nativeAudioBufferSourceNode.start(0);\n\n                return nativeAudioBufferSourceNode;\n            }\n\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeIIRFilterNode);\n\n            return nativeIIRFilterNode;\n        };\n\n        return {\n            render(\n                proxy: IIIRFilterNode<T>,\n                nativeOfflineAudioContext: TNativeOfflineAudioContext\n            ): Promise<TNativeAudioBufferSourceNode | TNativeIIRFilterNode> {\n                const renderedNativeAudioNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);\n\n                if (renderedNativeAudioNode !== undefined) {\n                    return Promise.resolve(renderedNativeAudioNode);\n                }\n\n                return createAudioNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n"]},"metadata":{},"sourceType":"module"}