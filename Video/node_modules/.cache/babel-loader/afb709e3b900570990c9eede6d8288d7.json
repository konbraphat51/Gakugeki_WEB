{"ast":null,"code":"export var createCacheTestResult = function createCacheTestResult(ongoingTests, testResults) {\n  return function (tester, test) {\n    var cachedTestResult = testResults.get(tester);\n\n    if (cachedTestResult !== undefined) {\n      return cachedTestResult;\n    }\n\n    var ongoingTest = ongoingTests.get(tester);\n\n    if (ongoingTest !== undefined) {\n      return ongoingTest;\n    }\n\n    try {\n      var synchronousTestResult = test();\n\n      if (synchronousTestResult instanceof Promise) {\n        ongoingTests.set(tester, synchronousTestResult);\n        return synchronousTestResult.catch(function () {\n          return false;\n        }).then(function (finalTestResult) {\n          ongoingTests.delete(tester);\n          testResults.set(tester, finalTestResult);\n          return finalTestResult;\n        });\n      }\n\n      testResults.set(tester, synchronousTestResult);\n      return synchronousTestResult;\n    } catch (_unused) {\n      testResults.set(tester, false);\n      return false;\n    }\n  };\n};","map":{"version":3,"mappings":"AAEA,OAAO,IAAMA,qBAAqB,GAA4B,SAAjDA,qBAAiD,CAACC,YAAD,EAAeC,WAAf,EAA8B;EACxF,OAAO,UAACC,MAAD,EAASC,IAAT,EAAiB;IACpB,IAAMC,gBAAgB,GAAGH,WAAW,CAACI,GAAZ,CAAgBH,MAAhB,CAAzB;;IAEA,IAAIE,gBAAgB,KAAKE,SAAzB,EAAoC;MAChC,OAAOF,gBAAP;IACH;;IAED,IAAMG,WAAW,GAAGP,YAAY,CAACK,GAAb,CAAiBH,MAAjB,CAApB;;IAEA,IAAIK,WAAW,KAAKD,SAApB,EAA+B;MAC3B,OAAOC,WAAP;IACH;;IAED,IAAI;MACA,IAAMC,qBAAqB,GAAGL,IAAI,EAAlC;;MAEA,IAAIK,qBAAqB,YAAYC,OAArC,EAA8C;QAC1CT,YAAY,CAACU,GAAb,CAAiBR,MAAjB,EAAyBM,qBAAzB;QAEA,OAAOA,qBAAqB,CACvBG,KADE,CACI;UAAA,OAAM,KAAN;QAAA,CADJ,EAEFC,IAFE,CAEG,UAACC,eAAD,EAAoB;UACtBb,YAAY,CAACc,MAAb,CAAoBZ,MAApB;UACAD,WAAW,CAACS,GAAZ,CAAgBR,MAAhB,EAAwBW,eAAxB;UAEA,OAAOA,eAAP;QACH,CAPE,CAAP;MAQH;;MAEDZ,WAAW,CAACS,GAAZ,CAAgBR,MAAhB,EAAwBM,qBAAxB;MAEA,OAAOA,qBAAP;IACH,CAnBD,CAmBE,gBAAM;MACJP,WAAW,CAACS,GAAZ,CAAgBR,MAAhB,EAAwB,KAAxB;MAEA,OAAO,KAAP;IACH;EACJ,CArCD;AAsCH,CAvCM","names":["createCacheTestResult","ongoingTests","testResults","tester","test","cachedTestResult","get","undefined","ongoingTest","synchronousTestResult","Promise","set","catch","then","finalTestResult","delete"],"sources":["C:\\Users\\brigh\\storage\\js_project\\Gakugeki_WEB\\node_modules\\standardized-audio-context\\src\\factories\\cache-test-result.ts"],"sourcesContent":["import { TCacheTestResultFactory } from '../types';\n\nexport const createCacheTestResult: TCacheTestResultFactory = (ongoingTests, testResults) => {\n    return (tester, test) => {\n        const cachedTestResult = testResults.get(tester);\n\n        if (cachedTestResult !== undefined) {\n            return cachedTestResult;\n        }\n\n        const ongoingTest = ongoingTests.get(tester);\n\n        if (ongoingTest !== undefined) {\n            return ongoingTest;\n        }\n\n        try {\n            const synchronousTestResult = test();\n\n            if (synchronousTestResult instanceof Promise) {\n                ongoingTests.set(tester, synchronousTestResult);\n\n                return synchronousTestResult\n                    .catch(() => false)\n                    .then((finalTestResult) => {\n                        ongoingTests.delete(tester);\n                        testResults.set(tester, finalTestResult);\n\n                        return finalTestResult;\n                    });\n            }\n\n            testResults.set(tester, synchronousTestResult);\n\n            return synchronousTestResult;\n        } catch {\n            testResults.set(tester, false);\n\n            return false;\n        }\n    };\n};\n"]},"metadata":{},"sourceType":"module"}