{"ast":null,"code":"export var testClonabilityOfAudioWorkletNodeOptions = function testClonabilityOfAudioWorkletNodeOptions(audioWorkletNodeOptions) {\n  var _MessageChannel = new MessageChannel(),\n      port1 = _MessageChannel.port1;\n\n  try {\n    // This will throw an error if the audioWorkletNodeOptions are not clonable.\n    port1.postMessage(audioWorkletNodeOptions);\n  } finally {\n    port1.close();\n  }\n};","map":{"version":3,"mappings":"AAEA,OAAO,IAAMA,wCAAwC,GAAG,SAA3CA,wCAA2C,CAACC,uBAAD,EAA4D;EAChH,sBAAkB,IAAIC,cAAJ,EAAlB;EAAA,IAAQC,KAAR,mBAAQA,KAAR;;EAEA,IAAI;IACA;IACAA,KAAK,CAACC,WAAN,CAAkBH,uBAAlB;EACH,CAHD,SAGU;IACNE,KAAK,CAACE,KAAN;EACH;AACJ,CATM","names":["testClonabilityOfAudioWorkletNodeOptions","audioWorkletNodeOptions","MessageChannel","port1","postMessage","close"],"sources":["C:\\Users\\brigh\\storage\\js_project\\Gakugeki_WEB\\node_modules\\standardized-audio-context\\src\\helpers\\test-clonability-of-audio-worklet-node-options.ts"],"sourcesContent":["import { IAudioWorkletNodeOptions } from '../interfaces';\n\nexport const testClonabilityOfAudioWorkletNodeOptions = (audioWorkletNodeOptions: IAudioWorkletNodeOptions): void => {\n    const { port1 } = new MessageChannel();\n\n    try {\n        // This will throw an error if the audioWorkletNodeOptions are not clonable.\n        port1.postMessage(audioWorkletNodeOptions);\n    } finally {\n        port1.close();\n    }\n};\n"]},"metadata":{},"sourceType":"module"}