{"ast":null,"code":"import _objectSpread from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nvar DEFAULT_OPTIONS = {\n  Q: 1,\n  channelCount: 2,\n  channelCountMode: 'max',\n  channelInterpretation: 'speakers',\n  detune: 0,\n  frequency: 350,\n  gain: 0,\n  type: 'lowpass'\n};\nexport var createBiquadFilterNodeConstructor = function createBiquadFilterNodeConstructor(audioNodeConstructor, createAudioParam, createBiquadFilterNodeRenderer, createInvalidAccessError, createNativeBiquadFilterNode, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime) {\n  return /*#__PURE__*/function (_audioNodeConstructor) {\n    _inherits(BiquadFilterNode, _audioNodeConstructor);\n\n    var _super = _createSuper(BiquadFilterNode);\n\n    function BiquadFilterNode(context, options) {\n      var _this;\n\n      _classCallCheck(this, BiquadFilterNode);\n\n      var nativeContext = getNativeContext(context);\n\n      var mergedOptions = _objectSpread(_objectSpread({}, DEFAULT_OPTIONS), options);\n\n      var nativeBiquadFilterNode = createNativeBiquadFilterNode(nativeContext, mergedOptions);\n      var isOffline = isNativeOfflineAudioContext(nativeContext);\n      var biquadFilterNodeRenderer = isOffline ? createBiquadFilterNodeRenderer() : null;\n      _this = _super.call(this, context, false, nativeBiquadFilterNode, biquadFilterNodeRenderer); // Bug #80: Safari does not export the correct values for maxValue and minValue.\n\n      _this._Q = createAudioParam(_assertThisInitialized(_this), isOffline, nativeBiquadFilterNode.Q, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT); // Bug #78: Firefox & Safari do not export the correct values for maxValue and minValue.\n\n      _this._detune = createAudioParam(_assertThisInitialized(_this), isOffline, nativeBiquadFilterNode.detune, 1200 * Math.log2(MOST_POSITIVE_SINGLE_FLOAT), -1200 * Math.log2(MOST_POSITIVE_SINGLE_FLOAT)); // Bug #77: Firefox & Safari do not export the correct value for minValue.\n\n      _this._frequency = createAudioParam(_assertThisInitialized(_this), isOffline, nativeBiquadFilterNode.frequency, context.sampleRate / 2, 0); // Bug #79: Firefox & Safari do not export the correct values for maxValue and minValue.\n\n      _this._gain = createAudioParam(_assertThisInitialized(_this), isOffline, nativeBiquadFilterNode.gain, 40 * Math.log10(MOST_POSITIVE_SINGLE_FLOAT), MOST_NEGATIVE_SINGLE_FLOAT);\n      _this._nativeBiquadFilterNode = nativeBiquadFilterNode; // @todo Determine a meaningful tail-time instead of just using one second.\n\n      setAudioNodeTailTime(_assertThisInitialized(_this), 1);\n      return _this;\n    }\n\n    _createClass(BiquadFilterNode, [{\n      key: \"detune\",\n      get: function get() {\n        return this._detune;\n      }\n    }, {\n      key: \"frequency\",\n      get: function get() {\n        return this._frequency;\n      }\n    }, {\n      key: \"gain\",\n      get: function get() {\n        return this._gain;\n      }\n    }, {\n      key: \"Q\",\n      get: function get() {\n        return this._Q;\n      }\n    }, {\n      key: \"type\",\n      get: function get() {\n        return this._nativeBiquadFilterNode.type;\n      },\n      set: function set(value) {\n        this._nativeBiquadFilterNode.type = value;\n      }\n    }, {\n      key: \"getFrequencyResponse\",\n      value: function getFrequencyResponse(frequencyHz, magResponse, phaseResponse) {\n        // Bug #189: Safari does throw an InvalidStateError.\n        try {\n          this._nativeBiquadFilterNode.getFrequencyResponse(frequencyHz, magResponse, phaseResponse);\n        } catch (err) {\n          if (err.code === 11) {\n            throw createInvalidAccessError();\n          }\n\n          throw err;\n        } // Bug #68: Safari does not throw an error if the parameters differ in their length.\n\n\n        if (frequencyHz.length !== magResponse.length || magResponse.length !== phaseResponse.length) {\n          throw createInvalidAccessError();\n        }\n      }\n    }]);\n\n    return BiquadFilterNode;\n  }(audioNodeConstructor);\n};","map":{"version":3,"mappings":"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","names":["MOST_NEGATIVE_SINGLE_FLOAT","MOST_POSITIVE_SINGLE_FLOAT","DEFAULT_OPTIONS","Q","channelCount","channelCountMode","channelInterpretation","detune","frequency","gain","type","createBiquadFilterNodeConstructor","audioNodeConstructor","createAudioParam","createBiquadFilterNodeRenderer","createInvalidAccessError","createNativeBiquadFilterNode","getNativeContext","isNativeOfflineAudioContext","setAudioNodeTailTime","context","options","nativeContext","mergedOptions","nativeBiquadFilterNode","isOffline","biquadFilterNodeRenderer","_Q","_detune","Math","log2","_frequency","sampleRate","_gain","log10","_nativeBiquadFilterNode","value","frequencyHz","magResponse","phaseResponse","getFrequencyResponse","err","code","length"],"sources":["C:\\Users\\brigh\\storage\\js_project\\Gakugeki_WEB\\node_modules\\standardized-audio-context\\src\\factories\\biquad-filter-node-constructor.ts"],"sourcesContent":["import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nimport { IAudioParam, IBiquadFilterNode, IBiquadFilterOptions } from '../interfaces';\nimport { TAudioNodeRenderer, TBiquadFilterNodeConstructorFactory, TBiquadFilterType, TContext, TNativeBiquadFilterNode } from '../types';\n\nconst DEFAULT_OPTIONS = {\n    Q: 1,\n    channelCount: 2,\n    channelCountMode: 'max',\n    channelInterpretation: 'speakers',\n    detune: 0,\n    frequency: 350,\n    gain: 0,\n    type: 'lowpass'\n} as const;\n\nexport const createBiquadFilterNodeConstructor: TBiquadFilterNodeConstructorFactory = (\n    audioNodeConstructor,\n    createAudioParam,\n    createBiquadFilterNodeRenderer,\n    createInvalidAccessError,\n    createNativeBiquadFilterNode,\n    getNativeContext,\n    isNativeOfflineAudioContext,\n    setAudioNodeTailTime\n) => {\n    return class BiquadFilterNode<T extends TContext> extends audioNodeConstructor<T> implements IBiquadFilterNode<T> {\n        private _detune: IAudioParam;\n\n        private _frequency: IAudioParam;\n\n        private _gain: IAudioParam;\n\n        private _nativeBiquadFilterNode: TNativeBiquadFilterNode;\n\n        private _Q: IAudioParam;\n\n        constructor(context: T, options?: Partial<IBiquadFilterOptions>) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeBiquadFilterNode = createNativeBiquadFilterNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const biquadFilterNodeRenderer = <TAudioNodeRenderer<T, this>>(isOffline ? createBiquadFilterNodeRenderer() : null);\n\n            super(context, false, nativeBiquadFilterNode, biquadFilterNodeRenderer);\n\n            // Bug #80: Safari does not export the correct values for maxValue and minValue.\n            this._Q = createAudioParam(this, isOffline, nativeBiquadFilterNode.Q, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n            // Bug #78: Firefox & Safari do not export the correct values for maxValue and minValue.\n            this._detune = createAudioParam(\n                this,\n                isOffline,\n                nativeBiquadFilterNode.detune,\n                1200 * Math.log2(MOST_POSITIVE_SINGLE_FLOAT),\n                -1200 * Math.log2(MOST_POSITIVE_SINGLE_FLOAT)\n            );\n            // Bug #77: Firefox & Safari do not export the correct value for minValue.\n            this._frequency = createAudioParam(this, isOffline, nativeBiquadFilterNode.frequency, context.sampleRate / 2, 0);\n            // Bug #79: Firefox & Safari do not export the correct values for maxValue and minValue.\n            this._gain = createAudioParam(\n                this,\n                isOffline,\n                nativeBiquadFilterNode.gain,\n                40 * Math.log10(MOST_POSITIVE_SINGLE_FLOAT),\n                MOST_NEGATIVE_SINGLE_FLOAT\n            );\n            this._nativeBiquadFilterNode = nativeBiquadFilterNode;\n\n            // @todo Determine a meaningful tail-time instead of just using one second.\n            setAudioNodeTailTime(this, 1);\n        }\n\n        get detune(): IAudioParam {\n            return this._detune;\n        }\n\n        get frequency(): IAudioParam {\n            return this._frequency;\n        }\n\n        get gain(): IAudioParam {\n            return this._gain;\n        }\n\n        get Q(): IAudioParam {\n            return this._Q;\n        }\n\n        get type(): TBiquadFilterType {\n            return this._nativeBiquadFilterNode.type;\n        }\n\n        set type(value) {\n            this._nativeBiquadFilterNode.type = value;\n        }\n\n        public getFrequencyResponse(frequencyHz: Float32Array, magResponse: Float32Array, phaseResponse: Float32Array): void {\n            // Bug #189: Safari does throw an InvalidStateError.\n            try {\n                this._nativeBiquadFilterNode.getFrequencyResponse(frequencyHz, magResponse, phaseResponse);\n            } catch (err) {\n                if (err.code === 11) {\n                    throw createInvalidAccessError();\n                }\n\n                throw err;\n            }\n\n            // Bug #68: Safari does not throw an error if the parameters differ in their length.\n            if (frequencyHz.length !== magResponse.length || magResponse.length !== phaseResponse.length) {\n                throw createInvalidAccessError();\n            }\n        }\n    };\n};\n"]},"metadata":{},"sourceType":"module"}