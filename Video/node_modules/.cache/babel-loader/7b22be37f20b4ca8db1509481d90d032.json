{"ast":null,"code":"import _classCallCheck from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { CONTEXT_STORE } from '../globals';\nexport var createMinimalBaseAudioContextConstructor = function createMinimalBaseAudioContextConstructor(audioDestinationNodeConstructor, createAudioListener, eventTargetConstructor, isNativeOfflineAudioContext, unrenderedAudioWorkletNodeStore, wrapEventListener) {\n  return /*#__PURE__*/function (_eventTargetConstruct) {\n    _inherits(MinimalBaseAudioContext, _eventTargetConstruct);\n\n    var _super = _createSuper(MinimalBaseAudioContext);\n\n    function MinimalBaseAudioContext(_nativeContext, numberOfChannels) {\n      var _this;\n\n      _classCallCheck(this, MinimalBaseAudioContext);\n\n      _this = _super.call(this, _nativeContext);\n      _this._nativeContext = _nativeContext;\n      CONTEXT_STORE.set(_assertThisInitialized(_this), _nativeContext);\n\n      if (isNativeOfflineAudioContext(_nativeContext)) {\n        unrenderedAudioWorkletNodeStore.set(_nativeContext, new Set());\n      }\n\n      _this._destination = new audioDestinationNodeConstructor(_assertThisInitialized(_this), numberOfChannels);\n      _this._listener = createAudioListener(_assertThisInitialized(_this), _nativeContext);\n      _this._onstatechange = null;\n      return _this;\n    }\n\n    _createClass(MinimalBaseAudioContext, [{\n      key: \"currentTime\",\n      get: function get() {\n        return this._nativeContext.currentTime;\n      }\n    }, {\n      key: \"destination\",\n      get: function get() {\n        return this._destination;\n      }\n    }, {\n      key: \"listener\",\n      get: function get() {\n        return this._listener;\n      }\n    }, {\n      key: \"onstatechange\",\n      get: function get() {\n        return this._onstatechange;\n      },\n      set: function set(value) {\n        var wrappedListener = typeof value === 'function' ? wrapEventListener(this, value) : null;\n        this._nativeContext.onstatechange = wrappedListener;\n        var nativeOnStateChange = this._nativeContext.onstatechange;\n        this._onstatechange = nativeOnStateChange !== null && nativeOnStateChange === wrappedListener ? value : nativeOnStateChange;\n      }\n    }, {\n      key: \"sampleRate\",\n      get: function get() {\n        return this._nativeContext.sampleRate;\n      }\n    }, {\n      key: \"state\",\n      get: function get() {\n        return this._nativeContext.state;\n      }\n    }]);\n\n    return MinimalBaseAudioContext;\n  }(eventTargetConstructor);\n};","map":{"version":3,"mappings":";;;;;AAAA,SAASA,aAAT,QAA8B,YAA9B;AAIA,OAAO,IAAMC,wCAAwC,GAA+C,SAAvFA,wCAAuF,CAChGC,+BADgG,EAEhGC,mBAFgG,EAGhGC,sBAHgG,EAIhGC,2BAJgG,EAKhGC,+BALgG,EAMhGC,iBANgG,EAOhG;EACA;IAAA;;IAAA;;IAUI,iCAAoBC,cAApB,EAAoDC,gBAApD,EAA4E;MAAA;;MAAA;;MACxE,0BAAMD,cAAN;MADgB;MAGhBR,aAAa,CAACU,GAAd,gCAAsCF,cAAtC;;MAEA,IAAIH,2BAA2B,CAACG,cAAD,CAA/B,EAAiD;QAC7CF,+BAA+B,CAACI,GAAhC,CAAoCF,cAApC,EAAoD,IAAIG,GAAJ,EAApD;MACH;;MAED,MAAKC,YAAL,GAAoB,IAAIV,+BAAJ,gCAAwDO,gBAAxD,CAApB;MACA,MAAKI,SAAL,GAAiBV,mBAAmB,gCAAqBK,cAArB,CAApC;MACA,MAAKM,cAAL,GAAsB,IAAtB;MAXwE;IAY3E;;IAtBL;MAAA;MAAA,KAwBI,eAAe;QACX,OAAO,KAAKN,cAAL,CAAoBO,WAA3B;MACH;IA1BL;MAAA;MAAA,KA4BI,eAAe;QACX,OAAO,KAAKH,YAAZ;MACH;IA9BL;MAAA;MAAA,KAgCI,eAAY;QACR,OAAO,KAAKC,SAAZ;MACH;IAlCL;MAAA;MAAA,KAoCI,eAAiB;QACb,OAAO,KAAKC,cAAZ;MACH,CAtCL;MAAA,KAwCI,aAAkBE,KAAlB,EAAuB;QACnB,IAAMC,eAAe,GAAG,OAAOD,KAAP,KAAiB,UAAjB,GAA8BT,iBAAiB,CAAC,IAAD,EAAOS,KAAP,CAA/C,GAA+D,IAAvF;QAEA,KAAKR,cAAL,CAAoBU,aAApB,GAAoCD,eAApC;QAEA,IAAME,mBAAmB,GAAG,KAAKX,cAAL,CAAoBU,aAAhD;QAEA,KAAKJ,cAAL,GAAsBK,mBAAmB,KAAK,IAAxB,IAAgCA,mBAAmB,KAAKF,eAAxD,GAA0ED,KAA1E,GAAkFG,mBAAxG;MACH;IAhDL;MAAA;MAAA,KAkDI,eAAc;QACV,OAAO,KAAKX,cAAL,CAAoBY,UAA3B;MACH;IApDL;MAAA;MAAA,KAsDI,eAAS;QACL,OAAO,KAAKZ,cAAL,CAAoBa,KAA3B;MACH;IAxDL;;IAAA;EAAA,EACYjB,sBADZ;AA0DH,CAlEM","names":["CONTEXT_STORE","createMinimalBaseAudioContextConstructor","audioDestinationNodeConstructor","createAudioListener","eventTargetConstructor","isNativeOfflineAudioContext","unrenderedAudioWorkletNodeStore","wrapEventListener","_nativeContext","numberOfChannels","set","Set","_destination","_listener","_onstatechange","currentTime","value","wrappedListener","onstatechange","nativeOnStateChange","sampleRate","state"],"sources":["C:\\Users\\brigh\\storage\\js_project\\Gakugeki_WEB\\node_modules\\standardized-audio-context\\src\\factories\\minimal-base-audio-context-constructor.ts"],"sourcesContent":["import { CONTEXT_STORE } from '../globals';\nimport { IAudioDestinationNode, IAudioListener, IMinimalBaseAudioContext, IMinimalBaseAudioContextEventMap } from '../interfaces';\nimport { TAudioContextState, TContext, TEventHandler, TMinimalBaseAudioContextConstructorFactory, TNativeContext } from '../types';\n\nexport const createMinimalBaseAudioContextConstructor: TMinimalBaseAudioContextConstructorFactory = (\n    audioDestinationNodeConstructor,\n    createAudioListener,\n    eventTargetConstructor,\n    isNativeOfflineAudioContext,\n    unrenderedAudioWorkletNodeStore,\n    wrapEventListener\n) => {\n    return class MinimalBaseAudioContext<T extends TContext>\n        extends eventTargetConstructor<IMinimalBaseAudioContextEventMap>\n        implements IMinimalBaseAudioContext<T>\n    {\n        private _destination: IAudioDestinationNode<T>;\n\n        private _listener: IAudioListener;\n\n        private _onstatechange: null | TEventHandler<T>;\n\n        constructor(private _nativeContext: TNativeContext, numberOfChannels: number) {\n            super(_nativeContext);\n\n            CONTEXT_STORE.set(<T>(<unknown>this), _nativeContext);\n\n            if (isNativeOfflineAudioContext(_nativeContext)) {\n                unrenderedAudioWorkletNodeStore.set(_nativeContext, new Set());\n            }\n\n            this._destination = new audioDestinationNodeConstructor(<T>(<unknown>this), numberOfChannels);\n            this._listener = createAudioListener(<T>(<unknown>this), _nativeContext);\n            this._onstatechange = null;\n        }\n\n        get currentTime(): number {\n            return this._nativeContext.currentTime;\n        }\n\n        get destination(): IAudioDestinationNode<T> {\n            return this._destination;\n        }\n\n        get listener(): IAudioListener {\n            return this._listener;\n        }\n\n        get onstatechange(): null | TEventHandler<T> {\n            return this._onstatechange;\n        }\n\n        set onstatechange(value) {\n            const wrappedListener = typeof value === 'function' ? wrapEventListener(this, value) : null;\n\n            this._nativeContext.onstatechange = wrappedListener;\n\n            const nativeOnStateChange = this._nativeContext.onstatechange;\n\n            this._onstatechange = nativeOnStateChange !== null && nativeOnStateChange === wrappedListener ? value : nativeOnStateChange;\n        }\n\n        get sampleRate(): number {\n            return this._nativeContext.sampleRate;\n        }\n\n        get state(): TAudioContextState {\n            return this._nativeContext.state;\n        }\n    };\n};\n"]},"metadata":{},"sourceType":"module"}