{"ast":null,"code":"import _objectSpread from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nvar DEFAULT_OPTIONS = {\n  channelCount: 2,\n  channelCountMode: 'max',\n  channelInterpretation: 'speakers',\n  fftSize: 2048,\n  maxDecibels: -30,\n  minDecibels: -100,\n  smoothingTimeConstant: 0.8\n};\nexport var createAnalyserNodeConstructor = function createAnalyserNodeConstructor(audionNodeConstructor, createAnalyserNodeRenderer, createIndexSizeError, createNativeAnalyserNode, getNativeContext, isNativeOfflineAudioContext) {\n  return /*#__PURE__*/function (_audionNodeConstructo) {\n    _inherits(AnalyserNode, _audionNodeConstructo);\n\n    var _super = _createSuper(AnalyserNode);\n\n    function AnalyserNode(context, options) {\n      var _this;\n\n      _classCallCheck(this, AnalyserNode);\n\n      var nativeContext = getNativeContext(context);\n\n      var mergedOptions = _objectSpread(_objectSpread({}, DEFAULT_OPTIONS), options);\n\n      var nativeAnalyserNode = createNativeAnalyserNode(nativeContext, mergedOptions);\n      var analyserNodeRenderer = isNativeOfflineAudioContext(nativeContext) ? createAnalyserNodeRenderer() : null;\n      _this = _super.call(this, context, false, nativeAnalyserNode, analyserNodeRenderer);\n      _this._nativeAnalyserNode = nativeAnalyserNode;\n      return _this;\n    }\n\n    _createClass(AnalyserNode, [{\n      key: \"fftSize\",\n      get: function get() {\n        return this._nativeAnalyserNode.fftSize;\n      },\n      set: function set(value) {\n        this._nativeAnalyserNode.fftSize = value;\n      }\n    }, {\n      key: \"frequencyBinCount\",\n      get: function get() {\n        return this._nativeAnalyserNode.frequencyBinCount;\n      }\n    }, {\n      key: \"maxDecibels\",\n      get: function get() {\n        return this._nativeAnalyserNode.maxDecibels;\n      },\n      set: function set(value) {\n        // Bug #118: Safari does not throw an error if maxDecibels is not more than minDecibels.\n        var maxDecibels = this._nativeAnalyserNode.maxDecibels;\n        this._nativeAnalyserNode.maxDecibels = value;\n\n        if (!(value > this._nativeAnalyserNode.minDecibels)) {\n          this._nativeAnalyserNode.maxDecibels = maxDecibels;\n          throw createIndexSizeError();\n        }\n      }\n    }, {\n      key: \"minDecibels\",\n      get: function get() {\n        return this._nativeAnalyserNode.minDecibels;\n      },\n      set: function set(value) {\n        // Bug #118: Safari does not throw an error if maxDecibels is not more than minDecibels.\n        var minDecibels = this._nativeAnalyserNode.minDecibels;\n        this._nativeAnalyserNode.minDecibels = value;\n\n        if (!(this._nativeAnalyserNode.maxDecibels > value)) {\n          this._nativeAnalyserNode.minDecibels = minDecibels;\n          throw createIndexSizeError();\n        }\n      }\n    }, {\n      key: \"smoothingTimeConstant\",\n      get: function get() {\n        return this._nativeAnalyserNode.smoothingTimeConstant;\n      },\n      set: function set(value) {\n        this._nativeAnalyserNode.smoothingTimeConstant = value;\n      }\n    }, {\n      key: \"getByteFrequencyData\",\n      value: function getByteFrequencyData(array) {\n        this._nativeAnalyserNode.getByteFrequencyData(array);\n      }\n    }, {\n      key: \"getByteTimeDomainData\",\n      value: function getByteTimeDomainData(array) {\n        this._nativeAnalyserNode.getByteTimeDomainData(array);\n      }\n    }, {\n      key: \"getFloatFrequencyData\",\n      value: function getFloatFrequencyData(array) {\n        this._nativeAnalyserNode.getFloatFrequencyData(array);\n      }\n    }, {\n      key: \"getFloatTimeDomainData\",\n      value: function getFloatTimeDomainData(array) {\n        this._nativeAnalyserNode.getFloatTimeDomainData(array);\n      }\n    }]);\n\n    return AnalyserNode;\n  }(audionNodeConstructor);\n};","map":{"version":3,"mappings":"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","names":["DEFAULT_OPTIONS","channelCount","channelCountMode","channelInterpretation","fftSize","maxDecibels","minDecibels","smoothingTimeConstant","createAnalyserNodeConstructor","audionNodeConstructor","createAnalyserNodeRenderer","createIndexSizeError","createNativeAnalyserNode","getNativeContext","isNativeOfflineAudioContext","context","options","nativeContext","mergedOptions","nativeAnalyserNode","analyserNodeRenderer","_nativeAnalyserNode","value","frequencyBinCount","array","getByteFrequencyData","getByteTimeDomainData","getFloatFrequencyData","getFloatTimeDomainData"],"sources":["C:\\Users\\brigh\\storage\\js_project\\Gakugeki_WEB\\node_modules\\standardized-audio-context\\src\\factories\\analyser-node-constructor.ts"],"sourcesContent":["import { IAnalyserNode, IAnalyserOptions } from '../interfaces';\nimport { TAnalyserNodeConstructorFactory, TAudioNodeRenderer, TContext, TNativeAnalyserNode } from '../types';\n\nconst DEFAULT_OPTIONS = {\n    channelCount: 2,\n    channelCountMode: 'max',\n    channelInterpretation: 'speakers',\n    fftSize: 2048,\n    maxDecibels: -30,\n    minDecibels: -100,\n    smoothingTimeConstant: 0.8\n} as const;\n\nexport const createAnalyserNodeConstructor: TAnalyserNodeConstructorFactory = (\n    audionNodeConstructor,\n    createAnalyserNodeRenderer,\n    createIndexSizeError,\n    createNativeAnalyserNode,\n    getNativeContext,\n    isNativeOfflineAudioContext\n) => {\n    return class AnalyserNode<T extends TContext> extends audionNodeConstructor<T> implements IAnalyserNode<T> {\n        private _nativeAnalyserNode: TNativeAnalyserNode;\n\n        constructor(context: T, options?: Partial<IAnalyserOptions>) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeAnalyserNode = createNativeAnalyserNode(nativeContext, mergedOptions);\n            const analyserNodeRenderer = <TAudioNodeRenderer<T, this>>(\n                (isNativeOfflineAudioContext(nativeContext) ? createAnalyserNodeRenderer() : null)\n            );\n\n            super(context, false, nativeAnalyserNode, analyserNodeRenderer);\n\n            this._nativeAnalyserNode = nativeAnalyserNode;\n        }\n\n        get fftSize(): number {\n            return this._nativeAnalyserNode.fftSize;\n        }\n\n        set fftSize(value) {\n            this._nativeAnalyserNode.fftSize = value;\n        }\n\n        get frequencyBinCount(): number {\n            return this._nativeAnalyserNode.frequencyBinCount;\n        }\n\n        get maxDecibels(): number {\n            return this._nativeAnalyserNode.maxDecibels;\n        }\n\n        set maxDecibels(value) {\n            // Bug #118: Safari does not throw an error if maxDecibels is not more than minDecibels.\n            const maxDecibels = this._nativeAnalyserNode.maxDecibels;\n\n            this._nativeAnalyserNode.maxDecibels = value;\n\n            if (!(value > this._nativeAnalyserNode.minDecibels)) {\n                this._nativeAnalyserNode.maxDecibels = maxDecibels;\n\n                throw createIndexSizeError();\n            }\n        }\n\n        get minDecibels(): number {\n            return this._nativeAnalyserNode.minDecibels;\n        }\n\n        set minDecibels(value) {\n            // Bug #118: Safari does not throw an error if maxDecibels is not more than minDecibels.\n            const minDecibels = this._nativeAnalyserNode.minDecibels;\n\n            this._nativeAnalyserNode.minDecibels = value;\n\n            if (!(this._nativeAnalyserNode.maxDecibels > value)) {\n                this._nativeAnalyserNode.minDecibels = minDecibels;\n\n                throw createIndexSizeError();\n            }\n        }\n\n        get smoothingTimeConstant(): number {\n            return this._nativeAnalyserNode.smoothingTimeConstant;\n        }\n\n        set smoothingTimeConstant(value) {\n            this._nativeAnalyserNode.smoothingTimeConstant = value;\n        }\n\n        public getByteFrequencyData(array: Uint8Array): void {\n            this._nativeAnalyserNode.getByteFrequencyData(array);\n        }\n\n        public getByteTimeDomainData(array: Uint8Array): void {\n            this._nativeAnalyserNode.getByteTimeDomainData(array);\n        }\n\n        public getFloatFrequencyData(array: Float32Array): void {\n            this._nativeAnalyserNode.getFloatFrequencyData(array);\n        }\n\n        public getFloatTimeDomainData(array: Float32Array): void {\n            this._nativeAnalyserNode.getFloatTimeDomainData(array);\n        }\n    };\n};\n"]},"metadata":{},"sourceType":"module"}