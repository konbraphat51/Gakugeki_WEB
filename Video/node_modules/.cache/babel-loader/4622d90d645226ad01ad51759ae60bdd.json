{"ast":null,"code":"export var createMetrics = function createMetrics(emitNotSupportedError, window, wrapSubscribeFunction) {\n  return function (options) {\n    return wrapSubscribeFunction(function (observer) {\n      if (window === null || window.PerformanceObserver === undefined) {\n        return emitNotSupportedError(observer);\n      }\n\n      var performanceObserver = new window.PerformanceObserver(function (entryList) {\n        return observer.next(entryList.getEntries());\n      });\n\n      try {\n        performanceObserver.observe(options);\n      } catch (err) {\n        observer.error(err);\n      }\n\n      return function () {\n        return performanceObserver.disconnect();\n      };\n    });\n  };\n};","map":{"version":3,"mappings":"AAEA,OAAO,IAAMA,aAAa,GAAoB,SAAjCA,aAAiC,CAACC,qBAAD,EAAwBC,MAAxB,EAAgCC,qBAAhC,EAAyD;EACnG,OAAO,UAACC,OAAD;IAAA,OACHD,qBAAqB,CAAC,UAACE,QAAD,EAAa;MAC/B,IAAIH,MAAM,KAAK,IAAX,IAAmBA,MAAM,CAACI,mBAAP,KAA+BC,SAAtD,EAAiE;QAC7D,OAAON,qBAAqB,CAACI,QAAD,CAA5B;MACH;;MAED,IAAMG,mBAAmB,GAAG,IAAIN,MAAM,CAACI,mBAAX,CAA+B,UAACG,SAAD;QAAA,OAAeJ,QAAQ,CAACK,IAAT,CAAcD,SAAS,CAACE,UAAV,EAAd,CAAf;MAAA,CAA/B,CAA5B;;MAEA,IAAI;QACAH,mBAAmB,CAACI,OAApB,CAA4BR,OAA5B;MACH,CAFD,CAEE,OAAOS,GAAP,EAAY;QACVR,QAAQ,CAACS,KAAT,CAAeD,GAAf;MACH;;MAED,OAAO;QAAA,OAAML,mBAAmB,CAACO,UAApB,EAAN;MAAA,CAAP;IACH,CAdoB,CADlB;EAAA,CAAP;AAgBH,CAjBM","names":["createMetrics","emitNotSupportedError","window","wrapSubscribeFunction","options","observer","PerformanceObserver","undefined","performanceObserver","entryList","next","getEntries","observe","err","error","disconnect"],"sources":["C:\\Users\\brigh\\storage\\js_project\\Gakugeki_WEB\\node_modules\\subscribable-things\\src\\factories\\metrics.ts"],"sourcesContent":["import { TMetricsFactory } from '../types';\n\nexport const createMetrics: TMetricsFactory = (emitNotSupportedError, window, wrapSubscribeFunction) => {\n    return (options) =>\n        wrapSubscribeFunction((observer) => {\n            if (window === null || window.PerformanceObserver === undefined) {\n                return emitNotSupportedError(observer);\n            }\n\n            const performanceObserver = new window.PerformanceObserver((entryList) => observer.next(entryList.getEntries()));\n\n            try {\n                performanceObserver.observe(options);\n            } catch (err) {\n                observer.error(err);\n            }\n\n            return () => performanceObserver.disconnect();\n        });\n};\n"]},"metadata":{},"sourceType":"module"}