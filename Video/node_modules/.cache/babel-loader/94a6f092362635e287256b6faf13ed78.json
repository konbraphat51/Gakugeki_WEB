{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport var createChannelMergerNodeRendererFactory = function createChannelMergerNodeRendererFactory(createNativeChannelMergerNode, getNativeAudioNode, renderInputsOfAudioNode) {\n  return function () {\n    var renderedNativeAudioNodes = new WeakMap();\n\n    var createAudioNode = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(proxy, nativeOfflineAudioContext) {\n        var nativeAudioNode, nativeAudioNodeIsOwnedByContext, options;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                nativeAudioNode = getNativeAudioNode(proxy); // If the initially used nativeAudioNode was not constructed on the same OfflineAudioContext it needs to be created again.\n\n                nativeAudioNodeIsOwnedByContext = isOwnedByContext(nativeAudioNode, nativeOfflineAudioContext);\n\n                if (!nativeAudioNodeIsOwnedByContext) {\n                  options = {\n                    channelCount: nativeAudioNode.channelCount,\n                    channelCountMode: nativeAudioNode.channelCountMode,\n                    channelInterpretation: nativeAudioNode.channelInterpretation,\n                    numberOfInputs: nativeAudioNode.numberOfInputs\n                  };\n                  nativeAudioNode = createNativeChannelMergerNode(nativeOfflineAudioContext, options);\n                }\n\n                renderedNativeAudioNodes.set(nativeOfflineAudioContext, nativeAudioNode);\n                _context.next = 6;\n                return renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioNode);\n\n              case 6:\n                return _context.abrupt(\"return\", nativeAudioNode);\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function createAudioNode(_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    return {\n      render: function render(proxy, nativeOfflineAudioContext) {\n        var renderedNativeAudioNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeAudioNode !== undefined) {\n          return Promise.resolve(renderedNativeAudioNode);\n        }\n\n        return createAudioNode(proxy, nativeOfflineAudioContext);\n      }\n    };\n  };\n};","map":{"version":3,"mappings":";;AAAA,SAASA,gBAAT,QAAiC,gCAAjC;AAIA,OAAO,IAAMC,sCAAsC,GAA6C,SAAnFA,sCAAmF,CAC5FC,6BAD4F,EAE5FC,kBAF4F,EAG5FC,uBAH4F,EAI5F;EACA,OAAO,YAAmE;IACtE,IAAMC,wBAAwB,GAAG,IAAIC,OAAJ,EAAjC;;IAEA,IAAMC,eAAe;MAAA,sEAAG,iBAAOC,KAAP,EAA6BC,yBAA7B;QAAA;QAAA;UAAA;YAAA;cAAA;gBAChBC,eADgB,GACEP,kBAAkB,CAAsBK,KAAtB,CADpB,EAGpB;;gBACMG,+BAJc,GAIoBX,gBAAgB,CAACU,eAAD,EAAkBD,yBAAlB,CAJpC;;gBAMpB,IAAI,CAACE,+BAAL,EAAsC;kBAC5BC,OAD4B,GAClB;oBACZC,YAAY,EAAEH,eAAe,CAACG,YADlB;oBAEZC,gBAAgB,EAAEJ,eAAe,CAACI,gBAFtB;oBAGZC,qBAAqB,EAAEL,eAAe,CAACK,qBAH3B;oBAIZC,cAAc,EAAEN,eAAe,CAACM;kBAJpB,CADkB;kBAQlCN,eAAe,GAAGR,6BAA6B,CAACO,yBAAD,EAA4BG,OAA5B,CAA/C;gBACH;;gBAEDP,wBAAwB,CAACY,GAAzB,CAA6BR,yBAA7B,EAAwDC,eAAxD;gBAjBoB;gBAAA,OAmBdN,uBAAuB,CAACI,KAAD,EAAQC,yBAAR,EAAmCC,eAAnC,CAnBT;;cAAA;gBAAA,iCAqBbA,eArBa;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CAAH;;MAAA,gBAAfH,eAAe;QAAA;MAAA;IAAA,GAArB;;IAwBA,OAAO;MACHW,MADG,kBACIV,KADJ,EAC0BC,yBAD1B,EAC+E;QAC9E,IAAMU,uBAAuB,GAAGd,wBAAwB,CAACe,GAAzB,CAA6BX,yBAA7B,CAAhC;;QAEA,IAAIU,uBAAuB,KAAKE,SAAhC,EAA2C;UACvC,OAAOC,OAAO,CAACC,OAAR,CAAgBJ,uBAAhB,CAAP;QACH;;QAED,OAAOZ,eAAe,CAACC,KAAD,EAAQC,yBAAR,CAAtB;MACH;IATE,CAAP;EAWH,CAtCD;AAuCH,CA5CM","names":["isOwnedByContext","createChannelMergerNodeRendererFactory","createNativeChannelMergerNode","getNativeAudioNode","renderInputsOfAudioNode","renderedNativeAudioNodes","WeakMap","createAudioNode","proxy","nativeOfflineAudioContext","nativeAudioNode","nativeAudioNodeIsOwnedByContext","options","channelCount","channelCountMode","channelInterpretation","numberOfInputs","set","render","renderedNativeAudioNode","get","undefined","Promise","resolve"],"sources":["C:\\Users\\brigh\\storage\\js_project\\Gakugeki_WEB\\node_modules\\standardized-audio-context\\src\\factories\\channel-merger-node-renderer-factory.ts"],"sourcesContent":["import { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { IAudioNode, IMinimalOfflineAudioContext, IOfflineAudioContext } from '../interfaces';\nimport { TChannelMergerNodeRendererFactoryFactory, TNativeAudioNode, TNativeOfflineAudioContext } from '../types';\n\nexport const createChannelMergerNodeRendererFactory: TChannelMergerNodeRendererFactoryFactory = (\n    createNativeChannelMergerNode,\n    getNativeAudioNode,\n    renderInputsOfAudioNode\n) => {\n    return <T extends IMinimalOfflineAudioContext | IOfflineAudioContext>() => {\n        const renderedNativeAudioNodes = new WeakMap<TNativeOfflineAudioContext, TNativeAudioNode>();\n\n        const createAudioNode = async (proxy: IAudioNode<T>, nativeOfflineAudioContext: TNativeOfflineAudioContext) => {\n            let nativeAudioNode = getNativeAudioNode<T, TNativeAudioNode>(proxy);\n\n            // If the initially used nativeAudioNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeAudioNodeIsOwnedByContext = isOwnedByContext(nativeAudioNode, nativeOfflineAudioContext);\n\n            if (!nativeAudioNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeAudioNode.channelCount,\n                    channelCountMode: nativeAudioNode.channelCountMode,\n                    channelInterpretation: nativeAudioNode.channelInterpretation,\n                    numberOfInputs: nativeAudioNode.numberOfInputs\n                };\n\n                nativeAudioNode = createNativeChannelMergerNode(nativeOfflineAudioContext, options);\n            }\n\n            renderedNativeAudioNodes.set(nativeOfflineAudioContext, nativeAudioNode);\n\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioNode);\n\n            return nativeAudioNode;\n        };\n\n        return {\n            render(proxy: IAudioNode<T>, nativeOfflineAudioContext: TNativeOfflineAudioContext): Promise<TNativeAudioNode> {\n                const renderedNativeAudioNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);\n\n                if (renderedNativeAudioNode !== undefined) {\n                    return Promise.resolve(renderedNativeAudioNode);\n                }\n\n                return createAudioNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n"]},"metadata":{},"sourceType":"module"}