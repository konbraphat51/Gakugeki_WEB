{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _toConsumableArray from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _asyncToGenerator from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport var createAudioBufferSourceNodeRendererFactory = function createAudioBufferSourceNodeRendererFactory(connectAudioParam, createNativeAudioBufferSourceNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) {\n  return function () {\n    var renderedNativeAudioBufferSourceNodes = new WeakMap();\n    var start = null;\n    var stop = null;\n\n    var createAudioBufferSourceNode = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(proxy, nativeOfflineAudioContext) {\n        var nativeAudioBufferSourceNode, nativeAudioBufferSourceNodeIsOwnedByContext, options, _nativeAudioBufferSou;\n\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                nativeAudioBufferSourceNode = getNativeAudioNode(proxy);\n                /*\n                 * If the initially used nativeAudioBufferSourceNode was not constructed on the same OfflineAudioContext it needs to be created\n                 * again.\n                 */\n\n                nativeAudioBufferSourceNodeIsOwnedByContext = isOwnedByContext(nativeAudioBufferSourceNode, nativeOfflineAudioContext);\n\n                if (!nativeAudioBufferSourceNodeIsOwnedByContext) {\n                  options = {\n                    buffer: nativeAudioBufferSourceNode.buffer,\n                    channelCount: nativeAudioBufferSourceNode.channelCount,\n                    channelCountMode: nativeAudioBufferSourceNode.channelCountMode,\n                    channelInterpretation: nativeAudioBufferSourceNode.channelInterpretation,\n                    // Bug #149: Safari does not yet support the detune AudioParam.\n                    loop: nativeAudioBufferSourceNode.loop,\n                    loopEnd: nativeAudioBufferSourceNode.loopEnd,\n                    loopStart: nativeAudioBufferSourceNode.loopStart,\n                    playbackRate: nativeAudioBufferSourceNode.playbackRate.value\n                  };\n                  nativeAudioBufferSourceNode = createNativeAudioBufferSourceNode(nativeOfflineAudioContext, options);\n\n                  if (start !== null) {\n                    (_nativeAudioBufferSou = nativeAudioBufferSourceNode).start.apply(_nativeAudioBufferSou, _toConsumableArray(start));\n                  }\n\n                  if (stop !== null) {\n                    nativeAudioBufferSourceNode.stop(stop);\n                  }\n                }\n\n                renderedNativeAudioBufferSourceNodes.set(nativeOfflineAudioContext, nativeAudioBufferSourceNode);\n\n                if (nativeAudioBufferSourceNodeIsOwnedByContext) {\n                  _context.next = 9;\n                  break;\n                }\n\n                _context.next = 7;\n                return renderAutomation(nativeOfflineAudioContext, proxy.playbackRate, nativeAudioBufferSourceNode.playbackRate);\n\n              case 7:\n                _context.next = 11;\n                break;\n\n              case 9:\n                _context.next = 11;\n                return connectAudioParam(nativeOfflineAudioContext, proxy.playbackRate, nativeAudioBufferSourceNode.playbackRate);\n\n              case 11:\n                _context.next = 13;\n                return renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioBufferSourceNode);\n\n              case 13:\n                return _context.abrupt(\"return\", nativeAudioBufferSourceNode);\n\n              case 14:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function createAudioBufferSourceNode(_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    return {\n      set start(value) {\n        start = value;\n      },\n\n      set stop(value) {\n        stop = value;\n      },\n\n      render: function render(proxy, nativeOfflineAudioContext) {\n        var renderedNativeAudioBufferSourceNode = renderedNativeAudioBufferSourceNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeAudioBufferSourceNode !== undefined) {\n          return Promise.resolve(renderedNativeAudioBufferSourceNode);\n        }\n\n        return createAudioBufferSourceNode(proxy, nativeOfflineAudioContext);\n      }\n    };\n  };\n};","map":{"version":3,"mappings":"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","names":["isOwnedByContext","createAudioBufferSourceNodeRendererFactory","connectAudioParam","createNativeAudioBufferSourceNode","getNativeAudioNode","renderAutomation","renderInputsOfAudioNode","renderedNativeAudioBufferSourceNodes","WeakMap","start","stop","createAudioBufferSourceNode","proxy","nativeOfflineAudioContext","nativeAudioBufferSourceNode","nativeAudioBufferSourceNodeIsOwnedByContext","options","buffer","channelCount","channelCountMode","channelInterpretation","loop","loopEnd","loopStart","playbackRate","value","set","render","renderedNativeAudioBufferSourceNode","get","undefined","Promise","resolve"],"sources":["C:\\Users\\brigh\\storage\\js_project\\Gakugeki_WEB\\node_modules\\standardized-audio-context\\src\\factories\\audio-buffer-source-node-renderer-factory.ts"],"sourcesContent":["import { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { IAudioBufferSourceNode, IMinimalOfflineAudioContext, IOfflineAudioContext } from '../interfaces';\nimport { TAudioBufferSourceNodeRendererFactoryFactory, TNativeAudioBufferSourceNode, TNativeOfflineAudioContext } from '../types';\n\nexport const createAudioBufferSourceNodeRendererFactory: TAudioBufferSourceNodeRendererFactoryFactory = (\n    connectAudioParam,\n    createNativeAudioBufferSourceNode,\n    getNativeAudioNode,\n    renderAutomation,\n    renderInputsOfAudioNode\n) => {\n    return <T extends IMinimalOfflineAudioContext | IOfflineAudioContext>() => {\n        const renderedNativeAudioBufferSourceNodes = new WeakMap<TNativeOfflineAudioContext, TNativeAudioBufferSourceNode>();\n\n        let start: null | [number, number] | [number, number, number] = null;\n        let stop: null | number = null;\n\n        const createAudioBufferSourceNode = async (\n            proxy: IAudioBufferSourceNode<T>,\n            nativeOfflineAudioContext: TNativeOfflineAudioContext\n        ) => {\n            let nativeAudioBufferSourceNode = getNativeAudioNode<T, TNativeAudioBufferSourceNode>(proxy);\n\n            /*\n             * If the initially used nativeAudioBufferSourceNode was not constructed on the same OfflineAudioContext it needs to be created\n             * again.\n             */\n            const nativeAudioBufferSourceNodeIsOwnedByContext = isOwnedByContext(nativeAudioBufferSourceNode, nativeOfflineAudioContext);\n\n            if (!nativeAudioBufferSourceNodeIsOwnedByContext) {\n                const options = {\n                    buffer: nativeAudioBufferSourceNode.buffer,\n                    channelCount: nativeAudioBufferSourceNode.channelCount,\n                    channelCountMode: nativeAudioBufferSourceNode.channelCountMode,\n                    channelInterpretation: nativeAudioBufferSourceNode.channelInterpretation,\n                    // Bug #149: Safari does not yet support the detune AudioParam.\n                    loop: nativeAudioBufferSourceNode.loop,\n                    loopEnd: nativeAudioBufferSourceNode.loopEnd,\n                    loopStart: nativeAudioBufferSourceNode.loopStart,\n                    playbackRate: nativeAudioBufferSourceNode.playbackRate.value\n                };\n\n                nativeAudioBufferSourceNode = createNativeAudioBufferSourceNode(nativeOfflineAudioContext, options);\n\n                if (start !== null) {\n                    nativeAudioBufferSourceNode.start(...start);\n                }\n\n                if (stop !== null) {\n                    nativeAudioBufferSourceNode.stop(stop);\n                }\n            }\n\n            renderedNativeAudioBufferSourceNodes.set(nativeOfflineAudioContext, nativeAudioBufferSourceNode);\n\n            if (!nativeAudioBufferSourceNodeIsOwnedByContext) {\n                // Bug #149: Safari does not yet support the detune AudioParam.\n                await renderAutomation(nativeOfflineAudioContext, proxy.playbackRate, nativeAudioBufferSourceNode.playbackRate);\n            } else {\n                // Bug #149: Safari does not yet support the detune AudioParam.\n                await connectAudioParam(nativeOfflineAudioContext, proxy.playbackRate, nativeAudioBufferSourceNode.playbackRate);\n            }\n\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioBufferSourceNode);\n\n            return nativeAudioBufferSourceNode;\n        };\n\n        return {\n            set start(value: [number, number] | [number, number, number]) {\n                start = value;\n            },\n            set stop(value: number) {\n                stop = value;\n            },\n            render(\n                proxy: IAudioBufferSourceNode<T>,\n                nativeOfflineAudioContext: TNativeOfflineAudioContext\n            ): Promise<TNativeAudioBufferSourceNode> {\n                const renderedNativeAudioBufferSourceNode = renderedNativeAudioBufferSourceNodes.get(nativeOfflineAudioContext);\n\n                if (renderedNativeAudioBufferSourceNode !== undefined) {\n                    return Promise.resolve(renderedNativeAudioBufferSourceNode);\n                }\n\n                return createAudioBufferSourceNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n"]},"metadata":{},"sourceType":"module"}