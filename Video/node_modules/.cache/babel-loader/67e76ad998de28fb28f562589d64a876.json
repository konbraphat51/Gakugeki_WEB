{"ast":null,"code":"import _objectSpread from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nvar DEFAULT_OPTIONS = {\n  channelCount: 2,\n  channelCountMode: 'max',\n  channelInterpretation: 'speakers',\n  delayTime: 0,\n  maxDelayTime: 1\n};\nexport var createDelayNodeConstructor = function createDelayNodeConstructor(audioNodeConstructor, createAudioParam, createDelayNodeRenderer, createNativeDelayNode, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime) {\n  return /*#__PURE__*/function (_audioNodeConstructor) {\n    _inherits(DelayNode, _audioNodeConstructor);\n\n    var _super = _createSuper(DelayNode);\n\n    function DelayNode(context, options) {\n      var _this;\n\n      _classCallCheck(this, DelayNode);\n\n      var nativeContext = getNativeContext(context);\n\n      var mergedOptions = _objectSpread(_objectSpread({}, DEFAULT_OPTIONS), options);\n\n      var nativeDelayNode = createNativeDelayNode(nativeContext, mergedOptions);\n      var isOffline = isNativeOfflineAudioContext(nativeContext);\n      var delayNodeRenderer = isOffline ? createDelayNodeRenderer(mergedOptions.maxDelayTime) : null;\n      _this = _super.call(this, context, false, nativeDelayNode, delayNodeRenderer);\n      _this._delayTime = createAudioParam(_assertThisInitialized(_this), isOffline, nativeDelayNode.delayTime);\n      setAudioNodeTailTime(_assertThisInitialized(_this), mergedOptions.maxDelayTime);\n      return _this;\n    }\n\n    _createClass(DelayNode, [{\n      key: \"delayTime\",\n      get: function get() {\n        return this._delayTime;\n      }\n    }]);\n\n    return DelayNode;\n  }(audioNodeConstructor);\n};","map":{"version":3,"mappings":";;;;;;AAGA,IAAMA,eAAe,GAAG;EACpBC,YAAY,EAAE,CADM;EAEpBC,gBAAgB,EAAE,KAFE;EAGpBC,qBAAqB,EAAE,UAHH;EAIpBC,SAAS,EAAE,CAJS;EAKpBC,YAAY,EAAE;AALM,CAAxB;AAQA,OAAO,IAAMC,0BAA0B,GAAiC,SAA3DA,0BAA2D,CACpEC,oBADoE,EAEpEC,gBAFoE,EAGpEC,uBAHoE,EAIpEC,qBAJoE,EAKpEC,gBALoE,EAMpEC,2BANoE,EAOpEC,oBAPoE,EAQpE;EACA;IAAA;;IAAA;;IAGI,mBAAYC,OAAZ,EAAwBC,OAAxB,EAAwD;MAAA;;MAAA;;MACpD,IAAMC,aAAa,GAAGL,gBAAgB,CAACG,OAAD,CAAtC;;MACA,IAAMG,aAAa,mCAAQjB,eAAR,GAA4Be,OAA5B,CAAnB;;MACA,IAAMG,eAAe,GAAGR,qBAAqB,CAACM,aAAD,EAAgBC,aAAhB,CAA7C;MACA,IAAME,SAAS,GAAGP,2BAA2B,CAACI,aAAD,CAA7C;MACA,IAAMI,iBAAiB,GAAiCD,SAAS,GAAGV,uBAAuB,CAACQ,aAAa,CAACZ,YAAf,CAA1B,GAAyD,IAA1H;MAEA,0BAAMS,OAAN,EAAe,KAAf,EAAsBI,eAAtB,EAAuCE,iBAAvC;MAEA,MAAKC,UAAL,GAAkBb,gBAAgB,gCAAOW,SAAP,EAAkBD,eAAe,CAACd,SAAlC,CAAlC;MAEAS,oBAAoB,gCAAOI,aAAa,CAACZ,YAArB,CAApB;MAXoD;IAYvD;;IAfL;MAAA;MAAA,KAiBI,eAAa;QACT,OAAO,KAAKgB,UAAZ;MACH;IAnBL;;IAAA;EAAA,EAAmDd,oBAAnD;AAqBH,CA9BM","names":["DEFAULT_OPTIONS","channelCount","channelCountMode","channelInterpretation","delayTime","maxDelayTime","createDelayNodeConstructor","audioNodeConstructor","createAudioParam","createDelayNodeRenderer","createNativeDelayNode","getNativeContext","isNativeOfflineAudioContext","setAudioNodeTailTime","context","options","nativeContext","mergedOptions","nativeDelayNode","isOffline","delayNodeRenderer","_delayTime"],"sources":["C:\\Users\\brigh\\storage\\js_project\\Gakugeki_WEB\\node_modules\\standardized-audio-context\\src\\factories\\delay-node-constructor.ts"],"sourcesContent":["import { IAudioParam, IDelayNode, IDelayOptions } from '../interfaces';\nimport { TAudioNodeRenderer, TContext, TDelayNodeConstructorFactory } from '../types';\n\nconst DEFAULT_OPTIONS = {\n    channelCount: 2,\n    channelCountMode: 'max',\n    channelInterpretation: 'speakers',\n    delayTime: 0,\n    maxDelayTime: 1\n} as const;\n\nexport const createDelayNodeConstructor: TDelayNodeConstructorFactory = (\n    audioNodeConstructor,\n    createAudioParam,\n    createDelayNodeRenderer,\n    createNativeDelayNode,\n    getNativeContext,\n    isNativeOfflineAudioContext,\n    setAudioNodeTailTime\n) => {\n    return class DelayNode<T extends TContext> extends audioNodeConstructor<T> implements IDelayNode<T> {\n        private _delayTime: IAudioParam;\n\n        constructor(context: T, options?: Partial<IDelayOptions>) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeDelayNode = createNativeDelayNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const delayNodeRenderer = <TAudioNodeRenderer<T, this>>(isOffline ? createDelayNodeRenderer(mergedOptions.maxDelayTime) : null);\n\n            super(context, false, nativeDelayNode, delayNodeRenderer);\n\n            this._delayTime = createAudioParam(this, isOffline, nativeDelayNode.delayTime);\n\n            setAudioNodeTailTime(this, mergedOptions.maxDelayTime);\n        }\n\n        get delayTime(): IAudioParam {\n            return this._delayTime;\n        }\n    };\n};\n"]},"metadata":{},"sourceType":"module"}