{"ast":null,"code":"import _objectSpread from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nvar DEFAULT_OPTIONS = {\n  attack: 0.003,\n  channelCount: 2,\n  channelCountMode: 'clamped-max',\n  channelInterpretation: 'speakers',\n  knee: 30,\n  ratio: 12,\n  release: 0.25,\n  threshold: -24\n};\nexport var createDynamicsCompressorNodeConstructor = function createDynamicsCompressorNodeConstructor(audioNodeConstructor, createAudioParam, createDynamicsCompressorNodeRenderer, createNativeDynamicsCompressorNode, createNotSupportedError, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime) {\n  return /*#__PURE__*/function (_audioNodeConstructor) {\n    _inherits(DynamicsCompressorNode, _audioNodeConstructor);\n\n    var _super = _createSuper(DynamicsCompressorNode);\n\n    function DynamicsCompressorNode(context, options) {\n      var _this;\n\n      _classCallCheck(this, DynamicsCompressorNode);\n\n      var nativeContext = getNativeContext(context);\n\n      var mergedOptions = _objectSpread(_objectSpread({}, DEFAULT_OPTIONS), options);\n\n      var nativeDynamicsCompressorNode = createNativeDynamicsCompressorNode(nativeContext, mergedOptions);\n      var isOffline = isNativeOfflineAudioContext(nativeContext);\n      var dynamicsCompressorNodeRenderer = isOffline ? createDynamicsCompressorNodeRenderer() : null;\n      _this = _super.call(this, context, false, nativeDynamicsCompressorNode, dynamicsCompressorNodeRenderer);\n      _this._attack = createAudioParam(_assertThisInitialized(_this), isOffline, nativeDynamicsCompressorNode.attack);\n      _this._knee = createAudioParam(_assertThisInitialized(_this), isOffline, nativeDynamicsCompressorNode.knee);\n      _this._nativeDynamicsCompressorNode = nativeDynamicsCompressorNode;\n      _this._ratio = createAudioParam(_assertThisInitialized(_this), isOffline, nativeDynamicsCompressorNode.ratio);\n      _this._release = createAudioParam(_assertThisInitialized(_this), isOffline, nativeDynamicsCompressorNode.release);\n      _this._threshold = createAudioParam(_assertThisInitialized(_this), isOffline, nativeDynamicsCompressorNode.threshold);\n      setAudioNodeTailTime(_assertThisInitialized(_this), 0.006);\n      return _this;\n    }\n\n    _createClass(DynamicsCompressorNode, [{\n      key: \"attack\",\n      get: function get() {\n        return this._attack;\n      } // Bug #108: Safari allows a channelCount of three and above which is why the getter and setter needs to be overwritten here.\n\n    }, {\n      key: \"channelCount\",\n      get: function get() {\n        return this._nativeDynamicsCompressorNode.channelCount;\n      },\n      set: function set(value) {\n        var previousChannelCount = this._nativeDynamicsCompressorNode.channelCount;\n        this._nativeDynamicsCompressorNode.channelCount = value;\n\n        if (value > 2) {\n          this._nativeDynamicsCompressorNode.channelCount = previousChannelCount;\n          throw createNotSupportedError();\n        }\n      }\n      /*\n       * Bug #109: Only Chrome and Firefox disallow a channelCountMode of 'max' yet which is why the getter and setter needs to be\n       * overwritten here.\n       */\n\n    }, {\n      key: \"channelCountMode\",\n      get: function get() {\n        return this._nativeDynamicsCompressorNode.channelCountMode;\n      },\n      set: function set(value) {\n        var previousChannelCount = this._nativeDynamicsCompressorNode.channelCountMode;\n        this._nativeDynamicsCompressorNode.channelCountMode = value;\n\n        if (value === 'max') {\n          this._nativeDynamicsCompressorNode.channelCountMode = previousChannelCount;\n          throw createNotSupportedError();\n        }\n      }\n    }, {\n      key: \"knee\",\n      get: function get() {\n        return this._knee;\n      }\n    }, {\n      key: \"ratio\",\n      get: function get() {\n        return this._ratio;\n      }\n    }, {\n      key: \"reduction\",\n      get: function get() {\n        // Bug #111: Safari returns an AudioParam instead of a number.\n        if (typeof this._nativeDynamicsCompressorNode.reduction.value === 'number') {\n          return this._nativeDynamicsCompressorNode.reduction.value;\n        }\n\n        return this._nativeDynamicsCompressorNode.reduction;\n      }\n    }, {\n      key: \"release\",\n      get: function get() {\n        return this._release;\n      }\n    }, {\n      key: \"threshold\",\n      get: function get() {\n        return this._threshold;\n      }\n    }]);\n\n    return DynamicsCompressorNode;\n  }(audioNodeConstructor);\n};","map":{"version":3,"mappings":"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","names":["DEFAULT_OPTIONS","attack","channelCount","channelCountMode","channelInterpretation","knee","ratio","release","threshold","createDynamicsCompressorNodeConstructor","audioNodeConstructor","createAudioParam","createDynamicsCompressorNodeRenderer","createNativeDynamicsCompressorNode","createNotSupportedError","getNativeContext","isNativeOfflineAudioContext","setAudioNodeTailTime","context","options","nativeContext","mergedOptions","nativeDynamicsCompressorNode","isOffline","dynamicsCompressorNodeRenderer","_attack","_knee","_nativeDynamicsCompressorNode","_ratio","_release","_threshold","value","previousChannelCount","reduction"],"sources":["C:\\Users\\brigh\\storage\\js_project\\Gakugeki_WEB\\node_modules\\standardized-audio-context\\src\\factories\\dynamics-compressor-node-constructor.ts"],"sourcesContent":["import { IAudioParam, IDynamicsCompressorNode, IDynamicsCompressorOptions } from '../interfaces';\nimport {\n    TAudioNodeRenderer,\n    TChannelCountMode,\n    TContext,\n    TDynamicsCompressorNodeConstructorFactory,\n    TNativeAudioParam,\n    TNativeDynamicsCompressorNode\n} from '../types';\n\nconst DEFAULT_OPTIONS = {\n    attack: 0.003,\n    channelCount: 2,\n    channelCountMode: 'clamped-max',\n    channelInterpretation: 'speakers',\n    knee: 30,\n    ratio: 12,\n    release: 0.25,\n    threshold: -24\n} as const;\n\nexport const createDynamicsCompressorNodeConstructor: TDynamicsCompressorNodeConstructorFactory = (\n    audioNodeConstructor,\n    createAudioParam,\n    createDynamicsCompressorNodeRenderer,\n    createNativeDynamicsCompressorNode,\n    createNotSupportedError,\n    getNativeContext,\n    isNativeOfflineAudioContext,\n    setAudioNodeTailTime\n) => {\n    return class DynamicsCompressorNode<T extends TContext> extends audioNodeConstructor<T> implements IDynamicsCompressorNode<T> {\n        private _attack: IAudioParam;\n\n        private _knee: IAudioParam;\n\n        private _nativeDynamicsCompressorNode: TNativeDynamicsCompressorNode;\n\n        private _ratio: IAudioParam;\n\n        private _release: IAudioParam;\n\n        private _threshold: IAudioParam;\n\n        constructor(context: T, options?: Partial<IDynamicsCompressorOptions>) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeDynamicsCompressorNode = createNativeDynamicsCompressorNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const dynamicsCompressorNodeRenderer = <TAudioNodeRenderer<T, this>>(isOffline ? createDynamicsCompressorNodeRenderer() : null);\n\n            super(context, false, nativeDynamicsCompressorNode, dynamicsCompressorNodeRenderer);\n\n            this._attack = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.attack);\n            this._knee = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.knee);\n            this._nativeDynamicsCompressorNode = nativeDynamicsCompressorNode;\n            this._ratio = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.ratio);\n            this._release = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.release);\n            this._threshold = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.threshold);\n\n            setAudioNodeTailTime(this, 0.006);\n        }\n\n        get attack(): IAudioParam {\n            return this._attack;\n        }\n\n        // Bug #108: Safari allows a channelCount of three and above which is why the getter and setter needs to be overwritten here.\n        get channelCount(): number {\n            return this._nativeDynamicsCompressorNode.channelCount;\n        }\n\n        set channelCount(value) {\n            const previousChannelCount = this._nativeDynamicsCompressorNode.channelCount;\n\n            this._nativeDynamicsCompressorNode.channelCount = value;\n\n            if (value > 2) {\n                this._nativeDynamicsCompressorNode.channelCount = previousChannelCount;\n\n                throw createNotSupportedError();\n            }\n        }\n\n        /*\n         * Bug #109: Only Chrome and Firefox disallow a channelCountMode of 'max' yet which is why the getter and setter needs to be\n         * overwritten here.\n         */\n        get channelCountMode(): TChannelCountMode {\n            return this._nativeDynamicsCompressorNode.channelCountMode;\n        }\n\n        set channelCountMode(value) {\n            const previousChannelCount = this._nativeDynamicsCompressorNode.channelCountMode;\n\n            this._nativeDynamicsCompressorNode.channelCountMode = value;\n\n            if (value === 'max') {\n                this._nativeDynamicsCompressorNode.channelCountMode = previousChannelCount;\n\n                throw createNotSupportedError();\n            }\n        }\n\n        get knee(): IAudioParam {\n            return this._knee;\n        }\n\n        get ratio(): IAudioParam {\n            return this._ratio;\n        }\n\n        get reduction(): number {\n            // Bug #111: Safari returns an AudioParam instead of a number.\n            if (typeof (<TNativeAudioParam>(<any>this._nativeDynamicsCompressorNode.reduction)).value === 'number') {\n                return (<TNativeAudioParam>(<any>this._nativeDynamicsCompressorNode.reduction)).value;\n            }\n\n            return this._nativeDynamicsCompressorNode.reduction;\n        }\n\n        get release(): IAudioParam {\n            return this._release;\n        }\n\n        get threshold(): IAudioParam {\n            return this._threshold;\n        }\n    };\n};\n"]},"metadata":{},"sourceType":"module"}