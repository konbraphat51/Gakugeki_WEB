{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport var createOscillatorNodeRendererFactory = function createOscillatorNodeRendererFactory(connectAudioParam, createNativeOscillatorNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) {\n  return function () {\n    var renderedNativeOscillatorNodes = new WeakMap();\n    var periodicWave = null;\n    var start = null;\n    var stop = null;\n\n    var createOscillatorNode = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(proxy, nativeOfflineAudioContext) {\n        var nativeOscillatorNode, nativeOscillatorNodeIsOwnedByContext, options;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                nativeOscillatorNode = getNativeAudioNode(proxy); // If the initially used nativeOscillatorNode was not constructed on the same OfflineAudioContext it needs to be created again.\n\n                nativeOscillatorNodeIsOwnedByContext = isOwnedByContext(nativeOscillatorNode, nativeOfflineAudioContext);\n\n                if (!nativeOscillatorNodeIsOwnedByContext) {\n                  options = {\n                    channelCount: nativeOscillatorNode.channelCount,\n                    channelCountMode: nativeOscillatorNode.channelCountMode,\n                    channelInterpretation: nativeOscillatorNode.channelInterpretation,\n                    detune: nativeOscillatorNode.detune.value,\n                    frequency: nativeOscillatorNode.frequency.value,\n                    periodicWave: periodicWave === null ? undefined : periodicWave,\n                    type: nativeOscillatorNode.type\n                  };\n                  nativeOscillatorNode = createNativeOscillatorNode(nativeOfflineAudioContext, options);\n\n                  if (start !== null) {\n                    nativeOscillatorNode.start(start);\n                  }\n\n                  if (stop !== null) {\n                    nativeOscillatorNode.stop(stop);\n                  }\n                }\n\n                renderedNativeOscillatorNodes.set(nativeOfflineAudioContext, nativeOscillatorNode);\n\n                if (nativeOscillatorNodeIsOwnedByContext) {\n                  _context.next = 11;\n                  break;\n                }\n\n                _context.next = 7;\n                return renderAutomation(nativeOfflineAudioContext, proxy.detune, nativeOscillatorNode.detune);\n\n              case 7:\n                _context.next = 9;\n                return renderAutomation(nativeOfflineAudioContext, proxy.frequency, nativeOscillatorNode.frequency);\n\n              case 9:\n                _context.next = 15;\n                break;\n\n              case 11:\n                _context.next = 13;\n                return connectAudioParam(nativeOfflineAudioContext, proxy.detune, nativeOscillatorNode.detune);\n\n              case 13:\n                _context.next = 15;\n                return connectAudioParam(nativeOfflineAudioContext, proxy.frequency, nativeOscillatorNode.frequency);\n\n              case 15:\n                _context.next = 17;\n                return renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeOscillatorNode);\n\n              case 17:\n                return _context.abrupt(\"return\", nativeOscillatorNode);\n\n              case 18:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function createOscillatorNode(_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    return {\n      set periodicWave(value) {\n        periodicWave = value;\n      },\n\n      set start(value) {\n        start = value;\n      },\n\n      set stop(value) {\n        stop = value;\n      },\n\n      render: function render(proxy, nativeOfflineAudioContext) {\n        var renderedNativeOscillatorNode = renderedNativeOscillatorNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeOscillatorNode !== undefined) {\n          return Promise.resolve(renderedNativeOscillatorNode);\n        }\n\n        return createOscillatorNode(proxy, nativeOfflineAudioContext);\n      }\n    };\n  };\n};","map":{"version":3,"mappings":"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","names":["isOwnedByContext","createOscillatorNodeRendererFactory","connectAudioParam","createNativeOscillatorNode","getNativeAudioNode","renderAutomation","renderInputsOfAudioNode","renderedNativeOscillatorNodes","WeakMap","periodicWave","start","stop","createOscillatorNode","proxy","nativeOfflineAudioContext","nativeOscillatorNode","nativeOscillatorNodeIsOwnedByContext","options","channelCount","channelCountMode","channelInterpretation","detune","value","frequency","undefined","type","set","render","renderedNativeOscillatorNode","get","Promise","resolve"],"sources":["C:\\Users\\brigh\\storage\\js_project\\Gakugeki_WEB\\node_modules\\standardized-audio-context\\src\\factories\\oscillator-node-renderer-factory.ts"],"sourcesContent":["import { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { IMinimalOfflineAudioContext, IOfflineAudioContext, IOscillatorNode, IPeriodicWave } from '../interfaces';\nimport { TNativeOfflineAudioContext, TNativeOscillatorNode, TOscillatorNodeRendererFactoryFactory } from '../types';\n\nexport const createOscillatorNodeRendererFactory: TOscillatorNodeRendererFactoryFactory = (\n    connectAudioParam,\n    createNativeOscillatorNode,\n    getNativeAudioNode,\n    renderAutomation,\n    renderInputsOfAudioNode\n) => {\n    return <T extends IMinimalOfflineAudioContext | IOfflineAudioContext>() => {\n        const renderedNativeOscillatorNodes = new WeakMap<TNativeOfflineAudioContext, TNativeOscillatorNode>();\n\n        let periodicWave: null | IPeriodicWave = null;\n        let start: null | number = null;\n        let stop: null | number = null;\n\n        const createOscillatorNode = async (proxy: IOscillatorNode<T>, nativeOfflineAudioContext: TNativeOfflineAudioContext) => {\n            let nativeOscillatorNode = getNativeAudioNode<T, TNativeOscillatorNode>(proxy);\n\n            // If the initially used nativeOscillatorNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeOscillatorNodeIsOwnedByContext = isOwnedByContext(nativeOscillatorNode, nativeOfflineAudioContext);\n\n            if (!nativeOscillatorNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeOscillatorNode.channelCount,\n                    channelCountMode: nativeOscillatorNode.channelCountMode,\n                    channelInterpretation: nativeOscillatorNode.channelInterpretation,\n                    detune: nativeOscillatorNode.detune.value,\n                    frequency: nativeOscillatorNode.frequency.value,\n                    periodicWave: periodicWave === null ? undefined : periodicWave,\n                    type: nativeOscillatorNode.type\n                };\n\n                nativeOscillatorNode = createNativeOscillatorNode(nativeOfflineAudioContext, options);\n\n                if (start !== null) {\n                    nativeOscillatorNode.start(start);\n                }\n\n                if (stop !== null) {\n                    nativeOscillatorNode.stop(stop);\n                }\n            }\n\n            renderedNativeOscillatorNodes.set(nativeOfflineAudioContext, nativeOscillatorNode);\n\n            if (!nativeOscillatorNodeIsOwnedByContext) {\n                await renderAutomation(nativeOfflineAudioContext, proxy.detune, nativeOscillatorNode.detune);\n                await renderAutomation(nativeOfflineAudioContext, proxy.frequency, nativeOscillatorNode.frequency);\n            } else {\n                await connectAudioParam(nativeOfflineAudioContext, proxy.detune, nativeOscillatorNode.detune);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.frequency, nativeOscillatorNode.frequency);\n            }\n\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeOscillatorNode);\n\n            return nativeOscillatorNode;\n        };\n\n        return {\n            set periodicWave(value: null | IPeriodicWave) {\n                periodicWave = value;\n            },\n            set start(value: number) {\n                start = value;\n            },\n            set stop(value: number) {\n                stop = value;\n            },\n            render(proxy: IOscillatorNode<T>, nativeOfflineAudioContext: TNativeOfflineAudioContext): Promise<TNativeOscillatorNode> {\n                const renderedNativeOscillatorNode = renderedNativeOscillatorNodes.get(nativeOfflineAudioContext);\n\n                if (renderedNativeOscillatorNode !== undefined) {\n                    return Promise.resolve(renderedNativeOscillatorNode);\n                }\n\n                return createOscillatorNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n"]},"metadata":{},"sourceType":"module"}