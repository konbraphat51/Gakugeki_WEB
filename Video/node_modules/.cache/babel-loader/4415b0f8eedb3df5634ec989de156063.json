{"ast":null,"code":"export var createWrapAudioBufferCopyChannelMethods = function createWrapAudioBufferCopyChannelMethods(convertNumberToUnsignedLong, createIndexSizeError) {\n  return function (audioBuffer) {\n    audioBuffer.copyFromChannel = function (destination, channelNumberAsNumber) {\n      var bufferOffsetAsNumber = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var bufferOffset = convertNumberToUnsignedLong(bufferOffsetAsNumber);\n      var channelNumber = convertNumberToUnsignedLong(channelNumberAsNumber);\n\n      if (channelNumber >= audioBuffer.numberOfChannels) {\n        throw createIndexSizeError();\n      }\n\n      var audioBufferLength = audioBuffer.length;\n      var channelData = audioBuffer.getChannelData(channelNumber);\n      var destinationLength = destination.length;\n\n      for (var i = bufferOffset < 0 ? -bufferOffset : 0; i + bufferOffset < audioBufferLength && i < destinationLength; i += 1) {\n        destination[i] = channelData[i + bufferOffset];\n      }\n    };\n\n    audioBuffer.copyToChannel = function (source, channelNumberAsNumber) {\n      var bufferOffsetAsNumber = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var bufferOffset = convertNumberToUnsignedLong(bufferOffsetAsNumber);\n      var channelNumber = convertNumberToUnsignedLong(channelNumberAsNumber);\n\n      if (channelNumber >= audioBuffer.numberOfChannels) {\n        throw createIndexSizeError();\n      }\n\n      var audioBufferLength = audioBuffer.length;\n      var channelData = audioBuffer.getChannelData(channelNumber);\n      var sourceLength = source.length;\n\n      for (var i = bufferOffset < 0 ? -bufferOffset : 0; i + bufferOffset < audioBufferLength && i < sourceLength; i += 1) {\n        channelData[i + bufferOffset] = source[i];\n      }\n    };\n  };\n};","map":{"version":3,"mappings":"AAEA,OAAO,IAAMA,uCAAuC,GAA8C,SAArFA,uCAAqF,CAC9FC,2BAD8F,EAE9FC,oBAF8F,EAG9F;EACA,OAAO,UAACC,WAAD,EAA0C;IAC7CA,WAAW,CAACC,eAAZ,GAA8B,UAACC,WAAD,EAAcC,qBAAd,EAAiE;MAAA,IAA5BC,oBAA4B,uEAAL,CAAK;MAC3F,IAAMC,YAAY,GAAGP,2BAA2B,CAACM,oBAAD,CAAhD;MACA,IAAME,aAAa,GAAGR,2BAA2B,CAACK,qBAAD,CAAjD;;MAEA,IAAIG,aAAa,IAAIN,WAAW,CAACO,gBAAjC,EAAmD;QAC/C,MAAMR,oBAAoB,EAA1B;MACH;;MAED,IAAMS,iBAAiB,GAAGR,WAAW,CAACS,MAAtC;MACA,IAAMC,WAAW,GAAGV,WAAW,CAACW,cAAZ,CAA2BL,aAA3B,CAApB;MACA,IAAMM,iBAAiB,GAAGV,WAAW,CAACO,MAAtC;;MAEA,KAAK,IAAII,CAAC,GAAGR,YAAY,GAAG,CAAf,GAAmB,CAACA,YAApB,GAAmC,CAAhD,EAAmDQ,CAAC,GAAGR,YAAJ,GAAmBG,iBAAnB,IAAwCK,CAAC,GAAGD,iBAA/F,EAAkHC,CAAC,IAAI,CAAvH,EAA0H;QACtHX,WAAW,CAACW,CAAD,CAAX,GAAiBH,WAAW,CAACG,CAAC,GAAGR,YAAL,CAA5B;MACH;IACJ,CAfD;;IAiBAL,WAAW,CAACc,aAAZ,GAA4B,UAACC,MAAD,EAASZ,qBAAT,EAA4D;MAAA,IAA5BC,oBAA4B,uEAAL,CAAK;MACpF,IAAMC,YAAY,GAAGP,2BAA2B,CAACM,oBAAD,CAAhD;MACA,IAAME,aAAa,GAAGR,2BAA2B,CAACK,qBAAD,CAAjD;;MAEA,IAAIG,aAAa,IAAIN,WAAW,CAACO,gBAAjC,EAAmD;QAC/C,MAAMR,oBAAoB,EAA1B;MACH;;MAED,IAAMS,iBAAiB,GAAGR,WAAW,CAACS,MAAtC;MACA,IAAMC,WAAW,GAAGV,WAAW,CAACW,cAAZ,CAA2BL,aAA3B,CAApB;MACA,IAAMU,YAAY,GAAGD,MAAM,CAACN,MAA5B;;MAEA,KAAK,IAAII,CAAC,GAAGR,YAAY,GAAG,CAAf,GAAmB,CAACA,YAApB,GAAmC,CAAhD,EAAmDQ,CAAC,GAAGR,YAAJ,GAAmBG,iBAAnB,IAAwCK,CAAC,GAAGG,YAA/F,EAA6GH,CAAC,IAAI,CAAlH,EAAqH;QACjHH,WAAW,CAACG,CAAC,GAAGR,YAAL,CAAX,GAAgCU,MAAM,CAACF,CAAD,CAAtC;MACH;IACJ,CAfD;EAgBH,CAlCD;AAmCH,CAvCM","names":["createWrapAudioBufferCopyChannelMethods","convertNumberToUnsignedLong","createIndexSizeError","audioBuffer","copyFromChannel","destination","channelNumberAsNumber","bufferOffsetAsNumber","bufferOffset","channelNumber","numberOfChannels","audioBufferLength","length","channelData","getChannelData","destinationLength","i","copyToChannel","source","sourceLength"],"sources":["C:\\Users\\brigh\\storage\\js_project\\Gakugeki_WEB\\node_modules\\standardized-audio-context\\src\\factories\\wrap-audio-buffer-copy-channel-methods.ts"],"sourcesContent":["import { TNativeAudioBuffer, TWrapAudioBufferCopyChannelMethodsFactory } from '../types';\n\nexport const createWrapAudioBufferCopyChannelMethods: TWrapAudioBufferCopyChannelMethodsFactory = (\n    convertNumberToUnsignedLong,\n    createIndexSizeError\n) => {\n    return (audioBuffer: TNativeAudioBuffer): void => {\n        audioBuffer.copyFromChannel = (destination, channelNumberAsNumber, bufferOffsetAsNumber = 0) => {\n            const bufferOffset = convertNumberToUnsignedLong(bufferOffsetAsNumber);\n            const channelNumber = convertNumberToUnsignedLong(channelNumberAsNumber);\n\n            if (channelNumber >= audioBuffer.numberOfChannels) {\n                throw createIndexSizeError();\n            }\n\n            const audioBufferLength = audioBuffer.length;\n            const channelData = audioBuffer.getChannelData(channelNumber);\n            const destinationLength = destination.length;\n\n            for (let i = bufferOffset < 0 ? -bufferOffset : 0; i + bufferOffset < audioBufferLength && i < destinationLength; i += 1) {\n                destination[i] = channelData[i + bufferOffset];\n            }\n        };\n\n        audioBuffer.copyToChannel = (source, channelNumberAsNumber, bufferOffsetAsNumber = 0) => {\n            const bufferOffset = convertNumberToUnsignedLong(bufferOffsetAsNumber);\n            const channelNumber = convertNumberToUnsignedLong(channelNumberAsNumber);\n\n            if (channelNumber >= audioBuffer.numberOfChannels) {\n                throw createIndexSizeError();\n            }\n\n            const audioBufferLength = audioBuffer.length;\n            const channelData = audioBuffer.getChannelData(channelNumber);\n            const sourceLength = source.length;\n\n            for (let i = bufferOffset < 0 ? -bufferOffset : 0; i + bufferOffset < audioBufferLength && i < sourceLength; i += 1) {\n                channelData[i + bufferOffset] = source[i];\n            }\n        };\n    };\n};\n"]},"metadata":{},"sourceType":"module"}