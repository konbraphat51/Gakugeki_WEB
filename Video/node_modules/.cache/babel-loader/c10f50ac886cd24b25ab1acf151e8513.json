{"ast":null,"code":"import _toConsumableArray from \"C:/Users/brigh/storage/js_project/Gakugeki_WEB/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nexport var createAudioListenerFactory = function createAudioListenerFactory(createAudioParam, createNativeChannelMergerNode, createNativeConstantSourceNode, createNativeScriptProcessorNode, createNotSupportedError, getFirstSample, isNativeOfflineAudioContext, overwriteAccessors) {\n  return function (context, nativeContext) {\n    var nativeListener = nativeContext.listener; // Bug #117: Only Chrome & Edge support the new interface already.\n\n    var createFakeAudioParams = function createFakeAudioParams() {\n      var buffer = new Float32Array(1);\n      var channelMergerNode = createNativeChannelMergerNode(nativeContext, {\n        channelCount: 1,\n        channelCountMode: 'explicit',\n        channelInterpretation: 'speakers',\n        numberOfInputs: 9\n      });\n      var isOffline = isNativeOfflineAudioContext(nativeContext);\n      var isScriptProcessorNodeCreated = false;\n      var lastOrientation = [0, 0, -1, 0, 1, 0];\n      var lastPosition = [0, 0, 0];\n\n      var createScriptProcessorNode = function createScriptProcessorNode() {\n        if (isScriptProcessorNodeCreated) {\n          return;\n        }\n\n        isScriptProcessorNodeCreated = true;\n        var scriptProcessorNode = createNativeScriptProcessorNode(nativeContext, 256, 9, 0); // tslint:disable-next-line:deprecation\n\n        scriptProcessorNode.onaudioprocess = function (_ref) {\n          var inputBuffer = _ref.inputBuffer;\n          var orientation = [getFirstSample(inputBuffer, buffer, 0), getFirstSample(inputBuffer, buffer, 1), getFirstSample(inputBuffer, buffer, 2), getFirstSample(inputBuffer, buffer, 3), getFirstSample(inputBuffer, buffer, 4), getFirstSample(inputBuffer, buffer, 5)];\n\n          if (orientation.some(function (value, index) {\n            return value !== lastOrientation[index];\n          })) {\n            nativeListener.setOrientation.apply(nativeListener, orientation); // tslint:disable-line:deprecation\n\n            lastOrientation = orientation;\n          }\n\n          var positon = [getFirstSample(inputBuffer, buffer, 6), getFirstSample(inputBuffer, buffer, 7), getFirstSample(inputBuffer, buffer, 8)];\n\n          if (positon.some(function (value, index) {\n            return value !== lastPosition[index];\n          })) {\n            nativeListener.setPosition.apply(nativeListener, positon); // tslint:disable-line:deprecation\n\n            lastPosition = positon;\n          }\n        };\n\n        channelMergerNode.connect(scriptProcessorNode);\n      };\n\n      var createSetOrientation = function createSetOrientation(index) {\n        return function (value) {\n          if (value !== lastOrientation[index]) {\n            lastOrientation[index] = value;\n            nativeListener.setOrientation.apply(nativeListener, _toConsumableArray(lastOrientation)); // tslint:disable-line:deprecation\n          }\n        };\n      };\n\n      var createSetPosition = function createSetPosition(index) {\n        return function (value) {\n          if (value !== lastPosition[index]) {\n            lastPosition[index] = value;\n            nativeListener.setPosition.apply(nativeListener, _toConsumableArray(lastPosition)); // tslint:disable-line:deprecation\n          }\n        };\n      };\n\n      var createFakeAudioParam = function createFakeAudioParam(input, initialValue, setValue) {\n        var constantSourceNode = createNativeConstantSourceNode(nativeContext, {\n          channelCount: 1,\n          channelCountMode: 'explicit',\n          channelInterpretation: 'discrete',\n          offset: initialValue\n        });\n        constantSourceNode.connect(channelMergerNode, 0, input); // @todo This should be stopped when the context is closed.\n\n        constantSourceNode.start();\n        Object.defineProperty(constantSourceNode.offset, 'defaultValue', {\n          get: function get() {\n            return initialValue;\n          }\n        });\n        /*\n         * Bug #62 & #74: Safari does not support ConstantSourceNodes and does not export the correct values for maxValue and\n         * minValue for GainNodes.\n         */\n\n        var audioParam = createAudioParam({\n          context: context\n        }, isOffline, constantSourceNode.offset, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n        overwriteAccessors(audioParam, 'value', function (get) {\n          return function () {\n            return get.call(audioParam);\n          };\n        }, function (set) {\n          return function (value) {\n            try {\n              set.call(audioParam, value);\n            } catch (err) {\n              if (err.code !== 9) {\n                throw err;\n              }\n            }\n\n            createScriptProcessorNode();\n\n            if (isOffline) {\n              // Bug #117: Using setOrientation() and setPosition() doesn't work with an OfflineAudioContext.\n              setValue(value);\n            }\n          };\n        });\n\n        audioParam.cancelAndHoldAtTime = function (cancelAndHoldAtTime) {\n          if (isOffline) {\n            return function () {\n              throw createNotSupportedError();\n            };\n          }\n\n          return function () {\n            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n              args[_key] = arguments[_key];\n            }\n\n            var value = cancelAndHoldAtTime.apply(audioParam, args);\n            createScriptProcessorNode();\n            return value;\n          };\n        }(audioParam.cancelAndHoldAtTime);\n\n        audioParam.cancelScheduledValues = function (cancelScheduledValues) {\n          if (isOffline) {\n            return function () {\n              throw createNotSupportedError();\n            };\n          }\n\n          return function () {\n            for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n              args[_key2] = arguments[_key2];\n            }\n\n            var value = cancelScheduledValues.apply(audioParam, args);\n            createScriptProcessorNode();\n            return value;\n          };\n        }(audioParam.cancelScheduledValues);\n\n        audioParam.exponentialRampToValueAtTime = function (exponentialRampToValueAtTime) {\n          if (isOffline) {\n            return function () {\n              throw createNotSupportedError();\n            };\n          }\n\n          return function () {\n            for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n              args[_key3] = arguments[_key3];\n            }\n\n            var value = exponentialRampToValueAtTime.apply(audioParam, args);\n            createScriptProcessorNode();\n            return value;\n          };\n        }(audioParam.exponentialRampToValueAtTime);\n\n        audioParam.linearRampToValueAtTime = function (linearRampToValueAtTime) {\n          if (isOffline) {\n            return function () {\n              throw createNotSupportedError();\n            };\n          }\n\n          return function () {\n            for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n              args[_key4] = arguments[_key4];\n            }\n\n            var value = linearRampToValueAtTime.apply(audioParam, args);\n            createScriptProcessorNode();\n            return value;\n          };\n        }(audioParam.linearRampToValueAtTime);\n\n        audioParam.setTargetAtTime = function (setTargetAtTime) {\n          if (isOffline) {\n            return function () {\n              throw createNotSupportedError();\n            };\n          }\n\n          return function () {\n            for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n              args[_key5] = arguments[_key5];\n            }\n\n            var value = setTargetAtTime.apply(audioParam, args);\n            createScriptProcessorNode();\n            return value;\n          };\n        }(audioParam.setTargetAtTime);\n\n        audioParam.setValueAtTime = function (setValueAtTime) {\n          if (isOffline) {\n            return function () {\n              throw createNotSupportedError();\n            };\n          }\n\n          return function () {\n            for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n              args[_key6] = arguments[_key6];\n            }\n\n            var value = setValueAtTime.apply(audioParam, args);\n            createScriptProcessorNode();\n            return value;\n          };\n        }(audioParam.setValueAtTime);\n\n        audioParam.setValueCurveAtTime = function (setValueCurveAtTime) {\n          if (isOffline) {\n            return function () {\n              throw createNotSupportedError();\n            };\n          }\n\n          return function () {\n            for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n              args[_key7] = arguments[_key7];\n            }\n\n            var value = setValueCurveAtTime.apply(audioParam, args);\n            createScriptProcessorNode();\n            return value;\n          };\n        }(audioParam.setValueCurveAtTime);\n\n        return audioParam;\n      };\n\n      return {\n        forwardX: createFakeAudioParam(0, 0, createSetOrientation(0)),\n        forwardY: createFakeAudioParam(1, 0, createSetOrientation(1)),\n        forwardZ: createFakeAudioParam(2, -1, createSetOrientation(2)),\n        positionX: createFakeAudioParam(6, 0, createSetPosition(0)),\n        positionY: createFakeAudioParam(7, 0, createSetPosition(1)),\n        positionZ: createFakeAudioParam(8, 0, createSetPosition(2)),\n        upX: createFakeAudioParam(3, 0, createSetOrientation(3)),\n        upY: createFakeAudioParam(4, 1, createSetOrientation(4)),\n        upZ: createFakeAudioParam(5, 0, createSetOrientation(5))\n      };\n    };\n\n    var _ref2 = nativeListener.forwardX === undefined ? createFakeAudioParams() : nativeListener,\n        forwardX = _ref2.forwardX,\n        forwardY = _ref2.forwardY,\n        forwardZ = _ref2.forwardZ,\n        positionX = _ref2.positionX,\n        positionY = _ref2.positionY,\n        positionZ = _ref2.positionZ,\n        upX = _ref2.upX,\n        upY = _ref2.upY,\n        upZ = _ref2.upZ;\n\n    return {\n      get forwardX() {\n        return forwardX;\n      },\n\n      get forwardY() {\n        return forwardY;\n      },\n\n      get forwardZ() {\n        return forwardZ;\n      },\n\n      get positionX() {\n        return positionX;\n      },\n\n      get positionY() {\n        return positionY;\n      },\n\n      get positionZ() {\n        return positionZ;\n      },\n\n      get upX() {\n        return upX;\n      },\n\n      get upY() {\n        return upY;\n      },\n\n      get upZ() {\n        return upZ;\n      }\n\n    };\n  };\n};","map":{"version":3,"mappings":"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","names":["MOST_NEGATIVE_SINGLE_FLOAT","MOST_POSITIVE_SINGLE_FLOAT","createAudioListenerFactory","createAudioParam","createNativeChannelMergerNode","createNativeConstantSourceNode","createNativeScriptProcessorNode","createNotSupportedError","getFirstSample","isNativeOfflineAudioContext","overwriteAccessors","context","nativeContext","nativeListener","listener","createFakeAudioParams","buffer","Float32Array","channelMergerNode","channelCount","channelCountMode","channelInterpretation","numberOfInputs","isOffline","isScriptProcessorNodeCreated","lastOrientation","lastPosition","createScriptProcessorNode","scriptProcessorNode","onaudioprocess","inputBuffer","orientation","some","value","index","setOrientation","positon","setPosition","connect","createSetOrientation","createSetPosition","createFakeAudioParam","input","initialValue","setValue","constantSourceNode","offset","start","Object","defineProperty","get","audioParam","call","set","err","code","cancelAndHoldAtTime","args","apply","cancelScheduledValues","exponentialRampToValueAtTime","linearRampToValueAtTime","setTargetAtTime","setValueAtTime","setValueCurveAtTime","forwardX","forwardY","forwardZ","positionX","positionY","positionZ","upX","upY","upZ","undefined"],"sources":["C:\\Users\\brigh\\storage\\js_project\\Gakugeki_WEB\\node_modules\\standardized-audio-context\\src\\factories\\audio-listener-factory.ts"],"sourcesContent":["import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nimport { IAudioParam } from '../interfaces';\nimport { TAudioListenerFactoryFactory } from '../types';\n\nexport const createAudioListenerFactory: TAudioListenerFactoryFactory = (\n    createAudioParam,\n    createNativeChannelMergerNode,\n    createNativeConstantSourceNode,\n    createNativeScriptProcessorNode,\n    createNotSupportedError,\n    getFirstSample,\n    isNativeOfflineAudioContext,\n    overwriteAccessors\n) => {\n    return (context, nativeContext) => {\n        const nativeListener = nativeContext.listener;\n\n        // Bug #117: Only Chrome & Edge support the new interface already.\n        const createFakeAudioParams = () => {\n            const buffer = new Float32Array(1);\n            const channelMergerNode = createNativeChannelMergerNode(nativeContext, {\n                channelCount: 1,\n                channelCountMode: 'explicit',\n                channelInterpretation: 'speakers',\n                numberOfInputs: 9\n            });\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n\n            let isScriptProcessorNodeCreated = false;\n            let lastOrientation: [number, number, number, number, number, number] = [0, 0, -1, 0, 1, 0];\n            let lastPosition: [number, number, number] = [0, 0, 0];\n\n            const createScriptProcessorNode = () => {\n                if (isScriptProcessorNodeCreated) {\n                    return;\n                }\n\n                isScriptProcessorNodeCreated = true;\n\n                const scriptProcessorNode = createNativeScriptProcessorNode(nativeContext, 256, 9, 0);\n\n                // tslint:disable-next-line:deprecation\n                scriptProcessorNode.onaudioprocess = ({ inputBuffer }) => {\n                    const orientation: [number, number, number, number, number, number] = [\n                        getFirstSample(inputBuffer, buffer, 0),\n                        getFirstSample(inputBuffer, buffer, 1),\n                        getFirstSample(inputBuffer, buffer, 2),\n                        getFirstSample(inputBuffer, buffer, 3),\n                        getFirstSample(inputBuffer, buffer, 4),\n                        getFirstSample(inputBuffer, buffer, 5)\n                    ];\n\n                    if (orientation.some((value, index) => value !== lastOrientation[index])) {\n                        nativeListener.setOrientation(...orientation); // tslint:disable-line:deprecation\n\n                        lastOrientation = orientation;\n                    }\n\n                    const positon: [number, number, number] = [\n                        getFirstSample(inputBuffer, buffer, 6),\n                        getFirstSample(inputBuffer, buffer, 7),\n                        getFirstSample(inputBuffer, buffer, 8)\n                    ];\n\n                    if (positon.some((value, index) => value !== lastPosition[index])) {\n                        nativeListener.setPosition(...positon); // tslint:disable-line:deprecation\n\n                        lastPosition = positon;\n                    }\n                };\n\n                channelMergerNode.connect(scriptProcessorNode);\n            };\n            const createSetOrientation = (index: number) => (value: number) => {\n                if (value !== lastOrientation[index]) {\n                    lastOrientation[index] = value;\n\n                    nativeListener.setOrientation(...lastOrientation); // tslint:disable-line:deprecation\n                }\n            };\n            const createSetPosition = (index: number) => (value: number) => {\n                if (value !== lastPosition[index]) {\n                    lastPosition[index] = value;\n\n                    nativeListener.setPosition(...lastPosition); // tslint:disable-line:deprecation\n                }\n            };\n            const createFakeAudioParam = (input: number, initialValue: number, setValue: (value: number) => void) => {\n                const constantSourceNode = createNativeConstantSourceNode(nativeContext, {\n                    channelCount: 1,\n                    channelCountMode: 'explicit',\n                    channelInterpretation: 'discrete',\n                    offset: initialValue\n                });\n\n                constantSourceNode.connect(channelMergerNode, 0, input);\n\n                // @todo This should be stopped when the context is closed.\n                constantSourceNode.start();\n\n                Object.defineProperty(constantSourceNode.offset, 'defaultValue', {\n                    get(): number {\n                        return initialValue;\n                    }\n                });\n\n                /*\n                 * Bug #62 & #74: Safari does not support ConstantSourceNodes and does not export the correct values for maxValue and\n                 * minValue for GainNodes.\n                 */\n                const audioParam = createAudioParam(\n                    <any>{ context },\n                    isOffline,\n                    constantSourceNode.offset,\n                    MOST_POSITIVE_SINGLE_FLOAT,\n                    MOST_NEGATIVE_SINGLE_FLOAT\n                );\n\n                overwriteAccessors(\n                    audioParam,\n                    'value',\n                    (get) => () => get.call(audioParam),\n                    (set) => (value) => {\n                        try {\n                            set.call(audioParam, value);\n                        } catch (err) {\n                            if (err.code !== 9) {\n                                throw err;\n                            }\n                        }\n\n                        createScriptProcessorNode();\n\n                        if (isOffline) {\n                            // Bug #117: Using setOrientation() and setPosition() doesn't work with an OfflineAudioContext.\n                            setValue(value);\n                        }\n                    }\n                );\n\n                audioParam.cancelAndHoldAtTime = ((cancelAndHoldAtTime) => {\n                    if (isOffline) {\n                        return () => {\n                            throw createNotSupportedError();\n                        };\n                    }\n\n                    return (...args: Parameters<IAudioParam['cancelAndHoldAtTime']>) => {\n                        const value = cancelAndHoldAtTime.apply(audioParam, args);\n\n                        createScriptProcessorNode();\n\n                        return value;\n                    };\n                })(audioParam.cancelAndHoldAtTime);\n                audioParam.cancelScheduledValues = ((cancelScheduledValues) => {\n                    if (isOffline) {\n                        return () => {\n                            throw createNotSupportedError();\n                        };\n                    }\n\n                    return (...args: Parameters<IAudioParam['cancelScheduledValues']>) => {\n                        const value = cancelScheduledValues.apply(audioParam, args);\n\n                        createScriptProcessorNode();\n\n                        return value;\n                    };\n                })(audioParam.cancelScheduledValues);\n                audioParam.exponentialRampToValueAtTime = ((exponentialRampToValueAtTime) => {\n                    if (isOffline) {\n                        return () => {\n                            throw createNotSupportedError();\n                        };\n                    }\n\n                    return (...args: Parameters<IAudioParam['exponentialRampToValueAtTime']>) => {\n                        const value = exponentialRampToValueAtTime.apply(audioParam, args);\n\n                        createScriptProcessorNode();\n\n                        return value;\n                    };\n                })(audioParam.exponentialRampToValueAtTime);\n                audioParam.linearRampToValueAtTime = ((linearRampToValueAtTime) => {\n                    if (isOffline) {\n                        return () => {\n                            throw createNotSupportedError();\n                        };\n                    }\n\n                    return (...args: Parameters<IAudioParam['linearRampToValueAtTime']>) => {\n                        const value = linearRampToValueAtTime.apply(audioParam, args);\n\n                        createScriptProcessorNode();\n\n                        return value;\n                    };\n                })(audioParam.linearRampToValueAtTime);\n                audioParam.setTargetAtTime = ((setTargetAtTime) => {\n                    if (isOffline) {\n                        return () => {\n                            throw createNotSupportedError();\n                        };\n                    }\n\n                    return (...args: Parameters<IAudioParam['setTargetAtTime']>) => {\n                        const value = setTargetAtTime.apply(audioParam, args);\n\n                        createScriptProcessorNode();\n\n                        return value;\n                    };\n                })(audioParam.setTargetAtTime);\n                audioParam.setValueAtTime = ((setValueAtTime) => {\n                    if (isOffline) {\n                        return () => {\n                            throw createNotSupportedError();\n                        };\n                    }\n\n                    return (...args: Parameters<IAudioParam['setValueAtTime']>) => {\n                        const value = setValueAtTime.apply(audioParam, args);\n\n                        createScriptProcessorNode();\n\n                        return value;\n                    };\n                })(audioParam.setValueAtTime);\n                audioParam.setValueCurveAtTime = ((setValueCurveAtTime) => {\n                    if (isOffline) {\n                        return () => {\n                            throw createNotSupportedError();\n                        };\n                    }\n\n                    return (...args: Parameters<IAudioParam['setValueCurveAtTime']>) => {\n                        const value = setValueCurveAtTime.apply(audioParam, args);\n\n                        createScriptProcessorNode();\n\n                        return value;\n                    };\n                })(audioParam.setValueCurveAtTime);\n\n                return audioParam;\n            };\n\n            return {\n                forwardX: createFakeAudioParam(0, 0, createSetOrientation(0)),\n                forwardY: createFakeAudioParam(1, 0, createSetOrientation(1)),\n                forwardZ: createFakeAudioParam(2, -1, createSetOrientation(2)),\n                positionX: createFakeAudioParam(6, 0, createSetPosition(0)),\n                positionY: createFakeAudioParam(7, 0, createSetPosition(1)),\n                positionZ: createFakeAudioParam(8, 0, createSetPosition(2)),\n                upX: createFakeAudioParam(3, 0, createSetOrientation(3)),\n                upY: createFakeAudioParam(4, 1, createSetOrientation(4)),\n                upZ: createFakeAudioParam(5, 0, createSetOrientation(5))\n            };\n        };\n\n        const { forwardX, forwardY, forwardZ, positionX, positionY, positionZ, upX, upY, upZ } =\n            nativeListener.forwardX === undefined ? createFakeAudioParams() : nativeListener;\n\n        return {\n            get forwardX(): IAudioParam {\n                return forwardX;\n            },\n            get forwardY(): IAudioParam {\n                return forwardY;\n            },\n            get forwardZ(): IAudioParam {\n                return forwardZ;\n            },\n            get positionX(): IAudioParam {\n                return positionX;\n            },\n            get positionY(): IAudioParam {\n                return positionY;\n            },\n            get positionZ(): IAudioParam {\n                return positionZ;\n            },\n            get upX(): IAudioParam {\n                return upX;\n            },\n            get upY(): IAudioParam {\n                return upY;\n            },\n            get upZ(): IAudioParam {\n                return upZ;\n            }\n        };\n    };\n};\n"]},"metadata":{},"sourceType":"module"}