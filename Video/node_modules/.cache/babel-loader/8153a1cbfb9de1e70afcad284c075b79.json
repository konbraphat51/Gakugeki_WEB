{"ast":null,"code":"import { wrapAudioBufferGetChannelDataMethod } from '../helpers/wrap-audio-buffer-get-channel-data-method';\nexport var createStartRendering = function createStartRendering(audioBufferStore, cacheTestResult, getAudioNodeRenderer, getUnrenderedAudioWorkletNodes, renderNativeOfflineAudioContext, testAudioBufferCopyChannelMethodsOutOfBoundsSupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds) {\n  return function (destination, nativeOfflineAudioContext) {\n    return getAudioNodeRenderer(destination).render(destination, nativeOfflineAudioContext)\n    /*\n     * Bug #86 & #87: Invoking the renderer of an AudioWorkletNode might be necessary if it has no direct or indirect connection to the\n     * destination.\n     */\n    .then(function () {\n      return Promise.all(Array.from(getUnrenderedAudioWorkletNodes(nativeOfflineAudioContext)).map(function (audioWorkletNode) {\n        return getAudioNodeRenderer(audioWorkletNode).render(audioWorkletNode, nativeOfflineAudioContext);\n      }));\n    }).then(function () {\n      return renderNativeOfflineAudioContext(nativeOfflineAudioContext);\n    }).then(function (audioBuffer) {\n      // Bug #5: Safari does not support copyFromChannel() and copyToChannel().\n      // Bug #100: Safari does throw a wrong error when calling getChannelData() with an out-of-bounds value.\n      if (typeof audioBuffer.copyFromChannel !== 'function') {\n        wrapAudioBufferCopyChannelMethods(audioBuffer);\n        wrapAudioBufferGetChannelDataMethod(audioBuffer); // Bug #157: Firefox does not allow the bufferOffset to be out-of-bounds.\n      } else if (!cacheTestResult(testAudioBufferCopyChannelMethodsOutOfBoundsSupport, function () {\n        return testAudioBufferCopyChannelMethodsOutOfBoundsSupport(audioBuffer);\n      })) {\n        wrapAudioBufferCopyChannelMethodsOutOfBounds(audioBuffer);\n      }\n\n      audioBufferStore.add(audioBuffer);\n      return audioBuffer;\n    });\n  };\n};","map":{"version":3,"mappings":"AAAA,SAASA,mCAAT,QAAoD,sDAApD;AAGA,OAAO,IAAMC,oBAAoB,GAA2B,SAA/CA,oBAA+C,CACxDC,gBADwD,EAExDC,eAFwD,EAGxDC,oBAHwD,EAIxDC,8BAJwD,EAKxDC,+BALwD,EAMxDC,mDANwD,EAOxDC,iCAPwD,EAQxDC,4CARwD,EASxD;EACA,OAAO,UAACC,WAAD,EAAcC,yBAAd;IAAA,OACHP,oBAAoB,CAACM,WAAD,CAApB,CACKE,MADL,CACYF,WADZ,EACyBC,yBADzB;IAEI;;;;IAFJ,CAMKE,IANL,CAMU;MAAA,OACFC,OAAO,CAACC,GAAR,CACIC,KAAK,CAACC,IAAN,CAAWZ,8BAA8B,CAACM,yBAAD,CAAzC,EAAsEO,GAAtE,CAA0E,UAACC,gBAAD;QAAA,OACtEf,oBAAoB,CAACe,gBAAD,CAApB,CAAuCP,MAAvC,CAA8CO,gBAA9C,EAAgER,yBAAhE,CADsE;MAAA,CAA1E,CADJ,CADE;IAAA,CANV,EAaKE,IAbL,CAaU;MAAA,OAAMP,+BAA+B,CAACK,yBAAD,CAArC;IAAA,CAbV,EAcKE,IAdL,CAcU,UAACO,WAAD,EAAgB;MAClB;MACA;MACA,IAAI,OAAOA,WAAW,CAACC,eAAnB,KAAuC,UAA3C,EAAuD;QACnDb,iCAAiC,CAACY,WAAD,CAAjC;QACApB,mCAAmC,CAACoB,WAAD,CAAnC,CAFmD,CAGnD;MACH,CAJD,MAIO,IACH,CAACjB,eAAe,CAACI,mDAAD,EAAsD;QAAA,OAClEA,mDAAmD,CAACa,WAAD,CADe;MAAA,CAAtD,CADb,EAIL;QACEX,4CAA4C,CAACW,WAAD,CAA5C;MACH;;MAEDlB,gBAAgB,CAACoB,GAAjB,CAAqBF,WAArB;MAEA,OAAOA,WAAP;IACH,CAhCL,CADG;EAAA,CAAP;AAkCH,CA5CM","names":["wrapAudioBufferGetChannelDataMethod","createStartRendering","audioBufferStore","cacheTestResult","getAudioNodeRenderer","getUnrenderedAudioWorkletNodes","renderNativeOfflineAudioContext","testAudioBufferCopyChannelMethodsOutOfBoundsSupport","wrapAudioBufferCopyChannelMethods","wrapAudioBufferCopyChannelMethodsOutOfBounds","destination","nativeOfflineAudioContext","render","then","Promise","all","Array","from","map","audioWorkletNode","audioBuffer","copyFromChannel","add"],"sources":["C:\\Users\\brigh\\storage\\js_project\\Gakugeki_WEB\\node_modules\\standardized-audio-context\\src\\factories\\start-rendering.ts"],"sourcesContent":["import { wrapAudioBufferGetChannelDataMethod } from '../helpers/wrap-audio-buffer-get-channel-data-method';\nimport { TStartRenderingFactory } from '../types';\n\nexport const createStartRendering: TStartRenderingFactory = (\n    audioBufferStore,\n    cacheTestResult,\n    getAudioNodeRenderer,\n    getUnrenderedAudioWorkletNodes,\n    renderNativeOfflineAudioContext,\n    testAudioBufferCopyChannelMethodsOutOfBoundsSupport,\n    wrapAudioBufferCopyChannelMethods,\n    wrapAudioBufferCopyChannelMethodsOutOfBounds\n) => {\n    return (destination, nativeOfflineAudioContext) =>\n        getAudioNodeRenderer(destination)\n            .render(destination, nativeOfflineAudioContext)\n            /*\n             * Bug #86 & #87: Invoking the renderer of an AudioWorkletNode might be necessary if it has no direct or indirect connection to the\n             * destination.\n             */\n            .then(() =>\n                Promise.all(\n                    Array.from(getUnrenderedAudioWorkletNodes(nativeOfflineAudioContext)).map((audioWorkletNode) =>\n                        getAudioNodeRenderer(audioWorkletNode).render(audioWorkletNode, nativeOfflineAudioContext)\n                    )\n                )\n            )\n            .then(() => renderNativeOfflineAudioContext(nativeOfflineAudioContext))\n            .then((audioBuffer) => {\n                // Bug #5: Safari does not support copyFromChannel() and copyToChannel().\n                // Bug #100: Safari does throw a wrong error when calling getChannelData() with an out-of-bounds value.\n                if (typeof audioBuffer.copyFromChannel !== 'function') {\n                    wrapAudioBufferCopyChannelMethods(audioBuffer);\n                    wrapAudioBufferGetChannelDataMethod(audioBuffer);\n                    // Bug #157: Firefox does not allow the bufferOffset to be out-of-bounds.\n                } else if (\n                    !cacheTestResult(testAudioBufferCopyChannelMethodsOutOfBoundsSupport, () =>\n                        testAudioBufferCopyChannelMethodsOutOfBoundsSupport(audioBuffer)\n                    )\n                ) {\n                    wrapAudioBufferCopyChannelMethodsOutOfBounds(audioBuffer);\n                }\n\n                audioBufferStore.add(audioBuffer);\n\n                return audioBuffer;\n            });\n};\n"]},"metadata":{},"sourceType":"module"}